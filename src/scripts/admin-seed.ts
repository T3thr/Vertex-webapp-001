// src/scripts/admin-seed.ts

import mongoose from "mongoose";
import { config } from "dotenv";
import dbConnect from "@/backend/lib/mongodb";
import { IUser } from "@/backend/models/User";

// Load environment variables from .env file
config({ path: ".env" });

// Load environment variables
const ADMIN_EMAIL = process.env.ADMIN_EMAIL;
const ADMIN_USERNAME = process.env.ADMIN_USERNAME;
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD;
const AUTHOR_EMAIL = process.env.AUTHOR_EMAIL;
const AUTHOR_USERNAME = process.env.AUTHOR_USERNAME;
const AUTHOR_PASSWORD = process.env.AUTHOR_PASSWORD;

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
 * @param User - Mongoose model for User
 */
async function seedAdmin(User: mongoose.Model<IUser>) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
    if (!ADMIN_EMAIL || !ADMIN_USERNAME || !ADMIN_PASSWORD) {
      throw new Error(
        "‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: ADMIN_EMAIL, ADMIN_USERNAME, ADMIN_PASSWORD ‡πÉ‡∏ô .env"
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingAdmin = await User.findOne({
      $or: [{ email: ADMIN_EMAIL }, { username: ADMIN_USERNAME }],
    });

    if (existingAdmin) {
      console.log(`‚ÑπÔ∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: ${existingAdmin.email}`);

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
      existingAdmin.email = ADMIN_EMAIL.toLowerCase();
      existingAdmin.username = ADMIN_USERNAME;
      existingAdmin.password = ADMIN_PASSWORD; // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏Æ‡∏ä‡πÉ‡∏ô pre("save") middleware
      existingAdmin.role = "Admin";
      existingAdmin.profile = {
        displayName: ADMIN_USERNAME,
        bio: "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏†‡∏≤‡∏û",
        ...existingAdmin.profile, // ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏
      };
      existingAdmin.stats = {
        followersCount: existingAdmin.stats.followersCount || 0,
        followingCount: existingAdmin.stats.followingCount || 0,
        novelsCount: existingAdmin.stats.novelsCount || 0,
        purchasesCount: existingAdmin.stats.purchasesCount || 0,
        donationsReceivedAmount: existingAdmin.stats.donationsReceivedAmount || 0,
        donationsMadeAmount: existingAdmin.stats.donationsMadeAmount || 0,
        totalEpisodesSoldCount: existingAdmin.stats.totalEpisodesSoldCount || 0,
      };
      existingAdmin.preferences = {
        language: "th",
        theme: "system",
        notifications: {
          email: true,
          push: true,
          novelUpdates: true,
          comments: true,
          donations: true,
        },
      };
      existingAdmin.wallet = {
        balance: existingAdmin.wallet?.balance || 0,
        currency: "THB",
        lastTransactionAt: existingAdmin.wallet?.lastTransactionAt,
      };
      existingAdmin.gamification = {
        level: existingAdmin.gamification?.level || 1,
        experience: existingAdmin.gamification?.experience || 0,
        streaks: {
          currentLoginStreak: existingAdmin.gamification?.streaks?.currentLoginStreak || 0,
          longestLoginStreak: existingAdmin.gamification?.streaks?.longestLoginStreak || 0,
          lastLoginDate: existingAdmin.gamification?.streaks?.lastLoginDate,
        },
      };
      existingAdmin.writerVerification = {
        status: "none",
        submittedAt: undefined,
        verifiedAt: undefined,
        rejectedReason: undefined,
        documents: [],
      };
      existingAdmin.isEmailVerified = true;
      existingAdmin.isActive = true;
      existingAdmin.isBanned = false;
      existingAdmin.lastLoginAt = new Date();

      await existingAdmin.save();
      console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${ADMIN_EMAIL}`);
      return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    console.log("üå± ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô...");
    const adminUser = await User.create({
      email: ADMIN_EMAIL.toLowerCase(),
      username: ADMIN_USERNAME,
      password: ADMIN_PASSWORD, // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏Æ‡∏ä‡πÉ‡∏ô pre("save") middleware
      role: "Admin",
      profile: {
        displayName: ADMIN_USERNAME,
        bio: "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏†‡∏≤‡∏û",
      },
      accounts: [], // ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ middleware ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° credentials account
      stats: {
        followersCount: 0,
        followingCount: 0,
        novelsCount: 0,
        purchasesCount: 0,
        donationsReceivedAmount: 0,
        donationsMadeAmount: 0,
        totalEpisodesSoldCount: 0,
      },
      preferences: {
        language: "th",
        theme: "system",
        notifications: {
          email: true,
          push: true,
          novelUpdates: true,
          comments: true,
          donations: true,
        },
      },
      wallet: {
        balance: 0,
        currency: "THB",
      },
      gamification: {
        level: 1,
        experience: 0,
        streaks: {
          currentLoginStreak: 0,
          longestLoginStreak: 0,
        },
      },
      writerVerification: {
        status: "none",
        documents: [],
      },
      isEmailVerified: true,
      isActive: true,
      isBanned: false,
      lastLoginAt: new Date(),
    });

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${ADMIN_EMAIL}`);
  } catch (error: any) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô:", error.message);
    throw error;
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
 * @param User - Mongoose model for User
 * @returns Author ID
 */
async function ensureAuthorExists(User: mongoose.Model<IUser>) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
    if (!AUTHOR_EMAIL || !AUTHOR_USERNAME || !AUTHOR_PASSWORD) {
      throw new Error(
        "‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: AUTHOR_EMAIL, AUTHOR_USERNAME, AUTHOR_PASSWORD ‡πÉ‡∏ô .env"
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    let author = await User.findOne({ username: AUTHOR_USERNAME });

    if (!author) {
      console.log("üå± ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢...");

      author = await User.create({
        username: AUTHOR_USERNAME,
        email: AUTHOR_EMAIL.toLowerCase(),
        password: AUTHOR_PASSWORD, // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏Æ‡∏ä‡πÉ‡∏ô pre("save") middleware
        role: "Writer",
        profile: {
          displayName: "‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢",
          bio: "‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß ‡∏£‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏•‡∏Å‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£",
        },
        accounts: [], // ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ middleware ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° credentials account
        stats: {
          followersCount: 0,
          followingCount: 0,
          novelsCount: 0,
          purchasesCount: 0,
          donationsReceivedAmount: 0,
          donationsMadeAmount: 0,
          totalEpisodesSoldCount: 0,
        },
        preferences: {
          language: "th",
          theme: "system",
          notifications: {
            email: true,
            push: true,
            novelUpdates: true,
            comments: true,
            donations: true,
          },
        },
        wallet: {
          balance: 0,
          currency: "THB",
        },
        gamification: {
          level: 1,
          experience: 0,
          streaks: {
            currentLoginStreak: 0,
            longestLoginStreak: 0,
          },
        },
        writerVerification: {
          status: "verified", // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô verified ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö seed
        },
        isEmailVerified: true,
        isActive: true,
        isBanned: false,
        lastLoginAt: new Date(),
      });

      console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } else {
      console.log("‚ÑπÔ∏è ‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß");

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      author.email = AUTHOR_EMAIL.toLowerCase();
      author.username = AUTHOR_USERNAME;
      author.password = AUTHOR_PASSWORD; // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏Æ‡∏ä‡πÉ‡∏ô pre("save") middleware
      author.role = "Writer";
      author.profile = {
        displayName: "‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢",
        bio: "‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß ‡∏£‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏•‡∏Å‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£",
        ...author.profile, // ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏
      };
      author.stats = {
        followersCount: author.stats.followersCount || 0,
        followingCount: author.stats.followingCount || 0,
        novelsCount: author.stats.novelsCount || 0,
        purchasesCount: author.stats.purchasesCount || 0,
        donationsReceivedAmount: author.stats.donationsReceivedAmount || 0,
        donationsMadeAmount: author.stats.donationsMadeAmount || 0,
        totalEpisodesSoldCount: author.stats.totalEpisodesSoldCount || 0,
      };
      author.preferences = {
        language: "th",
        theme: "system",
        notifications: {
          email: true,
          push: true,
          novelUpdates: true,
          comments: true,
          donations: true,
        },
      };
      author.wallet = {
        balance: author.wallet?.balance || 0,
        currency: "THB",
        lastTransactionAt: author.wallet?.lastTransactionAt,
      };
      author.gamification = {
        level: author.gamification?.level || 1,
        experience: author.gamification?.experience || 0,
        streaks: {
          currentLoginStreak: author.gamification?.streaks?.currentLoginStreak || 0,
          longestLoginStreak: author.gamification?.streaks?.longestLoginStreak || 0,
          lastLoginDate: author.gamification?.streaks?.lastLoginDate,
        },
      };
      author.writerVerification = {
        status: "verified",
        submittedAt: author.writerVerification?.submittedAt,
        verifiedAt: author.writerVerification?.verifiedAt || new Date(),
        rejectedReason: undefined,
        documents: author.writerVerification?.documents || [],
      };
      author.isEmailVerified = true;
      author.isActive = true;
      author.isBanned = false;
      author.lastLoginAt = new Date();

      await author.save();
      console.log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }

    return author._id;
  } catch (error: any) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô:", error.message);
    throw error;
  }
}

/**
 * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô seed
 */
async function main() {
  try {
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
    console.log("üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB...");
    await dbConnect();
    console.log("‚úÖ [MongoDB] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (NovelMaze)");

    // ‡πÇ‡∏´‡∏•‡∏î User model
    const UserModel = (await import("@/backend/models/User")).default;
    const User = UserModel();

    // ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£ seed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
    await seedAdmin(User);
    await ensureAuthorExists(User);

    console.log("üéâ ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ seed ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  } catch (err: any) {
    console.error("‚ùå ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ seed ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err.message);
    process.exit(1);
  } finally {
    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
    try {
      await mongoose.connection.close();
      console.log("üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡πÅ‡∏•‡πâ‡∏ß");
    } catch (closeError: any) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB:", closeError.message);
    }
    process.exit(0);
  }
}

main();