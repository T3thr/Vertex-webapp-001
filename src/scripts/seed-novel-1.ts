#!/usr/bin/env ts-node

import { config } from 'dotenv';
import dbConnect from '../backend/lib/mongodb';
import { createWhisper999Novel } from '../data/TheWhisperOf999';
import mongoose from 'mongoose';
import NovelModel from '../backend/models/Novel';
import EpisodeModel from '../backend/models/Episode';
import SceneModel from '../backend/models/Scene';
import ChoiceModel from '../backend/models/Choice';
import CharacterModel from '../backend/models/Character';
import UserModel from '../backend/models/User';
import UserProfileModel from '../backend/models/UserProfile';
import StoryMapModel from '../backend/models/StoryMap';
import bcrypt from 'bcryptjs';

// ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏à‡∏≤‡∏Å .env ‡πÅ‡∏•‡∏∞ .env.local
config({ path: '.env' });
config({ path: '.env.local' });

const AUTHOR_USERNAME = process.env.AUTHOR_USERNAME || 'whisper_author';

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @returns ObjectId ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
 */
const createMockAuthor = async () => {
  const author = await UserModel.findOne({ username: AUTHOR_USERNAME });
  if (author) {
    // Ensure profile exists
    if (!author.profile) {
        let userProfile = await UserProfileModel.findOne({ userId: author._id });
        if (!userProfile) {
            userProfile = new UserProfileModel({
                userId: author._id,
                displayName: '‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏á‡∏≤',
                penNames: ['‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏£‡∏∞‡∏ã‡∏¥‡∏ö', 'Shadow Scribe'],
                bio: '‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏•‡∏á‡πÉ‡∏´‡∏•‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏¢‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç',
            });
            await userProfile.save();
        }
        author.profile = userProfile._id;
        await author.save();
    }
    console.log(`‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${author.username} (${author._id})`);
    return author._id;
  }

  const salt = await bcrypt.genSalt(12);
  const hashedPassword = await bcrypt.hash('password123', salt);

  const newAuthor = new UserModel({
    username: AUTHOR_USERNAME,
    email: 'author_whisper@novelmaze.com',
    password: hashedPassword,
    accounts: [{
      provider: 'credentials',
      providerAccountId: 'author_whisper@novelmaze.com',
      type: 'credentials'
    }],
    roles: ['Writer'],
    primaryPenName: '‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏á‡∏≤',
    isEmailVerified: true,
    isActive: true,
    isBanned: false,
    isDeleted: false,
  });

  const savedAuthor = await newAuthor.save();

  const authorProfile = new UserProfileModel({
      userId: savedAuthor._id,
      displayName: '‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏á‡∏≤',
      penNames: ['‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏£‡∏∞‡∏ã‡∏¥‡∏ö', 'Shadow Scribe'],
      bio: '‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏•‡∏á‡πÉ‡∏´‡∏•‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏¢‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç',
  });
  await authorProfile.save();
  
  savedAuthor.profile = authorProfile._id;
  await savedAuthor.save();

  console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á‡πÉ‡∏´‡∏°‡πà: ${savedAuthor.username} (${savedAuthor._id})`);
  return savedAuthor._id;
};

const main = async () => {
  try {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Seed Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏£‡∏∞‡∏ã‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ï‡πÄ‡∏°‡∏ô‡∏ó‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç999"');
    console.log('===================================================================');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const requiredEnvVars = ['MONGODB_URI', 'AUTHOR_USERNAME'];
    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
    
    if (missingVars.length > 0) {
      console.error('‚ùå ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏≤‡∏¢‡πÑ‡∏õ:', missingVars.join(', '));
      console.log('üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env ‡∏´‡∏£‡∏∑‡∏≠ .env.local');
      console.log(`   MONGODB_URI="your_mongodb_connection_string"`);
      console.log(`   AUTHOR_USERNAME="your_author_username"`);
      console.log(`   DB_NAME="your_database_name"`);
      process.exit(1);
    }

    console.log(`üìç MongoDB URI: ${process.env.MONGODB_URI}`);
    console.log(`üìÅ Database Name: ${process.env.DB_NAME || 'default_db'}`);
    console.log(`üë§ Author Username: ${process.env.AUTHOR_USERNAME}`);
    console.log('');

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ dbConnect ‡∏à‡∏≤‡∏Å lib
    console.log('üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    await dbConnect();
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    console.log('');
    
    // ----- START: Cleanup Logic -----
    const novelSlug = '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏£‡∏∞‡∏ã‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ï‡πÄ‡∏°‡∏ô‡∏ó‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç999';
    const novelTitle = '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏£‡∏∞‡∏ã‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ï‡πÄ‡∏°‡∏ô‡∏ó‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç999';

    console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö (slug="${novelSlug}" ‡∏´‡∏£‡∏∑‡∏≠ title="${novelTitle}")...`);

    const novelsToDelete = await NovelModel.find({
      $or: [
        { slug: novelSlug },
        { title: { $regex: new RegExp(`^${novelTitle}$`, 'i') } },
      ]
    }).select('_id');

    const novelIdsToDelete = novelsToDelete.map(n => n._id);

    if (novelIdsToDelete.length > 0) {
      console.log(`‚ÑπÔ∏è  ‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ${novelIdsToDelete.length} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (‡∏Å‡πà‡∏≠‡∏ô seed ‡πÉ‡∏´‡∏°‡πà)`);

      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏ô
      console.log('üóëÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Episodes, Scenes, Choices, Characters, StoryMaps ‡πÄ‡∏Å‡πà‡∏≤...');
      
      // ‡∏•‡∏ö StoryMaps ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Novel ‡∏ô‡∏µ‡πâ (‡∏ó‡∏±‡πâ‡∏á Novel-level ‡πÅ‡∏•‡∏∞ Episode-level)
      // ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤ Episodes ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Novel ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ
      const episodesToDelete = await EpisodeModel.find({ novelId: { $in: novelIdsToDelete } }).select('_id');
      const episodeIdsToDelete = episodesToDelete.map(ep => ep._id);
      
      const smRes = await StoryMapModel.deleteMany({ 
        $or: [
          { novelId: { $in: novelIdsToDelete } }, // Novel-level StoryMaps
          { episodeId: { $in: episodeIdsToDelete } } // Episode-level StoryMaps
        ]
      });
      console.log(`üóëÔ∏è  ‡∏•‡∏ö StoryMaps: ${smRes.deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      const [epRes, scRes, chRes, charRes] = await Promise.all([
        EpisodeModel.deleteMany({ novelId: { $in: novelIdsToDelete } }),
        SceneModel.deleteMany({ novelId: { $in: novelIdsToDelete } }),
        ChoiceModel.deleteMany({ novelId: { $in: novelIdsToDelete } }),
        CharacterModel.deleteMany({ novelId: { $in: novelIdsToDelete } }),
      ]);
      console.log(`‚úÖ  ‡∏•‡∏ö episodes=${epRes.deletedCount}, scenes=${scRes.deletedCount}, choices=${chRes.deletedCount}, characters=${charRes.deletedCount}`);

      // ‡∏•‡∏ö Novels ‡πÄ‡∏≠‡∏á
      const novelResult = await NovelModel.deleteMany({ _id: { $in: novelIdsToDelete } });
      console.log(`‚úÖ  ‡∏•‡∏ö novels=${novelResult.deletedCount}`);
    } else {
      console.log('‚ÑπÔ∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö');
    }

    // ----- END: Cleanup Logic -----

    console.log('üë§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á...');
    const authorId = await createMockAuthor();
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${authorId}`);

    console.log('üìö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏£‡∏∞‡∏ã‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ï‡πÄ‡∏°‡∏ô‡∏ó‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç999"...');
    const whisperData = await createWhisper999Novel(authorId);
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏£‡∏∞‡∏ã‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ï‡πÄ‡∏°‡∏ô‡∏ó‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç999" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:
    - ‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢: ${whisperData.novel._id}
    - ‡∏ï‡∏≠‡∏ô: ${whisperData.episodes.length} ‡∏ï‡∏≠‡∏ô
    - ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: ${whisperData.characters.length} ‡∏ï‡∏±‡∏ß
    - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${whisperData.choices.length} ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    - ‡∏â‡∏≤‡∏Å: ${whisperData.scenes.length} ‡∏â‡∏≤‡∏Å
    - StoryMap: ${whisperData.storyMap._id}`);

    console.log('');
    console.log('üéâ Seed Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏£‡∏∞‡∏ã‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ï‡πÄ‡∏°‡∏ô‡∏ó‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç999" ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('===================================================================');

  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    process.exit(1);
  } finally {
    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏°‡∏≠ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    await mongoose.disconnect();
    console.log('üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß');
  }
  
  // Exit the process to prevent hanging
  process.exit(0);
};

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ main function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
main(); 