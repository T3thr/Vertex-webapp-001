// src/components/ui/ReCaptcha.tsx

"use client";

import { useCallback, useEffect, useRef } from 'react';
import { motion } from 'framer-motion';
import { FiUserPlus } from 'react-icons/fi';
import { LoadingSpinner } from '@/components/layouts/AuthModal';

// ‡∏Ç‡∏¢‡∏≤‡∏¢ interface ‡∏Ç‡∏≠‡∏á Window ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏° grecaptcha ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö v2 Invisible
interface ReCaptchaWindow extends Window {
  grecaptcha?: {
    render: (container: HTMLElement | string, parameters: {
      sitekey: string;
      callback?: (token: string) => void;
      'expired-callback'?: () => void;
      'error-callback'?: () => void;
      size: 'invisible';
      badge?: 'bottomright' | 'bottomleft' | 'inline';
    }) => number;
    execute: (id: number) => void;
    reset: (id: number) => void;
    ready: (callback: () => void) => void;
  };
}

// ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö props ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå
interface ReCaptchaProps {
  onVerify: (token: string | null) => void;
  trigger: boolean;
  badge?: 'bottomright' | 'bottomleft' | 'inline';
  isLoading: boolean;
  setIsLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  setIsSuccess: (success: boolean) => void;
  setMode: (mode: 'signin' | 'signup') => void;
  signUp: (email: string, username: string, password: string, recaptchaToken: string) => Promise<{ error?: string }>;
  email: string;
  username: string;
  password: string;
}

// ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå ReCaptcha - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ reCAPTCHA v2 Invisible ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
export default function ReCaptcha({
  onVerify,
  trigger,
  badge = 'bottomright',
  isLoading,
  setIsLoading,
  setError,
  setIsSuccess,
  setMode,
  signUp,
  email,
  username,
  password,
}: ReCaptchaProps) {
  const isMountedRef = useRef(false);
  const recaptchaRef = useRef<HTMLDivElement>(null);
  const widgetIdRef = useRef<number | null>(null);
  const isRenderedRef = useRef(false);
  const scriptLoadedRef = useRef(false);
  const recaptchaTokenRef = useRef<string | null>(null);
  
  // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ SITE KEY ‡∏à‡∏≤‡∏Å environment variable ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÇ‡∏Ñ‡πâ‡∏î
  const siteKey = process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY || '';

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå reCAPTCHA v2
  const loadRecaptchaScript = useCallback(() => {
    if (
      !document.querySelector('script[src^="https://www.google.com/recaptcha/api.js"]') &&
      !scriptLoadedRef.current
    ) {
      scriptLoadedRef.current = true;

      const script = document.createElement('script');
      script.src = `https://www.google.com/recaptcha/api.js?hl=th&render=explicit`;
      script.async = true;
      script.defer = true;
      document.body.appendChild(script);

      script.onload = () => {
        console.log('‚úÖ ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå reCAPTCHA v2 Invisible ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        const win = window as ReCaptchaWindow;
        if (win.grecaptcha && win.grecaptcha.ready) {
          win.grecaptcha.ready(() => {
            renderRecaptcha();
          });
        } else {
          setTimeout(renderRecaptcha, 500);
        }
      };

      script.onerror = () => {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå reCAPTCHA v2 Invisible ‡πÑ‡∏î‡πâ');
        scriptLoadedRef.current = false;
        onVerify(null);
      };
    }
  }, [onVerify]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ reCAPTCHA
  const renderRecaptcha = useCallback(() => {
    if (isRenderedRef.current) {
      console.log('‚ö†Ô∏è reCAPTCHA ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥');
      return;
    }

    const win = window as ReCaptchaWindow;
    if (!win.grecaptcha || !siteKey || !recaptchaRef.current) {
      console.error('‚ùå grecaptcha, siteKey ‡∏´‡∏£‡∏∑‡∏≠ container ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      if (!siteKey) {
        console.error('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ NEXT_PUBLIC_RECAPTCHA_SITE_KEY ‡πÉ‡∏ô .env ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');
        setError('‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ reCAPTCHA ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }
      onVerify(null);
      return;
    }

    try {
      const recaptchaCallback = (token: string) => {
        console.log('‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô reCAPTCHA v2 Invisible');
        recaptchaTokenRef.current = token;
        onVerify(token);
      };

      const recaptchaExpired = () => {
        console.log('‚ö†Ô∏è ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô reCAPTCHA ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏');
        recaptchaTokenRef.current = null;
        onVerify(null);
        if (widgetIdRef.current !== null) {
          win.grecaptcha?.reset(widgetIdRef.current);
        }
      };

      const recaptchaError = () => {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô reCAPTCHA');
        recaptchaTokenRef.current = null;
        onVerify(null);
      };

      // ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå reCAPTCHA v2 Invisible
      const widgetId = win.grecaptcha.render(recaptchaRef.current, {
        sitekey: siteKey,
        callback: recaptchaCallback,
        'expired-callback': recaptchaExpired,
        'error-callback': recaptchaError,
        size: 'invisible',
        badge: badge,
      });

      widgetIdRef.current = widgetId;
      isRenderedRef.current = true;
      console.log('‚úÖ reCAPTCHA v2 Invisible ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå reCAPTCHA:', error);
      isRenderedRef.current = false;
      onVerify(null);
    }
  }, [siteKey, onVerify, badge, setError]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ reCAPTCHA
  const executeRecaptcha = useCallback(() => {
    const win = window as ReCaptchaWindow;
    if (!win.grecaptcha || widgetIdRef.current === null) {
      console.error('‚ùå grecaptcha ‡∏´‡∏£‡∏∑‡∏≠ widget ID ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      onVerify(null);
      return;
    }

    try {
      win.grecaptcha.execute(widgetIdRef.current);
      console.log('üöÄ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ reCAPTCHA v2 Invisible');
    } catch (error) {
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ reCAPTCHA:', error);
      onVerify(null);
    }
  }, [onVerify]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ reCAPTCHA ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå mount
  useEffect(() => {
    if (!siteKey) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö NEXT_PUBLIC_RECAPTCHA_SITE_KEY ‡πÉ‡∏ô environment variables');
      setError('‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ reCAPTCHA ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
      onVerify(null);
      return;
    }

    if (isMountedRef.current) return;
    isMountedRef.current = true;

    loadRecaptchaScript();

    // Cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå unmount
    return () => {
      if (widgetIdRef.current !== null) {
        const win = window as ReCaptchaWindow;
        try {
          win.grecaptcha?.reset(widgetIdRef.current);
        } catch (error) {
          console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï reCAPTCHA ‡πÑ‡∏î‡πâ:', error);
        }
        widgetIdRef.current = null;
      }
      isMountedRef.current = false;
      isRenderedRef.current = false;
    };
  }, [siteKey, loadRecaptchaScript, onVerify, setError]);

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ reCAPTCHA ‡πÄ‡∏°‡∏∑‡πà‡∏≠ trigger ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô true
  useEffect(() => {
    if (trigger && isRenderedRef.current && widgetIdRef.current !== null) {
      executeRecaptcha();
    } else if (trigger && !isRenderedRef.current) {
      const win = window as ReCaptchaWindow;
      if (win.grecaptcha) {
        renderRecaptcha();
        setTimeout(() => {
          if (isRenderedRef.current && widgetIdRef.current !== null) {
            executeRecaptcha();
          } else {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ reCAPTCHA ‡∏´‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå');
            onVerify(null);
          }
        }, 500);
      } else {
        console.error('‚ùå grecaptcha ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        onVerify(null);
      }
    }
  }, [trigger, executeRecaptcha, renderRecaptcha, onVerify]);

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
  useEffect(() => {
    if (recaptchaTokenRef.current && isLoading) {
      const verifyAndSignUp = async () => {
        try {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reCAPTCHA token
          const recaptchaResponse = await fetch('/api/auth/verify-recaptcha', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ token: recaptchaTokenRef.current }),
          });

          const recaptchaData = await recaptchaResponse.json();

          if (!recaptchaResponse.ok || !recaptchaData.success) {
            const errorMsg = recaptchaData.error || '‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
            setError(errorMsg);
            setIsLoading(false);
            return;
          }

          // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß
          const result = await signUp(email, username, password, recaptchaTokenRef.current!);
          if (result.error) {
            setError(result.error);
          } else {
            setIsSuccess(true);
            setTimeout(() => {
              setMode('signin');
            }, 1500);
          }
        } catch (err: any) {
          setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î');
          console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:', err);
        } finally {
          setIsLoading(false);
          // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥
          if (widgetIdRef.current !== null) {
            try {
              const win = window as ReCaptchaWindow;
              win.grecaptcha?.reset(widgetIdRef.current);
            } catch (error) {
              console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï reCAPTCHA ‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:', error);
            }
          }
          recaptchaTokenRef.current = null;
        }
      };

      verifyAndSignUp();
    } else if (recaptchaTokenRef.current === null && isLoading && !trigger) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö token ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ reCAPTCHA
      setError('‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
      setIsLoading(false);
    }
  }, [recaptchaTokenRef.current, isLoading, trigger, email, username, password, signUp, setError, setIsSuccess, setMode]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
  const handleSignupSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setIsLoading(true);
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ reCAPTCHA
    onVerify(null); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï token ‡∏Å‡πà‡∏≠‡∏ô
    setTimeout(() => {
      executeRecaptcha();
    }, 100);
  };

  if (!siteKey) {
    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="text-red-500 text-sm text-center"
      >
        ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå reCAPTCHA ‡πÉ‡∏ô environment variables
      </motion.div>
    );
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reCAPTCHA v2 Invisible ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
  return (
    <div className="space-y-4">
      <div ref={recaptchaRef} className="g-recaptcha" data-size="invisible" />
      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å */}
      <motion.button
        type="submit"
        onClick={handleSignupSubmit}
        disabled={isLoading}
        className="w-full py-4 bg-primary hover:bg-primary/90 text-primary-foreground font-medium rounded-xl shadow-lg flex items-center justify-center gap-2.5 transition-all duration-300 disabled:opacity-60 disabled:cursor-not-allowed mt-3 hover:scale-[1.01]"
        aria-label="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"
        whileHover={{ scale: 1.01 }}
        whileTap={{ scale: 0.98 }}
      >
        {isLoading ? (
          <>
            <LoadingSpinner size="sm" color="currentColor" />
            <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...</span>
          </>
        ) : (
          <>
            <FiUserPlus size={20} />
            <span className="text-lg">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</span>
          </>
        )}
      </motion.button>
      <div className="text-center text-xs text-muted-foreground">
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏¢ Google reCAPTCHA ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ö‡∏≠‡∏ó
        <br />
        <a 
          href="https://policies.google.com/privacy" 
          target="_blank" 
          rel="noopener noreferrer" 
          className="underline hover:text-primary"
        >
          ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
        </a>{' '}
        ‡πÅ‡∏•‡∏∞{' '}
        <a 
          href="https://policies.google.com/terms" 
          target="_blank" 
          rel="noopener noreferrer" 
          className="underline hover:text-primary"
        >
          ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        </a>{' '}
        ‡∏Ç‡∏≠‡∏á Google ‡∏°‡∏µ‡∏ú‡∏•‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ
      </div>
    </div>
  );
}