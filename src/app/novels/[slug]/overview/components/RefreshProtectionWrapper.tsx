'use client'

import React, { useEffect, useState } from 'react'
import { toast } from 'sonner'

interface RefreshProtectionWrapperProps {
  children: React.ReactNode
}

/**
 * Professional Refresh Protection Wrapper
 * ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ Adobe Premiere Pro & Canva
 * ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ refresh
 */
const RefreshProtectionWrapper: React.FC<RefreshProtectionWrapperProps> = ({ children }) => {
  const [hasCheckedRefresh, setHasCheckedRefresh] = useState(false)

  useEffect(() => {
    // ===============================
    // PROFESSIONAL REFRESH PROTECTION
    // ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ Adobe Premiere Pro & Canva
    // ===============================
    
    const checkForUnsavedChangesOnRefresh = () => {
      if (typeof window === 'undefined') return

      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö localStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö unsaved changes (EventManager integration)
        const hasUnsavedChanges = localStorage.getItem('divwy-has-unsaved-changes') === 'true'
        const lastChange = localStorage.getItem('divwy-last-change')
        const lastSaved = localStorage.getItem('divwy-last-saved')
        
        // Professional EventManager state integration
        const saveStateString = localStorage.getItem('divwy-save-state')
        let eventManagerState = null
        try {
          eventManagerState = saveStateString ? JSON.parse(saveStateString) : null
        } catch (error) {
          console.warn('[RefreshProtection] Failed to parse EventManager state:', error)
        }
        
        // Professional analytics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        const changeTimestamp = lastChange ? parseInt(lastChange) : null
        const savedTimestamp = lastSaved ? parseInt(lastSaved) : null
        const currentTime = Date.now()
        
        // Enterprise logging ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging
        if (process.env.NODE_ENV === 'development') {
          console.log('[RefreshProtection] Professional refresh detection:', {
            hasUnsavedChanges,
            changeTimestamp: changeTimestamp ? new Date(changeTimestamp).toISOString() : null,
            savedTimestamp: savedTimestamp ? new Date(savedTimestamp).toISOString() : null,
            timeSinceLastChange: changeTimestamp ? currentTime - changeTimestamp : null,
            eventManagerState: eventManagerState ? {
              isDirty: eventManagerState.isDirty,
              hasUnsavedChanges: eventManagerState.hasUnsavedChanges,
              lastSaved: eventManagerState.lastSaved
            } : null
          })
        }
        
        // Professional refresh detection logic (EventManager integration)
        const shouldShowWarning = hasUnsavedChanges || 
          (eventManagerState?.hasUnsavedChanges || eventManagerState?.isDirty) ||
          (changeTimestamp && (!savedTimestamp || changeTimestamp > savedTimestamp))
        
        if (shouldShowWarning && changeTimestamp) {
          const timeSinceChange = currentTime - changeTimestamp
          
          // ‡πÅ‡∏™‡∏î‡∏á warning ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
          if (timeSinceChange < 30 * 60 * 1000) { // 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            // Professional user notification
            toast.warning(
              '‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å\n\n' +
              'üîÑ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏à‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n\n' +
              'üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢',
              { 
                duration: 8000,
                action: {
                  label: '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß',
                  onClick: () => {
                    // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï flag
                    localStorage.setItem('divwy-refresh-warned', 'true')
                  }
                }
              }
            )
            
            // Professional additional guidance
            setTimeout(() => {
              toast.info(
                'üéØ Pro Tip: ‡πÉ‡∏ä‡πâ Ctrl+S ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πà‡∏ß‡∏ô\n' +
                '‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏ß‡∏≤',
                { duration: 5000 }
              )
            }, 2000)
          }
        } else if (!shouldShowWarning) {
          // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á - Professional user feedback
          if (process.env.NODE_ENV === 'development') {
            console.log('[RefreshProtection] Clean refresh detected - no unsaved changes')
          }
        }
        
        // Professional cleanup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö one-time check
        setHasCheckedRefresh(true)
        
      } catch (error) {
        console.error('[RefreshProtection] Error checking for unsaved changes:', error)
        // Graceful degradation - ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      }
    }

    // Professional delayed check ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ components ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
    if (!hasCheckedRefresh) {
      const checkTimer = setTimeout(() => {
        checkForUnsavedChangesOnRefresh()
      }, 500) // ‡∏£‡∏≠ 500ms ‡πÉ‡∏´‡πâ components ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à

      return () => {
        if (checkTimer) {
          clearTimeout(checkTimer)
        }
      }
    }
  }, [hasCheckedRefresh])

  // Professional cross-tab synchronization
  useEffect(() => {
    // ===============================
    // ENTERPRISE CROSS-TAB AWARENESS
    // ===============================
    
    const handleStorageChange = (event: StorageEvent) => {
      if (event.key === 'divwy-has-unsaved-changes' && event.newValue === 'true') {
        // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å tab ‡∏≠‡∏∑‡πà‡∏ô - Professional notification
        toast.info(
          'üìÇ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô\n\n' +
          'üí° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
          { duration: 6000 }
        )
      }
    }

    // Professional event listener registration
    if (typeof window !== 'undefined') {
      window.addEventListener('storage', handleStorageChange)
      
      return () => {
        window.removeEventListener('storage', handleStorageChange)
      }
    }
  }, [])

  return <>{children}</>
}

export default RefreshProtectionWrapper
