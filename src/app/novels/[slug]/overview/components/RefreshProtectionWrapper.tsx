'use client'

import React, { useEffect, useState } from 'react'
import { toast } from 'sonner'

interface RefreshProtectionWrapperProps {
  children: React.ReactNode
}

/**
 * Professional Refresh Protection Wrapper - Command-Based Detection
 * ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ Adobe Premiere Pro, Figma & Canva
 * ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ refresh ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ EventManager's command detection
 * 
 * üéØ Scenarios ‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö:
 * ‚úÖ Selection node ‚Üí ‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (UI action ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
 * ‚úÖ Add/Edit/Move node ‚Üí ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏≤‡∏Å refresh
 * ‚úÖ Save successfully ‚Üí ‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
 * ‚úÖ Undo/Redo ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ save point ‚Üí ‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
 * ‚úÖ Cross-tab detection ‚Üí ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ content changes
 */
const RefreshProtectionWrapper: React.FC<RefreshProtectionWrapperProps> = ({ children }) => {
  const [hasCheckedRefresh, setHasCheckedRefresh] = useState(false)

  useEffect(() => {
    // ===============================
    // PROFESSIONAL REFRESH PROTECTION
    // ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ Adobe Premiere Pro & Canva
    // ===============================
    
    const checkForUnsavedChangesOnRefresh = () => {
      if (typeof window === 'undefined') return

      try {
        // üî• ADOBE/FIGMA STYLE: ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ CONTENT changes detection (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° settings)
        const contentChanges = localStorage.getItem('divwy-content-changes') === 'true'
        const settingsOnlyChanges = localStorage.getItem('divwy-settings-only-changes') === 'true'
        const lastSettingsChange = localStorage.getItem('divwy-last-settings-change')
        
        // Professional EventManager state integration - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logging ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        const saveStateString = localStorage.getItem('divwy-save-state')
        let eventManagerState = null
        try {
          eventManagerState = saveStateString ? JSON.parse(saveStateString) : null
        } catch (error) {
          console.warn('[RefreshProtection] Failed to parse EventManager state:', error)
        }
        
        // üî• CRITICAL FIX: Use EventManager-compatible detection (same as save button)
        // Instead of relying on localStorage flags that can be incorrect, use the save state
        let eventManagerHasChanges = false;
        try {
          const saveStateString = localStorage.getItem('divwy-save-state');
          if (saveStateString) {
            const saveState = JSON.parse(saveStateString);
            // Use the same logic as save button: only content commands count
            eventManagerHasChanges = saveState.isDirty || saveState.hasUnsavedChanges;
          }
        } catch (error) {
          console.warn('[RefreshProtection] Failed to parse save state, falling back to localStorage flags:', error);
        }
        
        // ‚úÖ FALLBACK: Multi-layer verification with localStorage (but less reliable)
        const commandChanges = localStorage.getItem('divwy-command-has-changes') === 'true' 
        const lastSaved = localStorage.getItem('divwy-last-saved')
        const lastChange = localStorage.getItem('divwy-last-change')
        
        // ‚úÖ PROFESSIONAL: Auto-save awareness for accurate detection
        const autoSaveActive = localStorage.getItem('divwy-auto-save-active') === 'true'
        const lastAutoSave = localStorage.getItem('divwy-last-successful-auto-save')
        const autoSaveStarted = localStorage.getItem('divwy-auto-save-started')
        
        // ‚úÖ PROFESSIONAL: Time-based verification (like Figma) with auto-save awareness
        const timeSinceLastSave = lastSaved ? Date.now() - parseInt(lastSaved) : Infinity
        const timeSinceLastChange = lastChange ? Date.now() - parseInt(lastChange) : 0
        const timeSinceAutoSave = lastAutoSave ? Date.now() - parseInt(lastAutoSave) : Infinity
        const timeSinceAutoSaveStarted = autoSaveStarted ? Date.now() - parseInt(autoSaveStarted) : Infinity
        
        // ‚úÖ PROFESSIONAL FIX: Enhanced settings detection to prevent false warnings
        const timeSinceLastSettingsChange = lastSettingsChange ? Date.now() - parseInt(lastSettingsChange) : Infinity
        const isRecentSettingsChange = settingsOnlyChanges && timeSinceLastSettingsChange < 30000 // 30 seconds buffer for settings
        
        // üî• CRITICAL FIX: PRIMARY detection uses EventManager state (same as save button)
        // EventManager is AUTHORITATIVE - if it says no changes, we trust it completely
        const primaryHasChanges = eventManagerHasChanges && // ‚úÖ PRIMARY: EventManager-based detection
                                 !settingsOnlyChanges && // ‚úÖ Ignore settings-only changes
                                 !isRecentSettingsChange && // ‚úÖ Extra protection for recent settings changes
                                 !autoSaveActive; // Don't warn if auto-save is currently running
        
        // üî• CRITICAL FIX: If EventManager says no changes, DON'T use fallback
        // This prevents false positives from stale localStorage flags
        let fallbackHasChanges = false;
        if (!eventManagerHasChanges) {
          // Only use fallback if EventManager state is unavailable (not just false)
          const saveStateString = localStorage.getItem('divwy-save-state');
          if (!saveStateString) {
            // EventManager state unavailable, use fallback with extreme caution
            fallbackHasChanges = commandChanges && // ‚úÖ FALLBACK: localStorage-based detection
                                !settingsOnlyChanges && // ‚úÖ Ignore settings-only changes
                                !isRecentSettingsChange && // ‚úÖ Extra protection for recent settings changes
                                timeSinceLastChange > timeSinceLastSave &&
                                timeSinceLastSave > 10000 && // 10 seconds tolerance
                                !autoSaveActive && // Don't warn if auto-save is currently running
                                timeSinceAutoSave > 15000 && // Allow 15 seconds after successful auto-save
                                timeSinceAutoSaveStarted > 30000; // Allow 30 seconds from last auto-save attempt
          }
          // If EventManager state exists but says no changes, trust it completely
        }
                                  
        const hasRecentUnsavedChanges = primaryHasChanges || fallbackHasChanges;
        
        const shouldShowWarning = hasRecentUnsavedChanges; // ‚úÖ Time-verified detection

        // Enterprise logging ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging - enhanced with EventManager detection
        if (process.env.NODE_ENV === 'development') {
          console.log('[RefreshProtection] üîç AUTHORITATIVE EventManager Detection (BLOCKS false positives):', {
            // üî• PRIMARY DETECTION (same as save button) - AUTHORITATIVE
            eventManagerHasChanges,
            primaryHasChanges,
            primaryMethod: 'EventManager save state (divwy-save-state) - AUTHORITATIVE',
            eventManagerStateAvailable: !!localStorage.getItem('divwy-save-state'),
            // üî• FALLBACK DETECTION (only if EventManager unavailable)
            commandChanges,
            fallbackHasChanges,
            fallbackMethod: fallbackHasChanges ? 'localStorage flags (EventManager unavailable)' : 'BLOCKED by EventManager authority',
            fallbackBlocked: eventManagerHasChanges === false && !!localStorage.getItem('divwy-save-state'),
            // üî• FINAL RESULT
            hasRecentUnsavedChanges,
            shouldWarn: hasRecentUnsavedChanges,
            detectionMethod: primaryHasChanges ? 'PRIMARY: EventManager (authoritative)' : 
                           fallbackHasChanges ? 'FALLBACK: localStorage (EventManager unavailable)' : 
                           'EventManager says NO CHANGES - trusted completely',
            // Settings and timing data
            contentChanges: `${contentChanges} (IGNORED - using EventManager state)`,
            settingsOnlyChanges,
            isRecentSettingsChange,
            timeSinceLastSettingsChange,
            autoSaveActive,
            timeSinceLastSave,
            timeSinceLastChange,
            timeSinceAutoSave,
            timeSinceAutoSaveStarted,
            // EventManager state details
            eventManagerState: eventManagerState ? {
              isDirty: eventManagerState.isDirty,
              hasUnsavedChanges: eventManagerState.hasUnsavedChanges,
              lastSaved: eventManagerState.lastSaved,
              changeType: eventManagerState.changeType
            } : null,
            // Consistency verification
            consistencyCheck: {
              saveButtonLogic: 'EventManager.hasChanges() -> content commands only',
              refreshProtectionLogic: 'EventManager save state -> content commands only',
              status: '‚úÖ PERFECTLY CONSISTENT - Uses same EventManager state'
            },
            deselectionProtection: {
              uiOnlyCommands: 'Filtered out by EventManager.hasChanges()',
              selectionCommands: 'Not counted in undo stack',
              authoritativeBlocking: 'EventManager authority prevents fallback false positives',
              result: 'Deselect operations will NOT trigger refresh protection (GUARANTEED)'
            },
            tolerances: {
              baseSave: '10 seconds',
              autoSaveBuffer: '15 seconds', 
              autoSaveAttempt: '30 seconds'
            },
            settingsExclusion: settingsOnlyChanges ? 'EXCLUDED - Settings only' : 'INCLUDED - Content changes',
            settingsBuffer: isRecentSettingsChange ? 'BLOCKED - Recent settings change detected' : 'CLEAR - No recent settings',
            autoSaveStatus: autoSaveActive ? 'ACTIVE - Skip warning' : 'INACTIVE - Check other conditions'
          })
        }
        
        if (shouldShowWarning) {
          // üî• ADOBE/FIGMA STYLE: ‡πÅ‡∏™‡∏î‡∏á warning ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ CONTENT changes ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
          // ‚úÖ ‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á Settings ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
          
          // ‚úÖ PROFESSIONAL: Auto-save aware user notification
          toast.warning(
            '‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å\n\n' +
            'üîÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤\n\n' +
            'üí° ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö Professional (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ Adobe/Figma)\n\n' +
            'üéØ Auto-save Aware Detection: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡∏∞ Auto-save\n\n' +
            '‚öôÔ∏è Auto-save: ' + (autoSaveActive ? 'üü° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...' : 'üü¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'),
            {
              duration: 8000,
              action: {
                label: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
                onClick: () => {
                  // Scroll to save status indicator
                  document.querySelector('[data-save-indicator]')?.scrollIntoView({ behavior: 'smooth' })
                  localStorage.setItem('divwy-refresh-warned', 'true')
                }
              }
            }
          )
          
          // Professional additional guidance - enhanced with content-only awareness
          setTimeout(() => {
            toast.info(
              'üéØ Pro Tip: ‡πÉ‡∏ä‡πâ Ctrl+S ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πà‡∏ß‡∏ô\n' +
              '‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏ß‡∏≤\n\n' +
              'üí° Smart Detection: ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤)\n' +
              '‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á refresh\n' +
              'üîÑ Auto-save: ' + (autoSaveActive ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà' : '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥'),
              { duration: 5000 }
            )
          }, 2000)
        } else if (!shouldShowWarning) {
          // ‚úÖ PROFESSIONAL: Clean refresh detected
          if (process.env.NODE_ENV === 'development') {
            console.log('[RefreshProtection] üßπ Clean refresh detected - no recent unsaved changes (EventManager-based)', {
              eventManagerHasChanges,
              primaryHasChanges,
              fallbackHasChanges,
              contentChanges,
              commandChanges,
              settingsOnlyChanges,
              isRecentSettingsChange,
              timeSinceLastSettingsChange,
              autoSaveActive,
              timeSinceLastSave,
              timeSinceLastChange,
              timeSinceAutoSave,
              explanation: 'No recent unsaved changes detected using EventManager state (same as save button)',
              primaryReason: eventManagerHasChanges ? 'EventManager reports changes' : 'EventManager reports no changes (AUTHORITATIVE)',
              fallbackReason: fallbackHasChanges ? 'localStorage fallback used (EventManager unavailable)' : 'Fallback BLOCKED by EventManager authority',
              settingsReason: settingsOnlyChanges ? 'Settings-only changes ignored' : 'No settings changes',
              settingsBufferReason: isRecentSettingsChange ? 'Recent settings change blocked warning' : 'No recent settings buffer',
              autoSaveReason: autoSaveActive ? 'Auto-save is active - skip warning' : 'Auto-save completed recently',
              deselectionNote: 'Deselect operations correctly filtered out by EventManager.hasChanges()'
            })
          }
        }
        
        // Professional cleanup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö one-time check
        setHasCheckedRefresh(true)
        
      } catch (error) {
        console.error('[RefreshProtection] Error checking for unsaved changes:', error)
        // Graceful degradation - ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      }
    }

    // Professional delayed check ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ components ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
    if (!hasCheckedRefresh) {
      const checkTimer = setTimeout(() => {
        checkForUnsavedChangesOnRefresh()
      }, 500) // ‡∏£‡∏≠ 500ms ‡πÉ‡∏´‡πâ components ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à

      return () => {
        if (checkTimer) {
          clearTimeout(checkTimer)
        }
      }
    }
  }, [hasCheckedRefresh])

  // Professional cross-tab synchronization
  useEffect(() => {
    // ===============================
    // ENTERPRISE CROSS-TAB AWARENESS
    // ===============================
    
    const handleStorageChange = (event: StorageEvent) => {
      // üî• EVENTMANAGER-BASED: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CONTENT changes ‡∏à‡∏≤‡∏Å tab ‡∏≠‡∏∑‡πà‡∏ô (same logic as save button)
      if (event.key === 'divwy-save-state' && event.newValue) {
        try {
          const saveState = JSON.parse(event.newValue);
          const hasContentChanges = saveState.isDirty || saveState.hasUnsavedChanges;
          
          // üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô content changes ‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà settings
          const isSettingsOnly = localStorage.getItem('divwy-settings-only-changes') === 'true';
          
          if (hasContentChanges && !isSettingsOnly) {
            // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å tab ‡∏≠‡∏∑‡πà‡∏ô - Professional notification
            toast.info(
              'üìÇ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô\n\n' +
              'üí° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß\n\n' +
              'üéØ EventManager Detection: ‡πÉ‡∏ä‡πâ‡πÇ‡∏•‡∏à‡∏¥‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Save (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤)\n' +
              '‚úÖ ‡∏Å‡∏≤‡∏£ deselect ‡∏à‡∏∞‡πÑ‡∏°‡πà trigger ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ',
              { duration: 6000 }
            )
          }
        } catch (error) {
          console.warn('[RefreshProtection] Failed to parse cross-tab save state:', error);
        }
      }
      
      // üî• FALLBACK: Legacy detection for backward compatibility
      else if (event.key === 'divwy-content-changes' && event.newValue === 'true') {
        // üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô content changes ‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà settings
        const isSettingsOnly = localStorage.getItem('divwy-settings-only-changes') === 'true' || 
                              localStorage.getItem('divwy-content-changes') !== 'true'
        
        if (!isSettingsOnly) {
          // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å tab ‡∏≠‡∏∑‡πà‡∏ô - Professional notification
          toast.info(
            'üìÇ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô (Legacy Detection)\n\n' +
            'üí° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß\n\n' +
            'üéØ Fallback Detection: ‡πÉ‡∏ä‡πâ localStorage flags\n' +
            '‚úÖ ‡∏Å‡∏≤‡∏£ deselect ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÑ‡∏°‡πà trigger ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ',
            { duration: 6000 }
          )
        }
      }
    }

    // Professional event listener registration
    if (typeof window !== 'undefined') {
      window.addEventListener('storage', handleStorageChange)
      
      return () => {
        window.removeEventListener('storage', handleStorageChange)
      }
    }
  }, [])

  return <>{children}</>
}

export default RefreshProtectionWrapper
