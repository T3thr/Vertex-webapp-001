// src/app/novels/[slug]/overview/components/tabs/SingleUserEventManager.ts
// ===================================================================
// Simplified Event Manager for Single User Mode
// Optimized for Canva/Figma-like experience without real-time complexity
// ===================================================================

import { Command, CommandResult, CommandContext } from '@/lib/commands/Command';

export interface SingleUserConfig {
  novelSlug: string;
  autoSaveEnabled: boolean;
  autoSaveIntervalMs: number;
  maxHistorySize: number;
  onStateChange?: (state: SingleUserState) => void;
  onDirtyChange?: (isDirty: boolean) => void;
  onError?: (error: Error, context: string) => void;
}

export interface SingleUserState {
  // Command History
  commandHistory: Command[];
  undoStack: Command[];
  redoStack: Command[];
  
  // Save State
  isSaving: boolean;
  lastSaved: Date | null;
  isDirty: boolean;
  hasUnsavedChanges: boolean;
  
  // Version Control
  localVersion: number;
  serverVersion: number;
  
  // Error Handling
  lastError?: string;
  
  // Performance
  pendingCommands: number;
  totalEvents: number;
}

export interface SnapshotData {
  nodes: any[];
  edges: any[];
  storyVariables: any[];
  timestamp: number;
  version: number;
}

// ===================================================================
// Single User Command Context
// ===================================================================

class SingleUserCommandContext implements CommandContext {
  private eventManager: SingleUserEventManager;
  // üöÄ NEW: External UI update callbacks
  private reactFlowUpdater?: (nodes: any[], edges: any[]) => void;

  constructor(eventManager: SingleUserEventManager) {
    this.eventManager = eventManager;
  }

  // üöÄ NEW: Set external UI updater callback
  setReactFlowUpdater(updater: (nodes: any[], edges: any[]) => void): void {
    this.reactFlowUpdater = updater;
  }

  getCurrentNodes(): any[] {
    return this.eventManager.getCurrentSnapshot().nodes;
  }

  getCurrentEdges(): any[] {
    return this.eventManager.getCurrentSnapshot().edges;
  }

  getCurrentStoryVariables(): any[] {
    return this.eventManager.getCurrentSnapshot().storyVariables;
  }

  setNodes(nodes: any[]): void {
    this.eventManager.updateSnapshot({ 
      ...this.eventManager.getCurrentSnapshot(), 
      nodes,
      timestamp: Date.now()
    });
    
    // üî• CRITICAL: Immediate UI sync - ‡πÅ‡∏ö‡∏ö Figma/Canva
    if (this.reactFlowUpdater) {
      console.log('[SingleUserCommandContext] üîÑ Immediate UI sync - setNodes:', nodes.length);
      
      // ‚úÖ CRITICAL FIX: ‡πÉ‡∏ä‡πâ nodes ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏ó‡∏ô snapshot
      // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ snapshot ‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á out-of-sync
      const currentSnapshot = this.eventManager.getCurrentSnapshot();
      this.reactFlowUpdater([...nodes], [...currentSnapshot.edges]);
    }
  }

  setEdges(edges: any[]): void {
    this.eventManager.updateSnapshot({ 
      ...this.eventManager.getCurrentSnapshot(), 
      edges,
      timestamp: Date.now()
    });
    
    // üî• CRITICAL: Immediate UI sync - ‡πÅ‡∏ö‡∏ö Figma/Canva
    if (this.reactFlowUpdater) {
      console.log('[SingleUserCommandContext] üîÑ Immediate UI sync - setEdges:', edges.length);
      
      // ‚úÖ CRITICAL FIX: ‡πÉ‡∏ä‡πâ edges ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏ó‡∏ô snapshot
      const currentSnapshot = this.eventManager.getCurrentSnapshot();
      this.reactFlowUpdater([...currentSnapshot.nodes], [...edges]);
    }
  }

  setStoryVariables(variables: any[]): void {
    this.eventManager.updateSnapshot({ 
      ...this.eventManager.getCurrentSnapshot(), 
      storyVariables: variables,
      timestamp: Date.now()
    });
  }

  findNodeById(id: string): any | null {
    return this.getCurrentNodes().find(node => node.id === id) || null;
  }

  findEdgeById(id: string): any | null {
    return this.getCurrentEdges().find(edge => edge.id === edge.id) || null;
  }

  generateNodeId(): string {
    return `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  generateEdgeId(): string {
    return `edge_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  validateNode(node: any): boolean {
    return !!(node && node.id && node.type);
  }

  validateEdge(edge: any): boolean {
    return !!(edge && edge.id && edge.source && edge.target);
  }

  notifyChange(changeType: string, data: any): void {
    this.eventManager.notifyChange(changeType, data);
  }

  // üöÄ NEW: Bidirectional sync methods implementation
  updateReactFlowUI?: (nodes: any[], edges: any[]) => void = (nodes: any[], edges: any[]) => {
    if (this.reactFlowUpdater) {
      this.reactFlowUpdater(nodes, edges);
    }
  };

  syncBackToReactFlow?: () => void = () => {
    if (this.reactFlowUpdater) {
      const snapshot = this.eventManager.getCurrentSnapshot();
      this.reactFlowUpdater(snapshot.nodes, snapshot.edges);
    }
  };

  updateEventManagerState?: (nodes: any[], edges: any[], storyVariables: any[]) => void = (nodes: any[], edges: any[], storyVariables: any[]) => {
    this.eventManager.updateSnapshotFromReactFlow(nodes, edges, storyVariables);
  };
}

// ===================================================================
// Single User Event Manager
// ===================================================================

export class SingleUserEventManager {
  private config: SingleUserConfig;
  private state: SingleUserState;
  private commandContext: CommandContext;
  private currentSnapshot: SnapshotData;
  private originalSnapshot: SnapshotData;
  private autoSaveTimer?: NodeJS.Timeout;
  private debounceTimer?: NodeJS.Timeout;
  private saveDebouncer: SaveDebouncer; // üî• ADOBE/FIGMA STYLE: Save deduplication

  constructor(config: SingleUserConfig) {
    this.config = config;
    this.state = this.createInitialState();
    this.commandContext = new SingleUserCommandContext(this);
    this.currentSnapshot = this.createEmptySnapshot();
    this.originalSnapshot = this.createEmptySnapshot();
    this.saveDebouncer = new SaveDebouncer(); // üî• ADOBE/FIGMA STYLE: Initialize save deduplication

    // Start auto-save if enabled
    if (config.autoSaveEnabled) {
      this.startAutoSave();
    }

    console.log('[SingleUserEventManager] Initialized for single-user mode');
  }

  // ===================================================================
  // Public API
  // ===================================================================

  async executeCommand(command: Command): Promise<CommandResult> {
    try {
      // Validate command
      if (!command || !command.type) {
        throw new Error('Invalid command');
      }

      console.log(`[SingleUserEventManager] Executing command: ${command.type} - ${command.description}`);

      // Execute command
      if (command.execute) {
        await command.execute();
      }

      // Add to history ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ commands ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ undo ‡πÑ‡∏î‡πâ
      if (this.isUndoableCommand(command)) {
        this.addToHistory(command);
        
        // Clear redo stack ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ command ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Canva/Figma)
        this.state.redoStack = [];
        
        console.log(`[SingleUserEventManager] ‚úÖ Command added to history. Undo: ${this.state.undoStack.length}, Redo: ${this.state.redoStack.length}`);
      } else {
        console.log(`[SingleUserEventManager] ‚è≠Ô∏è Command not undoable, skipping history`);
      }

      // üî• CRITICAL FIX: Mark as dirty ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ content commands ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      if (this.isContentCommand(command)) {
        this.markAsDirty();
        console.log(`[SingleUserEventManager] ‚úèÔ∏è Content command marked as dirty: ${command.type}`);
      } else {
        console.log(`[SingleUserEventManager] üëÜ UI-only command, not marking as dirty: ${command.type}`);
      }

      // Update state
      this.updateState({
        totalEvents: this.state.totalEvents + 1
      });

      return {
        success: true,
        command: command,
        metadata: { timestamp: Date.now() }
      };

    } catch (error) {
      console.error('[SingleUserEventManager] Command execution failed:', error);
      
      this.updateState({
        lastError: error instanceof Error ? error.message : 'Command failed'
      });

      this.config.onError?.(error instanceof Error ? error : new Error('Command failed'), 'COMMAND_EXECUTION');

      return {
        success: false,
        command: command,
        error: error instanceof Error ? error : new Error('Command failed'),
        metadata: { timestamp: Date.now() }
      };
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ command ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ undo ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Canva/Figma)
  private isUndoableCommand(command: Command): boolean {
    const undoableTypes = [
      'ADD_NODE', 'DELETE_NODE', 'UPDATE_NODE', 'MOVE_NODE', 'RESIZE_NODE',
      'ADD_EDGE', 'DELETE_EDGE', 'UPDATE_EDGE',
      'ADD_VARIABLE', 'DELETE_VARIABLE', 'UPDATE_VARIABLE',
      'BATCH_OPERATION', 'COPY_NODES', 'PASTE_NODES',
      // ‚úÖ FIGMA/CANVA STYLE: Support for multiple selection operations
      'BATCH_MOVE', 'BATCH_DELETE', 'BATCH_COPY', 'BATCH_CUT', 'BATCH_PASTE', 'MULTI_SELECT'
    ];
    
    return undoableTypes.some(type => command.type.includes(type));
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ command ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
  private isSelectionOnlyCommand(command: Command): boolean {
    const selectionTypes = [
      // Selection Commands
      'MULTI_SELECT', 'SELECT_NODES', 'SELECT_EDGES', 'CLEAR_SELECTION',
      'SELECTION_CHANGE', 'UI_SELECT', 'VISUAL_SELECT', 'SELECT_ALL',
      'DESELECT_ALL', 'TOGGLE_SELECTION', 'SINGLE_SELECT',
      // UI-only Commands
      'UPDATE_VIEWPORT', 'UPDATE_CANVAS_POSITION', 'UPDATE_ZOOM',
      'UPDATE_UI_SETTINGS', 'TOGGLE_PANEL', 'CHANGE_VIEW_MODE',
      // Focus and Highlight Commands (UI-only)
      'FOCUS_NODE', 'HIGHLIGHT_NODE', 'UNHIGHLIGHT_NODE', 'SET_FOCUS',
      'CLEAR_FOCUS', 'HOVER_NODE', 'UNHOVER_NODE',
      // Canvas State Commands (UI-only)
      'SET_CANVAS_MODE', 'TOGGLE_GRID', 'UPDATE_MINIMAP', 'SET_VIEW_MODE'
    ];
    
    // ‚úÖ PROFESSIONAL: Explicit check for UI-only commands
    const isUIOnly = selectionTypes.some(type => command.type.includes(type));
    
    if (isUIOnly) {
      console.log(`[SingleUserEventManager] üëÜ UI-only command detected: ${command.type}`);
    }
    
    return isUIOnly;
  }

  // üî• CRITICAL FIX: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ command ‡πÄ‡∏õ‡πá‡∏ô content change ‡∏à‡∏£‡∏¥‡∏á‡πÜ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° Selection)
  private isContentCommand(command: Command): boolean {
    // ‚úÖ STEP 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö UI-only commands ‡∏Å‡πà‡∏≠‡∏ô (early exit)
    if (this.isSelectionOnlyCommand(command)) {
      console.log(`[SingleUserEventManager] üëÜ Selection/UI command, NOT content: ${command.type}`);
      return false; // Selection commands ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà content commands ‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î
    }
    
    // ‚úÖ STEP 2: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Content Commands ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô (Database Changes Only)
    const contentCommandTypes = [
      // Node Content Changes (Database)
      'ADD_NODE', 'DELETE_NODE', 'UPDATE_NODE', 'MOVE_NODE', 'RESIZE_NODE',
      // Edge Content Changes (Database)
      'ADD_EDGE', 'DELETE_EDGE', 'UPDATE_EDGE',
      // Variable Content Changes (Database)
      'ADD_VARIABLE', 'DELETE_VARIABLE', 'UPDATE_VARIABLE',
      // Batch Operations (Database Changes Only)
      'BATCH_OPERATION', 'COPY_NODES', 'PASTE_NODES',
      'BATCH_MOVE', 'BATCH_DELETE', 'BATCH_COPY', 'BATCH_CUT', 'BATCH_PASTE',
      // Story Structure Changes (Database)
      'UPDATE_STORY_VARIABLE', 'MODIFY_NODE_DATA', 'CHANGE_NODE_TYPE',
      'UPDATE_NODE_PROPERTIES', 'MODIFY_EDGE_PROPERTIES'
    ];
    
    // ‚úÖ STEP 3: Strict matching - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ commands ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô whitelist ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const isContentType = contentCommandTypes.some(type => command.type === type || command.type.startsWith(type));
    
    if (isContentType) {
      console.log(`[SingleUserEventManager] ‚úèÔ∏è Content command confirmed: ${command.type}`);
    } else {
      console.log(`[SingleUserEventManager] ‚ö™ Non-content command: ${command.type}`);
    }
    
    return isContentType;
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° command ‡πÄ‡∏Ç‡πâ‡∏≤ history ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ReactFlow generated commands)
  addCommandToHistory(command: Command): void {
    try {
      console.log(`[SingleUserEventManager] Adding command to history: ${command.type} - ${command.description}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ command ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ undo ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (this.isUndoableCommand(command)) {
        this.addToHistory(command);
        
        // Clear redo stack ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ command ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Canva/Figma)
        this.state.redoStack = [];
        
        console.log(`[SingleUserEventManager] ‚úÖ Command added to history. Undo: ${this.state.undoStack.length}, Redo: ${this.state.redoStack.length}`);
      } else {
        console.log(`[SingleUserEventManager] ‚è≠Ô∏è Command not undoable, skipping history`);
      }

      // üî• CRITICAL FIX: Mark as dirty ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ content commands ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      if (this.isContentCommand(command)) {
        this.markAsDirty();
        console.log(`[SingleUserEventManager] ‚úèÔ∏è Content command marked as dirty: ${command.type}`);
      } else {
        console.log(`[SingleUserEventManager] üëÜ UI-only command, not marking as dirty: ${command.type}`);
      }

      // Update state
      this.updateState({
        totalEvents: this.state.totalEvents + 1
      });

    } catch (error) {
      console.error('[SingleUserEventManager] Failed to add command to history:', error);
      this.config.onError?.(error instanceof Error ? error : new Error('Failed to add command to history'), 'ADD_TO_HISTORY');
    }
  }

  undo(): boolean {
    if (this.state.undoStack.length === 0) {
      console.log('[SingleUserEventManager] ‚Ü∂ No actions to undo');
      return false;
    }

    const command = this.state.undoStack.pop();
    if (!command) return false;

    try {
      console.log(`[SingleUserEventManager] ‚Ü∂ Undoing: ${command.type} - ${command.description}`);

      if (command.undo) {
        command.undo();
      }

      this.state.redoStack.push(command);
      
      // üî• PROFESSIONAL FIX: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dirty state ‡∏´‡∏•‡∏±‡∏á undo ‡πÅ‡∏ö‡∏ö Adobe/Figma
      if (this.isContentCommand(command)) {
        // ‚úÖ SIMPLE & ACCURATE: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ content commands ‡πÉ‡∏ô undo stack ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const remainingContentCommands = this.state.undoStack.filter(cmd => this.isContentCommand(cmd));
        const shouldBeDirty = remainingContentCommands.length > 0;
        
        this.updateState({
          isDirty: shouldBeDirty,
          hasUnsavedChanges: shouldBeDirty
        });
        this.config.onDirtyChange?.(shouldBeDirty);
        
        console.log(`[SingleUserEventManager] ‚Ü∂ Undo ${shouldBeDirty ? 'marked as dirty' : 'back to saved state'}: ${command.type}`, {
          remainingContentCommands: remainingContentCommands.length,
          commandTypes: remainingContentCommands.map(cmd => cmd.type)
        });
      } else {
        console.log(`[SingleUserEventManager] ‚Ü∂ Undo UI-only command, not affecting dirty state: ${command.type}`);
      }

      // üî• FIGMA/CANVA STYLE: Force immediate UI sync
      this.forceUISync();

      // Update state
      this.updateState({
        totalEvents: this.state.totalEvents + 1
      });

      console.log(`[SingleUserEventManager] ‚úÖ Undo successful. Undo: ${this.state.undoStack.length}, Redo: ${this.state.redoStack.length}`);
      return true;

    } catch (error) {
      console.error('[SingleUserEventManager] ‚ùå Undo failed:', error);
      // Re-add to undo stack if undo failed
      this.state.undoStack.push(command);
      return false;
    }
  }

  redo(): boolean {
    if (this.state.redoStack.length === 0) {
      console.log('[SingleUserEventManager] ‚Ü∑ No actions to redo');
      return false;
    }

    const command = this.state.redoStack.pop();
    if (!command) return false;

    try {
      console.log(`[SingleUserEventManager] ‚Ü∑ Redoing: ${command.type} - ${command.description}`);

      if (command.execute) {
        command.execute();
      }

      this.state.undoStack.push(command);
      
      // üî• PROFESSIONAL FIX: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dirty state ‡∏´‡∏•‡∏±‡∏á redo ‡πÅ‡∏ö‡∏ö Adobe/Figma
      if (this.isContentCommand(command)) {
        // ‚úÖ SIMPLE & ACCURATE: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ content commands ‡πÉ‡∏ô undo stack ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const remainingContentCommands = this.state.undoStack.filter(cmd => this.isContentCommand(cmd));
        const shouldBeDirty = remainingContentCommands.length > 0;
        
        this.updateState({
          isDirty: shouldBeDirty,
          hasUnsavedChanges: shouldBeDirty
        });
        this.config.onDirtyChange?.(shouldBeDirty);
        
        console.log(`[SingleUserEventManager] ‚Ü∑ Redo ${shouldBeDirty ? 'marked as dirty' : 'back to saved state'}: ${command.type}`, {
          remainingContentCommands: remainingContentCommands.length,
          commandTypes: remainingContentCommands.map(cmd => cmd.type)
        });
      } else {
        console.log(`[SingleUserEventManager] ‚Ü∑ Redo UI-only command, not affecting dirty state: ${command.type}`);
      }

      // üî• FIGMA/CANVA STYLE: Force immediate UI sync
      this.forceUISync();

      // Update state
      this.updateState({
        totalEvents: this.state.totalEvents + 1
      });

      console.log(`[SingleUserEventManager] ‚úÖ Redo successful. Undo: ${this.state.undoStack.length}, Redo: ${this.state.redoStack.length}`);
      return true;

    } catch (error) {
      console.error('[SingleUserEventManager] ‚ùå Redo failed:', error);
      // Re-add to redo stack if redo failed
      this.state.redoStack.push(command);
      return false;
    }
  }

  async saveManual(): Promise<void> {
    if (!this.state.isDirty) {
      console.log('[SingleUserEventManager] ‚úÖ No changes to save');
      return;
    }

    // üî• ADOBE/FIGMA STYLE: Check if save is already in progress
    if (this.saveDebouncer.isSaving()) {
      console.log('[SingleUserEventManager] ‚è≥ Save already in progress, skipping duplicate save');
      return;
    }

    this.updateState({ isSaving: true, lastError: undefined });

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö StoryMap model schema)
      const nodes = this.currentSnapshot.nodes || [];
      const edges = this.currentSnapshot.edges || [];
      const storyVariables = this.currentSnapshot.storyVariables || [];

      // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• nodes ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö IStoryMapNode interface
      const cleanedNodes = nodes.map(node => ({
        nodeId: node.id || node.nodeId,
        nodeType: node.type || node.nodeType || 'scene_node',
        title: node.data?.title || node.title || 'Untitled Node',
        position: { 
          x: Math.round(node.position?.x || 0), 
          y: Math.round(node.position?.y || 0)
        },
        nodeSpecificData: node.data?.nodeSpecificData || {},
        editorVisuals: {
          color: node.data?.color || '#3b82f6',
          orientation: node.data?.orientation || 'vertical'
        }
      }));

      // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• edges ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö IStoryMapEdge interface
      const cleanedEdges = edges.map(edge => ({
        edgeId: edge.id || edge.edgeId,
        sourceNodeId: edge.source || edge.sourceNodeId,
        targetNodeId: edge.target || edge.targetNodeId,
        label: edge.label || '',
        editorVisuals: {
          color: edge.data?.color || '#64748b',
          lineStyle: edge.data?.lineStyle || 'solid'
        }
      }));

      // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• storyVariables ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö IStoryVariableDefinition interface
      const cleanedStoryVariables = storyVariables.map(variable => ({
        variableId: variable.variableId || `var_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        variableName: variable.variableName || variable.name || 'Unknown Variable',
        dataType: variable.dataType || variable.variableType || 'string',
        initialValue: variable.initialValue !== undefined ? variable.initialValue : '',
        description: variable.description || '',
        isGlobal: variable.isGlobal !== undefined ? variable.isGlobal : true,
        isVisibleToPlayer: variable.isVisibleToPlayer || false
      }));

      const saveData = {
        nodes: cleanedNodes,
        edges: cleanedEdges,
        storyVariables: cleanedStoryVariables,
        version: this.state.localVersion
      };

      console.log('[SingleUserEventManager] üîÑ Preparing save with deduplication:', {
        novelSlug: this.config.novelSlug,
        nodeCount: saveData.nodes.length,
        edgeCount: saveData.edges.length,
        variableCount: saveData.storyVariables.length,
        version: saveData.version
      });
      
      // üî• ADOBE/FIGMA STYLE: Use SaveDebouncer to prevent duplicate saves
      const saveFunction = async (data: any) => {
        const encodedSlug = encodeURIComponent(this.config.novelSlug);
        const response = await fetch(`/api/novels/${encodedSlug}/storymap`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data)
        });

        console.log('[SingleUserEventManager] üì° Server response status:', response.status);

        if (!response.ok) {
          let errorMessage = `Save failed: ${response.status}`;
          let errorDetail = '';
          
          try {
            const errorData = await response.json();
            console.error('[SingleUserEventManager] ‚ùå Server error details:', errorData);
            
            if (errorData.error) {
              errorMessage = `Save failed: ${errorData.error}`;
            }
            if (errorData.details) {
              errorDetail = ` - ${errorData.details}`;
            }
          } catch (parseError) {
            // ‡∏ñ‡πâ‡∏≤ parse JSON ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ response text
            try {
              const errorText = await response.text();
              console.error('[SingleUserEventManager] ‚ùå Raw server error:', errorText);
              errorDetail = ` - ${errorText.substring(0, 200)}`;
            } catch {
              errorDetail = ` - ${response.statusText}`;
            }
          }
          
          throw new Error(errorMessage + errorDetail);
        }

        return response.json();
      };

      // üî• ADOBE/FIGMA STYLE: Perform save with proper duplicate handling
      const result = await this.saveDebouncer.performSave(saveData, saveFunction);
      console.log('[SingleUserEventManager] ‚úÖ Save successful, server response:', result);
      
      // Update version ‡πÅ‡∏•‡∏∞ state ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      const newVersion = result.newVersion || result.storyMap?.version || (this.state.serverVersion + 1);
      
      // ‚úÖ CRITICAL FIX: Update originalSnapshot BEFORE state update
      this.originalSnapshot = { 
        ...this.currentSnapshot,
        version: newVersion,
        timestamp: Date.now()
      };
      
      // ‚úÖ PROFESSIONAL: Update state with proper synchronization
      this.updateState({
        isSaving: false,
        lastSaved: new Date(),
        isDirty: false,
        hasUnsavedChanges: false,
        localVersion: newVersion,
        serverVersion: newVersion,
        lastError: undefined
      });

      // ‚úÖ ADOBE/FIGMA STYLE: Clear command history AFTER state update
      this.state.undoStack = [];
      this.state.redoStack = [];
      
      // ‚úÖ CRITICAL: Force state callback to update UI immediately
      this.config.onStateChange?.(this.state);
      this.config.onDirtyChange?.(false);

      // ‚úÖ ADOBE/FIGMA STYLE: Sync localStorage immediately after save success
      if (typeof window !== 'undefined') {
        const now = Date.now();
        localStorage.setItem('divwy-last-saved', now.toString());
        localStorage.setItem('divwy-has-unsaved-changes', 'false');
        localStorage.setItem('divwy-content-changes', 'false');
        localStorage.setItem('divwy-command-has-changes', 'false');
        localStorage.removeItem('divwy-last-change');
        localStorage.removeItem('divwy-last-content-change');
        
        // ‚úÖ PROFESSIONAL: Clear auto-save status for refresh protection
        localStorage.removeItem('divwy-auto-save-active');
        localStorage.setItem('divwy-last-auto-save', now.toString());
        
        console.log('[SingleUserEventManager] ‚úÖ localStorage synced - refresh protection cleared', {
          timestamp: now,
          clearFlags: ['content-changes', 'command-has-changes', 'last-change'],
          setFlags: ['last-saved', 'last-auto-save']
        });
      }

      console.log('[SingleUserEventManager] ‚úÖ Save completed - state synchronized');

      console.log('[SingleUserEventManager] ‚úÖ Manual save completed successfully with deduplication');

    } catch (error) {
      console.error('[SingleUserEventManager] ‚ùå Manual save failed:', error);
      
      const errorMessage = error instanceof Error ? error.message : 'Save failed';
      
      // üî• ADOBE/FIGMA STYLE: Handle duplicate save gracefully
      if (errorMessage === 'SAVE_IN_PROGRESS') {
        console.log('[SingleUserEventManager] ‚è≥ Save already in progress, user notified');
        this.updateState({ isSaving: false });
        return; // Don't throw for duplicate save attempts
      }
      
      if (errorMessage === 'DUPLICATE_DATA') {
        console.log('[SingleUserEventManager] üîÑ No changes to save');
        this.updateState({ isSaving: false });
        return; // Don't throw for no changes
      }
      
      this.updateState({ 
        isSaving: false,
        lastError: errorMessage
      });
      
      this.config.onError?.(error instanceof Error ? error : new Error('Save failed'), 'MANUAL_SAVE');
      throw error;
    }
  }

  initializeWithData(data: { nodes: any[]; edges: any[]; storyVariables: any[] }): void {
    const snapshot: SnapshotData = {
      ...data,
      timestamp: Date.now(),
      version: this.state.serverVersion
    };

    this.currentSnapshot = snapshot;
    this.originalSnapshot = { ...snapshot };
    
    this.updateState({
      isDirty: false,
      hasUnsavedChanges: false,
      localVersion: snapshot.version
    });

    this.config.onDirtyChange?.(false);
    
    console.log('[SingleUserEventManager] Initialized with data:', {
      nodeCount: data.nodes.length,
      edgeCount: data.edges.length,
      variableCount: data.storyVariables.length
    });
  }

  getState(): SingleUserState {
    return { ...this.state };
  }

  getCurrentSnapshot(): SnapshotData {
    return this.currentSnapshot;
  }

  getCommandContext(): CommandContext {
    return this.commandContext;
  }

  // üöÄ NEW: Set ReactFlow UI updater for bidirectional sync
  setReactFlowUpdater(updater: (nodes: any[], edges: any[]) => void): void {
    if (this.commandContext instanceof SingleUserCommandContext) {
      this.commandContext.setReactFlowUpdater(updater);
    }
  }

  hasChanges(): boolean {
    // ‚úÖ SIMPLE & ACCURATE: ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ content commands ‡πÉ‡∏ô undo stack ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const contentCommands = this.state.undoStack.filter(cmd => this.isContentCommand(cmd));
    const hasContentChanges = contentCommands.length > 0;
    
    // ‚úÖ PROFESSIONAL LOGGING: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
    console.log(`[SingleUserEventManager] üîç Simple change detection:`, {
      hasChanges: hasContentChanges,
      contentCommandsCount: contentCommands.length,
      totalCommandsCount: this.state.undoStack.length,
      contentCommandTypes: contentCommands.map(cmd => cmd.type),
      detectionMethod: 'content-commands-only'
    });
    
    return hasContentChanges;
  }

  // üî• FIGMA/CANVA STYLE: Force immediate UI sync method
  private forceUISync(): void {
    if (this.commandContext instanceof SingleUserCommandContext) {
      const snapshot = this.getCurrentSnapshot();
      console.log('[SingleUserEventManager] üîÑ Force UI sync:', {
        nodeCount: snapshot.nodes.length,
        edgeCount: snapshot.edges.length
      });
      
      // ‚úÖ CRITICAL FIX: Ensure reactFlowUpdater is called with updated references
      if (this.commandContext.updateReactFlowUI) {
        // Create new array references to force React re-render
        this.commandContext.updateReactFlowUI([...snapshot.nodes], [...snapshot.edges]);
      }
    }
  }

  // ‚úÖ PROFESSIONAL SOLUTION 1: ‡πÄ‡∏û‡∏¥‡πà‡∏° Dynamic Config Update
  updateConfig(newConfig: Partial<SingleUserConfig>): void {
    const oldAutoSaveEnabled = this.config.autoSaveEnabled;
    const oldInterval = this.config.autoSaveIntervalMs;
    
    // Update configuration
    this.config = { ...this.config, ...newConfig };
    
    // Handle auto-save timer changes dynamically
    if (newConfig.autoSaveEnabled !== undefined || newConfig.autoSaveIntervalMs !== undefined) {
      this.stopAutoSave(); // Stop existing timer
      
      if (this.config.autoSaveEnabled) {
        this.startAutoSave(); // Start with new config
        console.log('[SingleUserEventManager] ‚úÖ Auto-save restarted with new config:', {
          enabled: this.config.autoSaveEnabled,
          intervalMs: this.config.autoSaveIntervalMs
        });
      } else {
        console.log('[SingleUserEventManager] ‚èπÔ∏è Auto-save disabled');
      }
    }
  }

  private stopAutoSave(): void {
    if (this.autoSaveTimer) {
      clearInterval(this.autoSaveTimer);
      this.autoSaveTimer = undefined;
      console.log('[SingleUserEventManager] Auto-save timer stopped');
    }
  }

  destroy(): void {
    this.stopAutoSave();
    if (this.debounceTimer) {
      clearTimeout(this.debounceTimer);
    }
    console.log('[SingleUserEventManager] Destroyed');
  }

  // ===================================================================
  // Private Methods
  // ===================================================================

  private createInitialState(): SingleUserState {
    return {
      commandHistory: [],
      undoStack: [],
      redoStack: [],
      isSaving: false,
      lastSaved: null,
      isDirty: false,
      hasUnsavedChanges: false,
      localVersion: 1,
      serverVersion: 1,
      pendingCommands: 0,
      totalEvents: 0
    };
  }

  private createEmptySnapshot(): SnapshotData {
    return {
      nodes: [],
      edges: [],
      storyVariables: [],
      timestamp: Date.now(),
      version: 1
    };
  }

  private addToHistory(command: Command): void {
    // Add to undo stack
    this.state.undoStack.push(command);

    // Clear redo stack when new command is executed
    this.state.redoStack = [];

    // Limit history size
    if (this.state.undoStack.length > this.config.maxHistorySize) {
      this.state.undoStack = this.state.undoStack.slice(-this.config.maxHistorySize);
    }

    // Add to command history for tracking
    this.state.commandHistory.push(command);
    if (this.state.commandHistory.length > this.config.maxHistorySize) {
      this.state.commandHistory = this.state.commandHistory.slice(-this.config.maxHistorySize);
    }
  }

  private startAutoSave(): void {
    this.autoSaveTimer = setInterval(() => {
      if (this.state.isDirty && !this.state.isSaving) {
        // ‚úÖ ADOBE/FIGMA STYLE: Mark auto-save as active for refresh protection
        if (typeof window !== 'undefined') {
          localStorage.setItem('divwy-auto-save-active', 'true');
          localStorage.setItem('divwy-auto-save-started', Date.now().toString());
        }
        
        this.saveManual().then(() => {
          console.log('[SingleUserEventManager] ‚úÖ Auto-save completed successfully');
          
          // ‚úÖ PROFESSIONAL: Clear auto-save active flag after success
          if (typeof window !== 'undefined') {
            localStorage.removeItem('divwy-auto-save-active');
            localStorage.setItem('divwy-last-successful-auto-save', Date.now().toString());
            
            console.log('[SingleUserEventManager] üîÑ Auto-save cycle completed - refresh protection updated');
          }
        }).catch(error => {
          console.warn('[SingleUserEventManager] Auto-save failed:', error);
          
          // ‚úÖ PROFESSIONAL: Clear auto-save active flag even on failure
          if (typeof window !== 'undefined') {
            localStorage.removeItem('divwy-auto-save-active');
            localStorage.setItem('divwy-last-auto-save-error', Date.now().toString());
          }
        });
      }
    }, this.config.autoSaveIntervalMs);
  }

  // formatDataForAPI function ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡πÜ ‡πÅ‡∏ó‡∏ô

  updateSnapshot(snapshotData: SnapshotData): void {
    this.currentSnapshot = snapshotData;
    this.markAsDirty();
  }

  // Compatibility method for BlueprintTab
  updateSnapshotFromReactFlow(nodes: any[], edges: any[], storyVariables: any[]): void {
    const newSnapshot: SnapshotData = {
      nodes: [...nodes],
      edges: [...edges],
      storyVariables: [...storyVariables],
      timestamp: Date.now(),
      version: this.state.localVersion
    };

    // Professional change detection - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (Canva/Figma level)
    const hasChanges = this.detectPreciseChanges(this.currentSnapshot, newSnapshot);
    
    if (hasChanges.hasChanges) {
      this.currentSnapshot = newSnapshot;
      this.markAsDirty();
      
      // Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
      console.log('[SingleUserEventManager] Professional change detected:', {
        nodeChanges: hasChanges.nodeChanges,
        edgeChanges: hasChanges.edgeChanges,
        variableChanges: hasChanges.variableChanges,
        changeType: hasChanges.changeType,
        affectedItems: hasChanges.affectedItems.length
      });
      
      // Trigger state change notification with change details
      this.updateState({
        hasUnsavedChanges: true,
        totalEvents: this.state.totalEvents + 1
      });
    }
  }

  markAsDirty(): void {
    // ‚úÖ SIMPLE FIX: Mark as dirty ‡∏ï‡∏£‡∏á‡πÜ (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏≤‡∏Å content commands ‡πÅ‡∏•‡πâ‡∏ß)
    if (!this.state.isDirty) {
      this.updateState({
        isDirty: true,
        hasUnsavedChanges: true
      });
      this.config.onDirtyChange?.(true);
      console.log('[SingleUserEventManager] ‚úèÔ∏è Marked as dirty due to content change');
    }
  }

  markAsSaved(): void {
    this.updateState({
      isDirty: false,
      hasUnsavedChanges: false,
      lastSaved: new Date()
    });
    this.config.onDirtyChange?.(false);
  }

  notifyChange(changeType: string, data: any): void {
    if (process.env.NODE_ENV === 'development') {
      console.log(`[SingleUserEventManager] Change: ${changeType}`, data);
    }
  }

  private updateState(updates: Partial<SingleUserState>): void {
    this.state = { ...this.state, ...updates };
    
    // ‚úÖ CRITICAL FIX: Sync isDirty/hasUnsavedChanges with command-based detection
    const commandBasedHasChanges = this.hasChanges();
    if (this.state.isDirty !== commandBasedHasChanges || this.state.hasUnsavedChanges !== commandBasedHasChanges) {
      this.state.isDirty = commandBasedHasChanges;
      this.state.hasUnsavedChanges = commandBasedHasChanges;
      
      console.log('[SingleUserEventManager] üîÑ State sync - command-based override:', {
        commandBasedHasChanges,
        reason: 'Ensuring consistency between Save Button and Status Indicator'
      });
    }
    
    this.config.onStateChange?.(this.state);
  }

  // ===================================================================
  // Professional Change Detection (Canva/Figma Level Precision)
  // ===================================================================

  private detectPreciseChanges(oldSnapshot: SnapshotData, newSnapshot: SnapshotData): {
    hasChanges: boolean;
    nodeChanges: { added: number; removed: number; modified: number; moved: number };
    edgeChanges: { added: number; removed: number; modified: number };
    variableChanges: { added: number; removed: number; modified: number };
    changeType: 'creation' | 'deletion' | 'modification' | 'movement' | 'batch' | 'none';
    affectedItems: string[];
  } {
    const changes = {
      hasChanges: false,
      nodeChanges: { added: 0, removed: 0, modified: 0, moved: 0 },
      edgeChanges: { added: 0, removed: 0, modified: 0 },
      variableChanges: { added: 0, removed: 0, modified: 0 },
      changeType: 'none' as any,
      affectedItems: [] as string[]
    };

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Maps ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
    const oldNodes = new Map((oldSnapshot.nodes || []).map(n => [n.id, n]));
    const newNodes = new Map((newSnapshot.nodes || []).map(n => [n.id, n]));
    const oldEdges = new Map((oldSnapshot.edges || []).map(e => [e.id, e]));
    const newEdges = new Map((newSnapshot.edges || []).map(e => [e.id, e]));
    const oldVars = new Map((oldSnapshot.storyVariables || []).map(v => [v.variableId || v.id, v]));
    const newVars = new Map((newSnapshot.storyVariables || []).map(v => [v.variableId || v.id, v]));

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á Nodes
    for (const [nodeId, newNode] of newNodes) {
      if (!oldNodes.has(nodeId)) {
        changes.nodeChanges.added++;
        changes.affectedItems.push(`node:${nodeId}:added`);
      } else {
        const oldNode = oldNodes.get(nodeId)!;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (Position changes)
        if (this.hasPositionChanged(oldNode.position, newNode.position)) {
          changes.nodeChanges.moved++;
          changes.affectedItems.push(`node:${nodeId}:moved`);
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data changes)
        if (this.hasNodeDataChanged(oldNode, newNode)) {
          changes.nodeChanges.modified++;
          changes.affectedItems.push(`node:${nodeId}:modified`);
        }
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Nodes ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
    for (const nodeId of oldNodes.keys()) {
      if (!newNodes.has(nodeId)) {
        changes.nodeChanges.removed++;
        changes.affectedItems.push(`node:${nodeId}:deleted`);
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á Edges
    for (const [edgeId, newEdge] of newEdges) {
      if (!oldEdges.has(edgeId)) {
        changes.edgeChanges.added++;
        changes.affectedItems.push(`edge:${edgeId}:added`);
      } else {
        const oldEdge = oldEdges.get(edgeId)!;
        if (this.hasEdgeDataChanged(oldEdge, newEdge)) {
          changes.edgeChanges.modified++;
          changes.affectedItems.push(`edge:${edgeId}:modified`);
        }
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Edges ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
    for (const edgeId of oldEdges.keys()) {
      if (!newEdges.has(edgeId)) {
        changes.edgeChanges.removed++;
        changes.affectedItems.push(`edge:${edgeId}:deleted`);
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á Variables
    for (const [varId, newVar] of newVars) {
      if (!oldVars.has(varId)) {
        changes.variableChanges.added++;
        changes.affectedItems.push(`var:${varId}:added`);
      } else {
        const oldVar = oldVars.get(varId)!;
        if (this.hasVariableDataChanged(oldVar, newVar)) {
          changes.variableChanges.modified++;
          changes.affectedItems.push(`var:${varId}:modified`);
        }
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Variables ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
    for (const varId of oldVars.keys()) {
      if (!newVars.has(varId)) {
        changes.variableChanges.removed++;
        changes.affectedItems.push(`var:${varId}:deleted`);
      }
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const totalChanges = 
      changes.nodeChanges.added + changes.nodeChanges.removed + changes.nodeChanges.modified + changes.nodeChanges.moved +
      changes.edgeChanges.added + changes.edgeChanges.removed + changes.edgeChanges.modified +
      changes.variableChanges.added + changes.variableChanges.removed + changes.variableChanges.modified;

    changes.hasChanges = totalChanges > 0;

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    if (totalChanges === 0) {
      changes.changeType = 'none';
    } else if (totalChanges === 1) {
      if (changes.nodeChanges.added > 0 || changes.edgeChanges.added > 0 || changes.variableChanges.added > 0) {
        changes.changeType = 'creation';
      } else if (changes.nodeChanges.removed > 0 || changes.edgeChanges.removed > 0 || changes.variableChanges.removed > 0) {
        changes.changeType = 'deletion';
      } else if (changes.nodeChanges.moved > 0) {
        changes.changeType = 'movement';
      } else {
        changes.changeType = 'modification';
      }
    } else {
      changes.changeType = 'batch';
    }

    return changes;
  }

  // Helper methods ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  private hasPositionChanged(oldPos: any, newPos: any): boolean {
    if (!oldPos && !newPos) return false;
    if (!oldPos || !newPos) return true;
    
    const threshold = 1; // pixel threshold ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    return Math.abs((oldPos.x || 0) - (newPos.x || 0)) > threshold || 
           Math.abs((oldPos.y || 0) - (newPos.y || 0)) > threshold;
  }

  private hasNodeDataChanged(oldNode: any, newNode: any): boolean {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const importantFields = ['type', 'data', 'style'];
    
    for (const field of importantFields) {
      if (JSON.stringify(oldNode[field]) !== JSON.stringify(newNode[field])) {
        return true;
      }
    }
    return false;
  }

  private hasEdgeDataChanged(oldEdge: any, newEdge: any): boolean {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á edge
    const importantFields = ['source', 'target', 'sourceHandle', 'targetHandle', 'data', 'style', 'label'];
    
    for (const field of importantFields) {
      if (JSON.stringify(oldEdge[field]) !== JSON.stringify(newEdge[field])) {
        return true;
      }
    }
    return false;
  }

  private hasVariableDataChanged(oldVar: any, newVar: any): boolean {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á variable
    const importantFields = ['variableName', 'dataType', 'initialValue', 'description'];
    
    for (const field of importantFields) {
      if (oldVar[field] !== newVar[field]) {
        return true;
      }
    }
    return false;
  }
}

// ===================================================================
// Save Deduplication Class (Adobe/Figma/Canva Style)
// ===================================================================

class SaveDebouncer {
  private lastSaveHash: string = '';
  private saving: boolean = false;
  
  async performSave(data: any, saveFunction: (data: any) => Promise<any>): Promise<any> {
    // Generate hash of current data
    const currentHash = this.generateDataHash(data);
    
    // üî• ADOBE/FIGMA STYLE: Prevent duplicate saves with better error handling
    if (this.saving) {
      console.log('[SaveDebouncer] ‚è≥ Save already in progress, skipping duplicate request');
      throw new Error('SAVE_IN_PROGRESS');
    }
    
    if (currentHash === this.lastSaveHash) {
      console.log('[SaveDebouncer] üîÑ Identical data detected, skipping duplicate save');
      throw new Error('DUPLICATE_DATA');
    }
    
    this.saving = true;
    console.log('[SaveDebouncer] üöÄ Starting save operation...');
    
    try {
      // Perform actual save
      const result = await saveFunction(data);
      this.lastSaveHash = currentHash;
      console.log('[SaveDebouncer] ‚úÖ Save completed successfully');
      return result;
    } catch (error) {
      console.error('[SaveDebouncer] ‚ùå Save failed:', error);
      // Reset hash on failure to allow retry
      if (this.lastSaveHash === currentHash) {
        this.lastSaveHash = '';
      }
      throw error;
    } finally {
      this.saving = false;
    }
  }
  
  private generateDataHash(data: any): string {
    try {
      return btoa(JSON.stringify({
        nodeCount: data.nodes?.length || 0,
        edgeCount: data.edges?.length || 0,
        nodePositions: data.nodes?.map((n: any) => `${n.id}:${n.position?.x || 0},${n.position?.y || 0}`).join('|') || '',
        edgeConnections: data.edges?.map((e: any) => `${e.source}->${e.target}`).join('|') || '',
        storyVariableCount: data.storyVariables?.length || 0,
        timestamp: Math.floor(Date.now() / 1000) // Round to seconds to allow minor timing differences
      }));
    } catch (error) {
      console.warn('[SaveDebouncer] Hash generation failed, using fallback:', error);
      return `fallback_${Date.now()}_${Math.random()}`;
    }
  }
  
  reset(): void {
    this.lastSaveHash = '';
    this.saving = false;
  }
  
  isSaving(): boolean {
    return this.saving;
  }
}

// ===================================================================
// Factory Function
// ===================================================================

export function createSingleUserEventManager(config: SingleUserConfig): SingleUserEventManager {
  return new SingleUserEventManager(config);
}

export default SingleUserEventManager;
