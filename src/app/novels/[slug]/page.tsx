// src/app/novels/[slug]/page.tsx
// Dynamic Route Page ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
'use server'; // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Server Component

import { Metadata, ResolvingMetadata } from "next";
import { notFound } from "next/navigation";
// PopulatedNovelForDetailPage ‡∏ï‡πâ‡∏≠‡∏á export ‡∏à‡∏≤‡∏Å API route ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÑ‡∏ü‡∏•‡πå shared types
// ‡∏´‡∏≤‡∏Å API route file ‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠, path ‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
import { PopulatedNovelForDetailPage } from "@/app/api/novels/[slug]/route";
import { NovelHeader } from "@/components/novels/NovelHeader";
import { NovelTabs } from "@/components/novels/NovelTabs";
// import { NovelCharactersSection } from "@/components/novels/NovelCharactersSection";

// --- Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Props ---
interface NovelPageProps {
  params: { slug: string };
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ---
async function getNovelData(slug: string): Promise<PopulatedNovelForDetailPage | null> {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ slug ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà
  if (typeof slug !== 'string' || !slug.trim()) {
    console.warn(`‚ö†Ô∏è [page.tsx getNovelData] Invalid slug provided: "${slug}"`);
    return null;
  }

  let baseUrl = process.env.NEXT_PUBLIC_API_URL;
  if (!baseUrl) {
    if (process.env.VERCEL_URL) {
      baseUrl = `https://${process.env.VERCEL_URL}`;
    } else {
      // NEXT_PUBLIC_BASE_URL ‡∏°‡∏±‡∏Å‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö client-side, ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö server-side fetch, localhost ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000";
    }
  }
  const apiUrl = `${baseUrl}/api/novels/${encodeURIComponent(slug)}`;
  console.log(`üìÑ [page.tsx getNovelData] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}" ‡∏à‡∏≤‡∏Å: ${apiUrl}`);

  try {
    const res = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        // ‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏° 'Accept': 'application/json' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
      },
      // cache: 'no-store', // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏°‡∏≠ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
      next: { revalidate: 60 } // Revalidate ‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (ISR)
    });

    if (res.status === 404) {
      console.warn(`‚ö†Ô∏è [page.tsx getNovelData] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}" (404 ‡∏à‡∏≤‡∏Å API: ${apiUrl})`);
      return null; // ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ notFound() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    }

    if (!res.ok) {
      let errorBody = "Could not read error body";
      try {
        errorBody = await res.text();
      } catch (e) { /* ignore */ }
      console.error(`‚ùå [page.tsx getNovelData] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å ${apiUrl}: ${res.status} ${res.statusText}. Body: ${errorBody}`);
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Error object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ error boundary (error.tsx) ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ
      // ‡∏Å‡∏≤‡∏£ throw error ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡πÇ‡∏î‡∏¢ Next.js error handling
      const error = new Error(`API request failed: ${res.status} ${res.statusText}. URL: ${apiUrl}. Details: ${errorBody}`);
      (error as any).status = res.status;
      throw error;
    }

    const data = await res.json();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á data ‡∏ó‡∏µ‡πà API ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    if (!data || !data.novel) {
      console.warn(`‚ö†Ô∏è [page.tsx getNovelData] API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö data.novel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}" ‡∏à‡∏≤‡∏Å: ${apiUrl}. Response:`, data);
      return null; // ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ notFound() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    }

    console.log(`‚úÖ [page.tsx getNovelData] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: "${data.novel.title}"`);
    return data.novel as PopulatedNovelForDetailPage;
  } catch (error: any) {
    // Log error ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô network error, JSON parse error, ‡∏´‡∏£‡∏∑‡∏≠ error ‡∏ó‡∏µ‡πà throw ‡∏à‡∏≤‡∏Å !res.ok
    console.error(`‚ùå [page.tsx getNovelData] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}" ‡∏à‡∏≤‡∏Å ${apiUrl}:`, error.message, error.stack);

    // ‡∏ñ‡πâ‡∏≤ error ‡∏°‡∏µ status (‡πÄ‡∏ä‡πà‡∏ô ‡∏°‡∏≤‡∏à‡∏≤‡∏Å !res.ok) ‡πÉ‡∏´‡πâ re-throw ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ error.tsx ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    if (error.status) {
        throw error;
    }
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö network errors ‡∏´‡∏£‡∏∑‡∏≠ JSON parsing errors ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ status, ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô null ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ notFound() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    return null;
  }
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Generate Metadata (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SEO ‡πÅ‡∏•‡∏∞ Social Sharing) ---
export async function generateMetadata(
  { params }: NovelPageProps,
  parent: ResolvingMetadata
): Promise<Metadata> {
  const { slug } = params; // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á slug ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  if (typeof slug !== 'string' || !slug.trim()) {
    console.warn(`‚ö†Ô∏è [generateMetadata] Invalid slug for metadata: "${slug}"`);
    return {
      title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - NovelMaze",
      description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å slug ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
    };
  }
  const novel = await getNovelData(slug);

  if (!novel) {
    return {
      title: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ - NovelMaze",
      description: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (slug: ${slug})`,
    };
  }

  const siteName = (await parent).openGraph?.siteName || process.env.NEXT_PUBLIC_SITE_NAME || "NovelMaze";
  const pageTitle = `${novel.title} - ‡πÇ‡∏î‡∏¢ ${novel.author?.profile?.penName || novel.author?.profile?.displayName || novel.author?.username || '‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô'} | ${siteName}`;
  const description = novel.synopsis
    ? novel.synopsis.substring(0, 160) + (novel.synopsis.length > 160 ? "..." : "")
    : `‡∏≠‡πà‡∏≤‡∏ô‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ${novel.title} ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏î‡∏¢ ${novel.author?.profile?.penName || novel.author?.profile?.displayName || novel.author?.username || ''} ‡∏ö‡∏ô‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° ${siteName} ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° Visual Novel ‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß`;

  let imageUrl = novel.coverImageUrl;
  // ‡πÉ‡∏ä‡πâ NEXT_PUBLIC_BASE_URL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á absolute URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const baseUrlForImage = process.env.NEXT_PUBLIC_BASE_URL || (process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : 'http://localhost:3000');

  if (imageUrl && !imageUrl.startsWith('http') && !imageUrl.startsWith('data:')) {
    imageUrl = `${baseUrlForImage}${imageUrl.startsWith('/') ? '' : '/'}${imageUrl}`;
  } else if (!imageUrl) {
    // ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ default opengraph image ‡πÉ‡∏ô public folder
    imageUrl = `${baseUrlForImage}/default-og-image.png`;
  }


  const publishedTime = novel.firstPublishedAt ? new Date(novel.firstPublishedAt).toISOString() : undefined;
  const modifiedTime = novel.lastContentUpdatedAt ? new Date(novel.lastContentUpdatedAt).toISOString() : (novel.updatedAt ? new Date(novel.updatedAt).toISOString() : undefined);

  const keywordsSet = new Set<string>();
  novel.customTags?.forEach((tag: string) => keywordsSet.add(tag));
  if (novel.mainThemeCategory?.name) keywordsSet.add(novel.mainThemeCategory.name);
  novel.subThemeCategories?.forEach(st => { if (st.name) keywordsSet.add(st.name); });
  novel.moodAndToneCategories?.forEach(mt => { if (mt.name) keywordsSet.add(mt.name); });


  return {
    metadataBase: new URL(baseUrlForImage), // ‡πÄ‡∏û‡∏¥‡πà‡∏° metadataBase
    title: pageTitle,
    description: description,
    keywords: Array.from(keywordsSet),
    authors: [{ name: novel.author?.profile?.penName || novel.author?.profile?.displayName || novel.author?.username || "NovelMaze Author" }],
    alternates: {
      canonical: `/novels/${novel.slug}`,
    },
    openGraph: {
      title: pageTitle,
      description: description,
      url: `/novels/${novel.slug}`, // ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô absolute URL ‡∏´‡∏£‡∏∑‡∏≠ Next.js ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ metadataBase
      siteName: siteName,
      images: imageUrl ? [{
          url: imageUrl, // ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô absolute URL
          width: 1200,
          height: 630,
          alt: `‡∏õ‡∏Å‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${novel.title}`,
        }] : [],
      locale: novel.languageCategory?.slug?.startsWith('th') ? "th_TH" : "en_US", // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á logic ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å locale
      type: "article", // ‡∏´‡∏£‡∏∑‡∏≠ "book"
      tags: novel.customTags || [],
      publishedTime: publishedTime,
      modifiedTime: modifiedTime,
      section: novel.mainThemeCategory?.name,
      authors: novel.author?.profile?.penName ? [novel.author.profile.penName] : (novel.author?.profile?.displayName ? [novel.author.profile.displayName] : undefined),
    },
    twitter: {
      card: "summary_large_image",
      title: pageTitle,
      description: description,
      images: imageUrl ? [{ url: imageUrl, alt: `‡∏õ‡∏Å‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${novel.title}` }] : [],
      // site: "@YourTwitterHandle",
      // creator: novel.author?.twitterHandle ? novel.author.twitterHandle : undefined,
    },
  };
}

// --- Server Component ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ ---
export default async function NovelPage({ params }: NovelPageProps) {
  const { slug } = params;
  const novel = await getNovelData(slug);

  if (!novel) {
    console.log(`[NovelPage] Novel data for slug "${slug}" is null, calling notFound().`);
    notFound();
  }

  return (
    <div className="novel-detail-page container-custom mx-auto px-2 sm:px-4 py-6 md:py-8">
      <NovelHeader novel={novel} />
      <NovelTabs novel={novel} />
      {/*
        {novel.charactersList && novel.charactersList.length > 0 && (
          <NovelCharactersSection characters={novel.charactersList} />
        )}
      */}
    </div>
  );
}