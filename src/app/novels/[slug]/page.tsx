// src/app/novels/[slug]/page.tsx
// Dynamic Route Page ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
import { Metadata, ResolvingMetadata } from "next";
import { notFound } from "next/navigation";
import { PopulatedNovelForDetailPage } from "@/app/api/novels/[slug]/route";
import { NovelHeader } from "@/components/novels/NovelHeader";
import { NovelTabs } from "@/components/novels/NovelTabs";

// --- Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Props ---
interface NovelPageProps {
  params: Promise<{ slug: string }>; // Explicitly type params as a Promise
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ---
async function getNovelData(slug: string): Promise<PopulatedNovelForDetailPage | null> {
  // ‡πÉ‡∏ä‡πâ URL ‡πÄ‡∏ï‡πá‡∏° ‡∏´‡∏£‡∏∑‡∏≠ NEXT_PUBLIC_API_URL ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
  const apiUrl = `${
    process.env.NEXT_PUBLIC_API_URL || process.env.VERCEL_URL || "http://localhost:3000"
  }/api/novels/${slug}`;
  console.log(`üìÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}" ‡∏à‡∏≤‡∏Å: ${apiUrl}`);

  try {
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ revalidate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÜ
    const res = await fetch(apiUrl, { next: { revalidate: 60 } });

    if (res.status === 404) {
      console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}" (404)`);
      return null;
    }

    if (!res.ok) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${res.status} ${res.statusText}`);
    }

    const data = await res.json();
    console.log(`‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: "${data.novel.title}"`);
    return data.novel as PopulatedNovelForDetailPage;
  } catch (error: any) {
    console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}":`, error.message);
    return null;
  }
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Generate Metadata (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SEO ‡πÅ‡∏•‡∏∞ Social Sharing) ---
export async function generateMetadata(
  { params }: NovelPageProps,
  parent: ResolvingMetadata
): Promise<Metadata> {
  // ‡∏£‡∏≠ params ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ slug ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  const { slug } = await params; // Await params to resolve slug
  const novel = await getNovelData(slug);

  if (!novel) {
    return {
      title: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢",
      description: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug: ${slug}`,
    };
  }

  const title = `${novel.title} - NovelMaze`;
  const description =
    novel.description.substring(0, 160) + (novel.description.length > 160 ? "..." : "");
  const imageUrl = novel.coverImage || "/opengraph-image.png";

  // ‡πÅ‡∏õ‡∏•‡∏á firstPublishedAt ‡πÅ‡∏•‡∏∞ updatedAt ‡πÄ‡∏õ‡πá‡∏ô Date ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string
  const firstPublishedAt = novel.firstPublishedAt
    ? typeof novel.firstPublishedAt === "string"
      ? new Date(novel.firstPublishedAt)
      : novel.firstPublishedAt
    : undefined;
  const updatedAt = novel.updatedAt
    ? typeof novel.updatedAt === "string"
      ? new Date(novel.updatedAt)
      : novel.updatedAt
    : undefined;

  return {
    title,
    description,
    openGraph: {
      title,
      description,
      url: `/novels/${novel.slug}`,
      siteName: "NovelMaze",
      images: [
        {
          url: imageUrl,
          width: 1200,
          height: 630,
          alt: `‡∏õ‡∏Å‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ${novel.title}`,
        },
      ],
      locale: "th_TH",
      type: "article",
      tags: novel.tags,
      authors: [
        novel.author?.profile?.displayName || novel.author?.username || "NovelMaze Author",
      ],
      publishedTime: firstPublishedAt?.toISOString(),
      modifiedTime: updatedAt?.toISOString(),
    },
    twitter: {
      card: "summary_large_image",
      title,
      description,
      images: [{ url: imageUrl, alt: `‡∏õ‡∏Å‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ${novel.title}` }],
    },
    keywords: novel.tags,
  };
}

// --- Server Component ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ ---
export default async function NovelPage({ params }: NovelPageProps) {
  const { slug } = await params; // Await params to resolve slug
  const novel = await getNovelData(slug);

  // ‡∏ñ‡πâ‡∏≤ getNovelData ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error)
  if (!novel) {
    notFound();
  }

  return (
    <div className="novel-detail-page">
      {/* ‡∏™‡πà‡∏ß‡∏ô Header (Hero) */}
      <NovelHeader novel={novel} />

      {/* ‡∏™‡πà‡∏ß‡∏ô Tabs ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ */}
      <NovelTabs novel={novel} />
    </div>
  );
}