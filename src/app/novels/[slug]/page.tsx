// src/app/novels/[slug]/page.tsx
'use server'; // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Server Component

import { Metadata, ResolvingMetadata } from "next";
import { notFound } from "next/navigation";
import { PopulatedNovelForDetailPage } from "@/app/api/novels/[slug]/route"; // Import type ‡∏à‡∏≤‡∏Å API route
import NovelHeader from "@/components/novels/NovelHeader"; // Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
import NovelTabs from "@/components/novels/NovelTabs"; // Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Tabs ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
// NovelCharactersTab ‡∏ñ‡∏π‡∏Å render ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô NovelTabs ‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á import ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö props ‡∏Ç‡∏≠‡∏á page component
interface NovelPageProps {
  params: { slug: string }; // params ‡∏ó‡∏µ‡πà Next.js ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏´‡πâ, ‡∏°‡∏µ slug ‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏à‡∏≤‡∏Å API
async function getNovelData(slug: string): Promise<PopulatedNovelForDetailPage | null> {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á slug ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
  if (typeof slug !== 'string' || !slug.trim()) {
    console.warn(`‚ö†Ô∏è [page.tsx getNovelData] Invalid slug provided: "${slug}"`);
    return null; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null ‡∏ñ‡πâ‡∏≤ slug ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  }

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Base URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Endpoint
  // Logic ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î Base URL ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á local development, Vercel, ‡πÅ‡∏•‡∏∞ self-hosted
  let baseUrl = process.env.NEXT_PUBLIC_API_URL; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å environment variable ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  if (!baseUrl) {
    if (process.env.VERCEL_URL) { // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Vercel deployment
      baseUrl = `https://${process.env.VERCEL_URL}`;
    } else if (process.env.NODE_ENV === 'development') { // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö local development
      baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000";
    } else { // Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÄ‡∏ä‡πà‡∏ô self-hosted)
      baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "";
      if (!baseUrl) { // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ log error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ API call ‡∏à‡∏∞ fail
        console.error("‚ùå CRITICAL: NEXT_PUBLIC_BASE_URL is not set for production API calls.");
        return null; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÑ‡∏õ‡∏¢‡∏±‡∏á URL ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      }
    }
  }
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡πÄ‡∏ï‡πá‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API endpoint
  const apiUrl = `${baseUrl}/api/novels/${encodeURIComponent(slug.trim())}`;
  console.log(`üìÑ [page.tsx getNovelData] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}" ‡∏à‡∏≤‡∏Å: ${apiUrl}`);

  try {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ fetch
    const res = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      // cache: 'no-store', // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development: ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏°‡∏≠ (‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡πÉ‡∏ä‡πâ revalidate ‡πÅ‡∏ó‡∏ô)
      next: { revalidate: 60 } // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production: Revalidate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡πÜ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (ISR)
    });

    // ‡∏ñ‡πâ‡∏≤ API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ 404 (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢)
    if (res.status === 404) {
      console.warn(`‚ö†Ô∏è [page.tsx getNovelData] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}" (404 ‡∏à‡∏≤‡∏Å API: ${apiUrl})`);
      return null; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ page component ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å notFound()
    }

    // ‡∏ñ‡πâ‡∏≤ API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ status ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà success (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 2xx)
    if (!res.ok) {
      let errorBody = "Could not read error body"; // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° fallback ‡∏´‡∏≤‡∏Å‡∏≠‡πà‡∏≤‡∏ô error body ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      try {
        errorBody = await res.text(); // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô error body ‡∏à‡∏≤‡∏Å response
      } catch (e) { /* ignore error parsing body */ }
      console.error(`‚ùå [page.tsx getNovelData] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å ${apiUrl}: ${res.status} ${res.statusText}. Body: ${errorBody}`);
      return null; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null, ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å notFound() ‡πÉ‡∏ô page component
    }

    // ‡πÅ‡∏õ‡∏•‡∏á JSON response ‡πÄ‡∏õ‡πá‡∏ô object
    const data = await res.json();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• novel ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (!data || !data.novel) {
      console.warn(`‚ö†Ô∏è [page.tsx getNovelData] API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö data.novel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}" ‡∏à‡∏≤‡∏Å: ${apiUrl}. Response:`, JSON.stringify(data).substring(0, 500));
      return null; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null
    }

    console.log(`‚úÖ [page.tsx getNovelData] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: "${data.novel.title}" (ID: ${data.novel._id})`);
    return data.novel as PopulatedNovelForDetailPage; // ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ

  } catch (error: any) {
    console.error(`‚ùå [page.tsx getNovelData] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}" ‡∏à‡∏≤‡∏Å ${apiUrl}:`, error.message, error.stack ? error.stack.substring(0,500) : '');
    return null; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î exception (‡πÄ‡∏ä‡πà‡∏ô network error)
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Metadata ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ (SEO ‡πÅ‡∏•‡∏∞ Social Sharing)
export async function generateMetadata(
  { params }: NovelPageProps,
  parent: ResolvingMetadata // parent metadata ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å resolve ‡∏°‡∏≤‡∏à‡∏≤‡∏Å layout ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
): Promise<Metadata> {
  const slug = params.slug; // ‡∏î‡∏∂‡∏á slug ‡∏à‡∏≤‡∏Å params (await ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö object property)
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö slug ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  if (typeof slug !== 'string' || !slug.trim()) {
    console.warn(`‚ö†Ô∏è [generateMetadata] Invalid slug for metadata: "${slug}"`);
    return {
      title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - NovelMaze",
      description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å slug ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
      robots: { index: false, follow: false } // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ search engine index ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
    };
  }
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
  const novel = await getNovelData(slug.trim());

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ return metadata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ "Not Found"
  if (!novel) {
    return {
      title: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ - NovelMaze",
      description: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (slug: ${slug})`,
      robots: { index: false, follow: false } // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SEO ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ index ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
    };
  }

  // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏à‡∏≤‡∏Å parent metadata ‡∏´‡∏£‡∏∑‡∏≠ environment variable ‡∏´‡∏£‡∏∑‡∏≠ fallback
  const siteName = (await parent).openGraph?.siteName || process.env.NEXT_PUBLIC_SITE_NAME || "NovelMaze";
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
  const authorName = novel.author?.profile?.penName || novel.author?.profile?.displayName || novel.author?.username || '‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ô‡∏¥‡∏£‡∏ô‡∏≤‡∏°';
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Title ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
  const pageTitle = `${novel.title} - ‡πÇ‡∏î‡∏¢ ${authorName} | ${siteName}`;
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Description ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
  const description = novel.synopsis
    ? novel.synopsis.substring(0, 160).trim() + (novel.synopsis.length > 160 ? "..." : "") // ‡∏ï‡∏±‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 160 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    : `‡∏≠‡πà‡∏≤‡∏ô‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ "${novel.title}" ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏î‡∏¢ ${authorName} ‡∏ö‡∏ô ${siteName} ‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° Visual Novel ‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß`;

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Base URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Open Graph ‡πÅ‡∏•‡∏∞ Twitter Card)
  let baseUrlForImage = process.env.NEXT_PUBLIC_BASE_URL;
  if (!baseUrlForImage) {
    baseUrlForImage = process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : 'http://localhost:3000'; // Default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö local
  }
  
  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏Å
  let imageUrl = novel.coverImageUrl;
  if (imageUrl && !imageUrl.startsWith('http') && !imageUrl.startsWith('data:')) { // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô relative path
    imageUrl = `${baseUrlForImage}${imageUrl.startsWith('/') ? '' : '/'}${imageUrl}`; // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô absolute path
  } else if (!imageUrl) { // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏õ‡∏Å ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ default
    imageUrl = `${baseUrlForImage}/images/default-og-image.png`; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô public/images
  }

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô ISO string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Open Graph
  const publishedTime = novel.publishedAt ? new Date(novel.publishedAt).toISOString() : undefined;
  const modifiedTime = novel.lastContentUpdatedAt ? new Date(novel.lastContentUpdatedAt).toISOString() : (novel.updatedAt ? new Date(novel.updatedAt).toISOString() : undefined);

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Keywords
  const keywordsSet = new Set<string>();
  novel.themeAssignment?.customTags?.forEach((tag: string) => keywordsSet.add(tag.trim()));
  if (novel.themeAssignment?.mainTheme?.categoryId?.name) keywordsSet.add(novel.themeAssignment.mainTheme.categoryId.name.trim());
  novel.themeAssignment?.subThemes?.forEach((st) => { if (st?.categoryId?.name) keywordsSet.add(st.categoryId.name.trim()); });
  novel.themeAssignment?.moodAndTone?.forEach((mt) => { if (mt?.name) keywordsSet.add(mt.name.trim()); });
  if (novel.language?.name) keywordsSet.add(novel.language.name.trim());
  keywordsSet.add("visual novel");
  keywordsSet.add("‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢");
  keywordsSet.add(authorName); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô keyword
  keywordsSet.add(novel.title); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô keyword


  // Return Metadata object
  return {
    metadataBase: new URL(baseUrlForImage), // **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å:** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ Next.js resolve relative image URLs ‡πÉ‡∏ô OpenGraph
    title: pageTitle,
    description: description,
    keywords: Array.from(keywordsSet).filter(Boolean), // ‡πÅ‡∏õ‡∏•‡∏á Set ‡πÄ‡∏õ‡πá‡∏ô Array ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    authors: [{ name: authorName, url: novel.author?.username ? `${baseUrlForImage}/u/${novel.author.username}` : undefined }], // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
    alternates: {
      canonical: `/novels/${novel.slug}`, // URL ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
    },
    openGraph: {
      title: pageTitle,
      description: description,
      url: `${baseUrlForImage}/novels/${novel.slug}`, // URL ‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ (Absolute URL)
      siteName: siteName,
      images: imageUrl ? [{ // ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Open Graph
          url: imageUrl, // Next.js ‡∏à‡∏∞ resolve path ‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ metadataBase ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô relative
          width: 1200,
          height: 630,
          alt: `‡∏õ‡∏Å‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${novel.title}`,
        }] : [],
      locale: novel.language?.slug?.startsWith('th') ? "th_TH" : (novel.language?.slug?.startsWith('en') ? "en_US" : undefined), // Locale ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
      type: "article", // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (article ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢)
      tags: novel.themeAssignment?.customTags || [], // Tags ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
      publishedTime: publishedTime, // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà
      modifiedTime: modifiedTime, // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      section: novel.themeAssignment?.mainTheme?.categoryId?.name, // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô "Fantasy"
      authors: novel.author?.username ? [`${baseUrlForImage}/u/${novel.author.username}`] : [authorName], // Link ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
    },
    twitter: { // Metadata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Twitter Card
      card: "summary_large_image", // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Card
      title: pageTitle,
      description: description,
      images: imageUrl ? [{ url: imageUrl, alt: `‡∏õ‡∏Å‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${novel.title}` }] : [],
      // site: "@YourTwitterHandle", // (Optional) Twitter Handle ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
      // creator: novel.author?.twitterHandle ? `@${novel.author.twitterHandle}` : undefined, // (Optional) Twitter Handle ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
    },
  };
}

// Page Component ‡∏´‡∏•‡∏±‡∏Å
export default async function NovelPage({ params }: NovelPageProps) {
  const slug = params.slug; // ‡∏î‡∏∂‡∏á slug ‡∏à‡∏≤‡∏Å params (await ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö object property)
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö slug ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô fetch (‡∏≠‡∏≤‡∏à‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö getNovelData ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ)
  if (typeof slug !== 'string' || !slug.trim()) {
      console.warn(`[NovelPage] Invalid slug detected: "${slug}". Calling notFound().`);
      notFound(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å notFound() ‡∏ñ‡πâ‡∏≤ slug ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  }
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
  const novel = await getNovelData(slug.trim());

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ (getNovelData ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null)
  if (!novel) {
    console.log(`[NovelPage] Novel data for slug "${slug}" is null after getNovelData. Calling notFound().`);
    notFound(); // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Not Found UI (‡∏™‡∏£‡πâ‡∏≤‡∏á not-found.tsx ‡πÉ‡∏ô app directory)
  }

  // Render ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
  return (
    <div className="novel-detail-page-container bg-background text-foreground min-h-screen">
      {/* NovelHeader ‡πÄ‡∏õ‡πá‡∏ô Server Component ‡∏ñ‡πâ‡∏≤ novel ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô prop ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á */}
      <NovelHeader novel={novel} />
      <main className="container-custom mx-auto px-2 sm:px-4 py-6 md:py-8">
        {/* NovelTabs ‡πÄ‡∏õ‡πá‡∏ô Client Component ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ useState ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô */}
        <NovelTabs novel={novel} />
      </main>
    </div>
  );
}