// src/app/novels/[slug]/page.tsx
'use server'; // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Server Component

import { Metadata, ResolvingMetadata } from "next";
import { notFound } from "next/navigation";
import { PopulatedNovelForDetailPage } from "@/app/api/novels/[slug]/route";
import NovelHeader from "@/components/novels/NovelHeader";
import NovelTabs from "@/components/novels/NovelTabs";

interface NovelPageProps {
  params: Promise<{ slug: string }>; // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ params ‡πÄ‡∏õ‡πá‡∏ô Promise ‡∏ï‡∏≤‡∏° Next.js App Router 2025
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏à‡∏≤‡∏Å API ‡∏ï‡∏≤‡∏° slug
 * @param slug Slug ‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
 * @returns Promise<PopulatedNovelForDetailPage | null> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠ null ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö
 */
async function getNovelData(slug: string): Promise<PopulatedNovelForDetailPage | null> {
  if (typeof slug !== 'string' || !slug.trim()) {
    console.warn(`‚ö†Ô∏è [page.tsx getNovelData] Slug ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: "${slug}"`);
    return null;
  }

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î base URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
  let baseUrl = process.env.NEXT_PUBLIC_API_URL;
  if (!baseUrl) {
    if (process.env.VERCEL_URL) {
      baseUrl = `https://${process.env.VERCEL_URL}`;
    } else if (process.env.NODE_ENV === 'development') {
      baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000";
    } else {
      baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "";
      if (!baseUrl) {
        console.error("‚ùå [page.tsx getNovelData] NEXT_PUBLIC_BASE_URL ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production");
        return null;
      }
    }
  }

  const apiUrl = `${baseUrl}/api/novels/${encodeURIComponent(slug.trim())}`;
  console.log(`üì° [page.tsx getNovelData] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}": ${apiUrl}`);

  try {
    const res = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      next: { revalidate: 60 } // Revalidate ‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏ô production
    });

    if (res.status === 404) {
      console.warn(`‚ö†Ô∏è [page.tsx getNovelData] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}" (404 ‡∏à‡∏≤‡∏Å API)`);
      return null;
    }

    if (!res.ok) {
      let errorBody = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô error body ‡πÑ‡∏î‡πâ";
      try {
        errorBody = await res.text();
      } catch (e) { /* ‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô */ }
      console.error(`‚ùå [page.tsx getNovelData] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ${apiUrl}: ${res.status} ${res.statusText}. Body: ${errorBody}`);
      return null;
    }

    const data = await res.json();

    if (!data?.novel) {
      console.warn(`‚ö†Ô∏è [page.tsx getNovelData] API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ data.novel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}"`);
      return null;
    }

    console.log(`‚úÖ [page.tsx getNovelData] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: "${data.novel.title}" (ID: ${data.novel._id})`);
    return data.novel as PopulatedNovelForDetailPage;

  } catch (error: any) {
    console.error(`‚ùå [page.tsx getNovelData] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}": ${error.message}`);
    return null;
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á metadata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
 * @param props NovelPageProps
 * @param parent ResolvingMetadata
 * @returns Promise<Metadata> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SEO
 */
export async function generateMetadata(
  { params }: NovelPageProps,
  parent: ResolvingMetadata
): Promise<Metadata> {
  const { slug } = await params; // Resolve Promise ‡∏à‡∏≤‡∏Å params
  if (typeof slug !== 'string' || !slug.trim()) {
    console.warn(`‚ö†Ô∏è [generateMetadata] Slug ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: "${slug}"`);
    return {
      title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - NovelMaze",
      description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å slug ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
      robots: { index: false, follow: false }
    };
  }

  const novel = await getNovelData(slug.trim());

  if (!novel) {
    return {
      title: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ - NovelMaze",
      description: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (slug: ${slug})`,
      robots: { index: false, follow: false }
    };
  }

  const siteName = (await parent).openGraph?.siteName || process.env.NEXT_PUBLIC_SITE_NAME || "NovelMaze";
  const authorName = novel.author?.profile?.penName || novel.author?.profile?.displayName || novel.author?.username || '‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ô‡∏¥‡∏£‡∏ô‡∏≤‡∏°';
  const pageTitle = `${novel.title} - ‡πÇ‡∏î‡∏¢ ${authorName} | ${siteName}`;
  const description = novel.synopsis
    ? novel.synopsis.substring(0, 160).trim() + (novel.synopsis.length > 160 ? "..." : "")
    : `‡∏≠‡πà‡∏≤‡∏ô‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ "${novel.title}" ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏î‡∏¢ ${authorName} ‡∏ö‡∏ô ${siteName} ‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° Visual Novel ‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß`;

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î base URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  let baseUrlForImage = process.env.NEXT_PUBLIC_BASE_URL;
  if (!baseUrlForImage) {
    baseUrlForImage = process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : 'http://localhost:3000';
  }

  let imageUrl = novel.coverImageUrl;
  if (imageUrl && !imageUrl.startsWith('http') && !imageUrl.startsWith('data:')) {
    imageUrl = `${baseUrlForImage}${imageUrl.startsWith('/') ? '' : '/'}${imageUrl}`;
  } else if (!imageUrl) {
    imageUrl = `${baseUrlForImage}/images/default-og-image.png`;
  }

  const publishedTime = novel.publishedAt ? new Date(novel.publishedAt).toISOString() : undefined;
  const modifiedTime = novel.lastContentUpdatedAt ? new Date(novel.lastContentUpdatedAt).toISOString() : (novel.updatedAt ? new Date(novel.updatedAt).toISOString() : undefined);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á keywords ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
  const keywordsSet = new Set<string>();
  novel.themeAssignment?.customTags?.forEach((tag: string) => keywordsSet.add(tag.trim()));
  if (novel.themeAssignment?.mainTheme?.categoryId?.name) keywordsSet.add(novel.themeAssignment.mainTheme.categoryId.name.trim());
  novel.themeAssignment?.subThemes?.forEach((st) => { if (st?.categoryId?.name) keywordsSet.add(st.categoryId.name.trim()); });
  novel.themeAssignment?.moodAndTone?.forEach((mt) => { if (mt?.name) keywordsSet.add(mt.name.trim()); });
  if (novel.language?.name) keywordsSet.add(novel.language.name.trim());
  keywordsSet.add("visual novel");
  keywordsSet.add("‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢");
  keywordsSet.add(authorName);
  keywordsSet.add(novel.title);

  return {
    metadataBase: new URL(baseUrlForImage),
    title: pageTitle,
    description: description,
    keywords: Array.from(keywordsSet).filter(Boolean),
    authors: [{ name: authorName, url: novel.author?.username ? `${baseUrlForImage}/u/${novel.author.username}` : undefined }],
    alternates: {
      canonical: `/novels/${novel.slug}`,
    },
    openGraph: {
      title: pageTitle,
      description: description,
      url: `${baseUrlForImage}/novels/${novel.slug}`,
      siteName: siteName,
      images: imageUrl ? [{
        url: imageUrl,
        width: 1200,
        height: 630,
        alt: `‡∏õ‡∏Å‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${novel.title}`,
      }] : [],
      locale: novel.language?.slug?.startsWith('th') ? "th_TH" : (novel.language?.slug?.startsWith('en') ? "en_US" : undefined),
      type: "article",
      tags: novel.themeAssignment?.customTags || [],
      publishedTime: publishedTime,
      modifiedTime: modifiedTime,
      section: novel.themeAssignment?.mainTheme?.categoryId?.name,
      authors: novel.author?.username ? [`${baseUrlForImage}/u/${novel.author.username}`] : [authorName],
    },
    twitter: {
      card: "summary_large_image",
      title: pageTitle,
      description: description,
      images: imageUrl ? [{ url: imageUrl, alt: `‡∏õ‡∏Å‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${novel.title}` }] : [],
    },
  };
}

/**
 * ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
 * @param props NovelPageProps
 * @returns JSX.Element ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
 */
export default async function NovelPage({ params }: NovelPageProps) {
  const { slug } = await params; // Resolve Promise ‡∏à‡∏≤‡∏Å params
  if (typeof slug !== 'string' || !slug.trim()) {
    console.warn(`‚ö†Ô∏è [NovelPage] Slug ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: "${slug}"`);
    notFound();
  }

  const novel = await getNovelData(slug.trim());

  if (!novel) {
    console.log(`‚ö†Ô∏è [NovelPage] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}"`);
    notFound();
  }

  return (
    <div className="novel-detail-page-container bg-background text-foreground min-h-screen">
      <NovelHeader novel={novel} />
      <main className="container-custom mx-auto px-2 sm:px-4 py-6 md:py-8">
        <NovelTabs novel={novel} />
      </main>
    </div>
  );
}