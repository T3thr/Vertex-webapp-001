// src/app/page.tsx
// ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô Server Component ‡πÇ‡∏î‡∏¢‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
// Next.js App Router ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Server Components ‡πÄ‡∏õ‡πá‡∏ô SSR ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ loading flickering

import { Suspense } from 'react';
import { NovelCard, NovelCardData } from "@/components/NovelCard";
import { ImageSlider, SlideData as SliderSlideData } from "@/components/ImageSlider";
import { NovelRowNavButton } from "@/components/NovelRowNavigation";
import {
  TrendingUp,
  CheckCircle,
  Clock,
  BookOpen,
  BadgePercent,
  ArrowRightCircle,
} from "lucide-react";
import { Metadata } from 'next';
import Link from "next/link";

export const metadata: Metadata = {
  title: 'DivWy | ‡∏Ñ‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏ß‡∏¥‡∏ä‡∏ß‡∏•‡πÇ‡∏ô‡πÄ‡∏ß‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏¥‡∏î‡∏á‡∏≠‡∏°‡πÅ‡∏á‡∏°',
  description: '‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏≠‡∏ö ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÅ‡∏ä‡∏ó ‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏ä‡∏ß‡∏•‡πÇ‡∏ô‡πÄ‡∏ß‡∏•‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÅ‡∏≠‡∏Ñ‡∏ó‡∏µ‡∏ü ‡∏ó‡∏µ‡πà DivWy',
}

const API_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3000";
const NOVELS_PER_SECTION = 8; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å card ‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á

interface SectionConfig {
  key: string;
  title: string;
  description?: string;
  icon: React.ReactNode;
  filter: string;
  novelType?: string;
  viewAllLink: string;
  headerImageUrl?: string; // ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà] ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û header
}

interface SectionData {
  config: SectionConfig;
  novels: NovelCardData[];
  showViewAllButton: boolean;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö section ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö parallel fetching)
async function fetchSectionData(config: SectionConfig): Promise<SectionData> {
  try {
    const params = new URLSearchParams({
      limit: NOVELS_PER_SECTION.toString(),
      filter: config.filter,
    });
    if (config.novelType) {
      params.append("novelType", config.novelType);
    }

    const url = `${API_URL}/api/novels?${params.toString()}`;
    console.log(`üìû [HomePage Server] Fetching ${config.key} from: ${url}`);

    // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÉ‡∏ä‡πâ timeout ‡πÅ‡∏•‡∏∞ signal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô hanging requests
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ timeout

    const res = await fetch(url, { 
      next: { revalidate: 600 }, // ‡πÄ‡∏û‡∏¥‡πà‡∏° cache ‡πÄ‡∏õ‡πá‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ
      headers: {
        'Content-Type': 'application/json',
      },
      signal: controller.signal
    });

    clearTimeout(timeoutId);

    if (!res.ok) {
      console.error(`‚ùå [HomePage Server] Failed to fetch ${config.key} (HTTP ${res.status})`);
      return {
        config,
        novels: [],
        showViewAllButton: false
      };
    }

    const data = await res.json();
    const fetchedNovels = Array.isArray(data.novels) ? data.novels : [];
    console.log(`‚úÖ [HomePage Server] Received ${fetchedNovels.length} novels for ${config.key}`);
    
    return {
      config,
      novels: fetchedNovels,
      showViewAllButton: fetchedNovels.length === NOVELS_PER_SECTION
    };
  } catch (error: any) {
    if (error.name === 'AbortError') {
      console.error(`‚è∞ [HomePage Server] Request timeout for ${config.key}`);
    } else {
      console.error(`‚ùå [HomePage Server] Error fetching ${config.key}:`, error.message);
    }
    return {
      config,
      novels: [],
      showViewAllButton: false
    };
  }
}

// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö timeout ‡πÅ‡∏•‡∏∞ error handling ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
async function getAllNovelsData(sectionsConfig: SectionConfig[]): Promise<SectionData[]> {
  console.log('üöÄ [HomePage Server] Starting parallel fetch for all sections');
  
  // ‡πÉ‡∏ä‡πâ Promise.allSettled ‡πÅ‡∏ó‡∏ô Promise.all ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ section ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
  const results = await Promise.allSettled(
    sectionsConfig.map(config => fetchSectionData(config))
  );

  const sectionsData = results.map((result, index) => {
    if (result.status === 'fulfilled') {
      return result.value;
    } else {
      console.error(`‚ùå [HomePage Server] Section ${sectionsConfig[index].key} failed:`, result.reason);
      return {
        config: sectionsConfig[index],
        novels: [],
        showViewAllButton: false
      };
    }
  });

  console.log('‚úÖ [HomePage Server] All sections processed (some may have failed gracefully)');
  return sectionsData;
}

// ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà] Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Section Header ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
function SectionHeader({ config }: { config: SectionConfig }) {
  const hasImage = config.headerImageUrl;
  
  return (
    <div 
      className={`section-header ${hasImage ? 'section-header-with-image' : ''} smooth-appear`}
      style={hasImage ? { backgroundImage: `url(${config.headerImageUrl})` } : {}}
    >
      {hasImage && <div className="section-header-overlay" />}
      <div className={hasImage ? 'section-header-content' : 'py-2'}>
        <div className="flex items-center gap-2.5 md:gap-3">
          <div className="text-primary bg-primary/10 p-2 sm:p-2.5 rounded-md shadow-sm flex items-center justify-center">
            {config.icon}
          </div>
          <div>
            <h2 className="text-lg sm:text-xl font-bold text-foreground">{config.title}</h2>
            {config.description && (
              <p className="text-xs sm:text-sm text-muted-foreground mt-0.5">{config.description}</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

function SectionTitle({ icon, title, description }: { icon: React.ReactNode; title: string; description?: string }) {
  return (
    <div className="flex items-center gap-2.5 md:gap-3">
      <div className="text-primary bg-primary/10 p-2 sm:p-2.5 rounded-md shadow-sm flex items-center justify-center">
        {icon}
      </div>
      <div>
        <h2 className="text-lg sm:text-xl font-bold text-foreground">{title}</h2>
        {description && <p className="text-xs sm:text-sm text-muted-foreground mt-0.5">{description}</p>}
      </div>
    </div>
  );
}

// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÄ‡∏û‡∏¥‡πà‡∏° minimal skeleton loader ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Suspense
function SectionSkeleton() {
  return (
    <section className="mb-6 md:mb-10">
      <div className="flex justify-between items-center mb-2.5 md:mb-3">
        <div className="flex items-center gap-2.5 md:gap-3">
          <div className="w-10 h-10 bg-muted rounded-md animate-pulse" />
          <div>
            <div className="h-6 w-32 bg-muted rounded animate-pulse mb-1" />
            <div className="h-4 w-48 bg-muted rounded animate-pulse" />
          </div>
        </div>
      </div>
      <div className="flex overflow-hidden space-x-2 sm:space-x-3">
        {Array.from({ length: 6 }, (_, i) => (
          <div key={i} className="flex-shrink-0 w-[120px] min-[400px]:w-[130px] sm:w-[140px] md:w-[150px]">
            <div className="bg-muted rounded-lg aspect-square mb-2 animate-pulse" />
            <div className="h-4 w-full bg-muted rounded animate-pulse mb-1" />
            <div className="h-3 w-3/4 bg-muted rounded animate-pulse" />
          </div>
        ))}
      </div>
    </section>
  );
}

// ‚úÖ [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà] Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Featured Section ‡πÅ‡∏ö‡∏ö Asymmetrical Grid ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö responsive mobile
function FeaturedSection({ novels, viewAllLink, showViewAllButton }: {
  novels: NovelCardData[];
  viewAllLink: string;
  showViewAllButton: boolean;
}) {
  if (!novels || novels.length === 0) {
    return (
      <div className="text-center text-muted-foreground py-8 md:py-10 col-span-full flex flex-col items-center justify-center min-h-[200px] bg-secondary/20 rounded-lg my-2">
        <BookOpen size={36} strokeWidth={1.5} className="mx-auto mb-3 text-primary/60" />
        <p className="font-semibold text-base text-foreground/80">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ</p>
        <p className="text-xs sm:text-sm text-muted-foreground max-w-xs mx-auto">‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ß‡∏∞‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ‡∏ô‡∏∞</p>
      </div>
    );
  }

  const mainNovel = novels[0]; // ‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
  const sideNovels = novels.slice(1, 5); // ‡πÄ‡∏≠‡∏≤ 4 ‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö grid 2x2 ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤

  return (
    <div className="featured-section-wrapper"> {/* ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà] wrapper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á */}
      <div className="featured-grid"> {/* ‚úÖ [‡∏•‡∏ö smooth-appear] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î */}
        {/* Main Novel (‡πÉ‡∏´‡∏ç‡πà ‡∏ã‡πâ‡∏≤‡∏¢) - ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô 2 ‡∏™‡πà‡∏ß‡∏ô */}
        <div className="featured-main">
          <NovelCard
            novel={mainNovel}
            priority={true}
            variant="large"
            className="novel-card h-full w-full !m-0" /* ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏° !m-0] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö margin ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢ override inline style */
          />
        </div>

        {/* Side Novels (‡∏Ç‡∏ß‡∏≤ 2x2) - ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô 1 ‡∏™‡πà‡∏ß‡∏ô */}
        <div className="featured-side">
          {/* Grid 2x2: ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î 4 ‡∏ï‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ */}
          {sideNovels.map((novel, idx) => (
            <NovelCard
              key={`featured-side-${novel._id}-${idx}`}
              novel={novel}
              priority={true}
              variant="featured" /* ‚úÖ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å default ‡πÄ‡∏õ‡πá‡∏ô featured] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° */
              className="novel-card h-full w-full !m-0" /* ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏° !m-0] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö margin ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢ override inline style */
            />
          ))}
          
          {/* ‚úÖ [‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà] ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ grid ‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏°‡∏≤‡∏ï‡∏£ */}
          {/* ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° "‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°" ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            {showViewAllButton && (
            <div className="view-more-button-container">
              <Link
                href={viewAllLink}
                className="view-more-circle"
                role="link"
                aria-label="‡∏î‡∏π‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°"
              >
                <div className="view-more-content">
                  <ArrowRightCircle size={14} strokeWidth={1.5} className="text-primary mb-0.5" />
                  <span className="text-[8px] sm:text-[9px] font-medium text-primary">‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°</span>
                </div>
              </Link>
            </div>
          )} */}
        </div>
      </div>
    </div>
  );
}

// ‚úÖ [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] NovelRow ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤
function NovelRow({
  novels,
  filterKey,
  viewAllLink,
  showViewAllButton,
  showNavigation = true // ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà] ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° navigation
}: {
  novels: NovelCardData[];
  filterKey: string;
  viewAllLink: string;
  showViewAllButton: boolean;
  showNavigation?: boolean;
}) {
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î card ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á‡∏ï‡∏≤‡∏° readawrite.com
  const cardWidthClasses = "w-[160px] min-[400px]:w-[170px] sm:w-[180px] md:w-[190px]";

  if (!novels || novels.length === 0) {
    return (
      <div className="text-center text-muted-foreground py-8 md:py-10 col-span-full flex flex-col items-center justify-center min-h-[200px] bg-secondary/20 rounded-lg my-2">
        <BookOpen size={36} strokeWidth={1.5} className="mx-auto mb-3 text-primary/60" />
        <p className="font-semibold text-base text-foreground/80">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ</p>
        <p className="text-xs sm:text-sm text-muted-foreground max-w-xs mx-auto">‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ß‡∏∞‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ‡∏ô‡∏∞</p>
      </div>
    );
  }

  return (
    <div className={`novel-row-container ${showNavigation ? '' : 'overflow-hidden'}`}>
      {/* ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà] Navigation Buttons ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Desktop */}
      {showNavigation && (
        <>
          <NovelRowNavButton direction="left" targetId={`novel-row-${filterKey}`} />
          <NovelRowNavButton direction="right" targetId={`novel-row-${filterKey}`} />
        </>
      )}

      <div
        id={`novel-row-${filterKey}`}
        className="novel-row-scroll novel-cards-grid custom-scrollbar-horizontal py-2 -mx-0.5 px-0.5 sm:-mx-1 sm:px-1 contain-layout"
        role="region"
        aria-label={`‡πÅ‡∏ñ‡∏ß‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ${filterKey}`}
      >
        {novels.map((novel, index) => (
          <div
            key={`${filterKey}-${novel._id}-${index}`}
            className={`novel-card-item ${cardWidthClasses}`}
          >
            <NovelCard
              novel={novel}
              priority={index < 3}
              className="h-full" /* ‚úÖ [‡∏•‡∏ö hover-lift gpu-accelerated] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î */
            />
          </div>
        ))}
        {/*}
        {showViewAllButton && (
          <div className={`novel-card-item ${cardWidthClasses} flex items-center justify-center`}>
            <Link
              href={viewAllLink}
              className="view-more-circle"
              role="link"
              aria-label={`‡∏î‡∏π‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î ${filterKey}`}
            >
              <div className="view-more-content">
                <ArrowRightCircle size={20} strokeWidth={1.5} className="text-primary mb-1" />
                <span className="text-[10px] font-medium text-primary">
                  ‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°
                </span>
              </div>
            </Link>
          </div>
        )} */}
      </div>
    </div>
  );
}

// Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• section ‡∏û‡∏£‡πâ‡∏≠‡∏° error boundary
async function SectionRenderer({ 
  configPromise, 
  isFeatured = false 
}: { 
  configPromise: Promise<SectionData>; 
  isFeatured?: boolean;
}) {
  try {
    const data = await configPromise;
    const { config, novels, showViewAllButton } = data;
    
    return (
      <section aria-labelledby={config.key} className="mb-6 md:mb-10">
        <div className="flex justify-between items-center mb-2.5 md:mb-3">
          <SectionHeader config={config} />
        </div>
        
        {isFeatured ? (
          <FeaturedSection 
            novels={novels}
            viewAllLink={config.viewAllLink}
            showViewAllButton={showViewAllButton}
          />
        ) : (
          <NovelRow
            novels={novels}
            filterKey={config.key}
            viewAllLink={config.viewAllLink}
            showViewAllButton={showViewAllButton}
            showNavigation={true}
          />
        )}
      </section>
    );
  } catch (error) {
    console.error('‚ùå Section rendering error:', error);
    return (
      <section className="mb-6 md:mb-10">
        <div className="text-center text-muted-foreground py-8 md:py-10 flex flex-col items-center justify-center min-h-[200px] bg-secondary/20 rounded-lg">
          <BookOpen size={36} strokeWidth={1.5} className="mx-auto mb-3 text-red-500/60" />
          <p className="font-semibold text-base text-foreground/80">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤</p>
          <p className="text-xs sm:text-sm text-muted-foreground max-w-xs mx-auto">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
        </div>
      </section>
    );
  }
}

export default async function HomePage() {
  console.log('üéØ [HomePage Server] Starting homepage render');
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• slider ‡πÅ‡∏ö‡∏ö static ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á fetch
  const imageSlideData: SliderSlideData[] = [
    {
      id: "vn-discovery-slide",
      title: "‡πÇ‡∏•‡∏Å‡πÉ‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Visual Novel",
      description: "‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏°‡∏´‡∏≤‡∏Å‡∏≤‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏•‡∏¥‡∏Ç‡∏¥‡∏ï",
      imageUrl: "https://res.cloudinary.com/dzwjogkrz/image/upload/v1751571042/RPReplay_Final1660530696_xdfsau.gif",
      link: "https://res.cloudinary.com/dzwjogkrz/image/upload/v1751571042/RPReplay_Final1660530696_xdfsau.gif",
      category: "Visual Novels",
      highlightColor: "var(--color-primary)",
      primaryAction: { label: "‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏ß‡∏¥‡∏ä‡∏ß‡∏•‡πÇ‡∏ô‡πÄ‡∏ß‡∏•", href: "https://res.cloudinary.com/dzwjogkrz/image/upload/v1751571042/RPReplay_Final1660530696_xdfsau.gif" },
    },
    {
      id: "epic-adventure-awaits",
      title: "‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏•‡∏Å‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ‡∏î‡∏±‡πà‡∏á‡πÉ‡∏à‡∏ô‡∏∂‡∏Å",
      description: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ‡∏Å‡πá‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏±‡πà‡∏á‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û",
      imageUrl: "https://res.cloudinary.com/dzwjogkrz/image/upload/v1751571038/767725075.680000_mffzzx.gif",
      link: "https://res.cloudinary.com/dzwjogkrz/image/upload/v1751571038/767725075.680000_mffzzx.gif",
      category: "Visual Novels",
      highlightColor: "#ec4899",
      primaryAction: { label: "‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏ß‡∏¥‡∏ä‡∏ß‡∏•‡πÇ‡∏ô‡πÄ‡∏ß‡∏•", href: "https://res.cloudinary.com/dzwjogkrz/image/upload/v1751571038/767725075.680000_mffzzx.gif" },
    },
    {
      id: "author-spotlight-promo",
      title: "The Chosen One",
      description: "‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏Ñ‡∏£",
      imageUrl: "https://res.cloudinary.com/dzwjogkrz/image/upload/v1751572113/train_jbodrw.png",
      link: "https://res.cloudinary.com/dzwjogkrz/image/upload/v1751572113/train_jbodrw.png",
      category: "‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°",
      highlightColor: "#14b8a6",
      primaryAction: { label: "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô", href: "https://res.cloudinary.com/dzwjogkrz/image/upload/v1751572113/train_jbodrw.png" },
    },
  ];

  const sectionsConfig: SectionConfig[] = [
    {
      key: "trending-all",
      title: "‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°",
      description: "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Æ‡∏¥‡∏ï‡∏ï‡∏¥‡∏î‡∏•‡∏°‡∏ö‡∏ô",
      icon: <TrendingUp className="h-5 w-5 text-primary" />,
      filter: "trending",
      viewAllLink: "/novels?filter=trending",
      // headerImageUrl: "/images/section-headers/trending-bg.webp", // ‚úÖ [‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á] ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    },
    {
      key: "new-releases",
      title: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
      description: "‡∏ï‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà",
      icon: <Clock className="h-5 w-5 text-primary" />,
      filter: "published",
      viewAllLink: "/novels?filter=published",
    },
    {
      key: "promoted-deals",
      title: "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î",
      description: "‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏∏‡πâ‡∏°‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°",
      icon: <BadgePercent className="h-5 w-5 text-primary" />,
      filter: "promoted",
      viewAllLink: "/novels?filter=promoted",
    },
    {
      key: "completed-stories",
      title: "‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏ß‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏à‡∏ö",
      description: "‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏à‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏ô‡∏∏‡∏Å",
      icon: <CheckCircle className="h-5 w-5 text-primary" />,
      filter: "completed",
      viewAllLink: "/novels?filter=completed",
    },
  ];

  // ‡πÄ‡∏£‡∏¥‡πà‡∏° fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö parallel ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
  const sectionPromises = sectionsConfig.map(config => fetchSectionData(config));
  
  console.log('‚úÖ [HomePage Server] Homepage setup complete, starting render...');

  return (
    <div className="bg-background text-foreground min-h-screen pt-5">
      <main className="pb-10 md:pb-16">
        {/* ‡πÅ‡∏™‡∏î‡∏á ImageSlider ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ API */}
        <section className="w-full mb-8 md:mb-12 relative">
          <ImageSlider slides={imageSlideData} autoPlayInterval={7000} />
          {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô border ‡πÉ‡∏ï‡πâ slide bar */}
          <div className="h-4 md:h-6 bg-background mt-1 border-b border-border"></div>
        </section>

        <div className="container-custom space-y-8 md:space-y-12">
          {/* ‚úÖ [‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á] Section ‡πÅ‡∏£‡∏Å (‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°) ‡πÉ‡∏ä‡πâ Asymmetrical Grid */}
          <Suspense key="trending-featured" fallback={<SectionSkeleton />}>
            <SectionRenderer configPromise={sectionPromises[0]} isFeatured={true} />
          </Suspense>

          {/* ‚úÖ [‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á] Section ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ä‡πâ NovelRow ‡∏õ‡∏Å‡∏ï‡∏¥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô */}
          {sectionPromises.slice(1).map((promise, index) => (
            <Suspense key={sectionsConfig[index + 1].key} fallback={<SectionSkeleton />}>
              <SectionRenderer configPromise={promise} isFeatured={false} />
            </Suspense>
          ))}
        </div>
      </main>
    </div>
  );
}