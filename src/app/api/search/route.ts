// src/app/api/search/route.ts
import { NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb";
import NovelModel from "@/backend/models/Novel";
import CategoryModel from "@/backend/models/Category";
import UserModel from "@/backend/models/User";

/**
 * API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
 * ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (q) ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
 */
export async function GET(request: Request) {
  await dbConnect();

  try {
    const { searchParams } = new URL(request.url);
    const query = searchParams.get("q") || "";
    const type = searchParams.get("type") || "novel"; // novel, category, author
    const categories = searchParams.getAll("category") || [];
    const tags = searchParams.getAll("tag") || [];
    const status = searchParams.get("status") || "";
    const sortBy = searchParams.get("sort") || "relevance";
    const limit = parseInt(searchParams.get("limit") || "20", 10);
    const page = parseInt(searchParams.get("page") || "1", 10);
    const skip = (page - 1) * limit;

    console.log(`üì° API /api/search called with query: "${query}", type: ${type}`);

    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÅ‡∏™‡∏î‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if (!query && categories.length === 0 && tags.length === 0 && !status) {
      return NextResponse.json(
        { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á" },
        { status: 400 }
      );
    }

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£ query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MongoDB
    const searchQuery: any = {
      isDeleted: false,
      visibility: "public",
    };

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏ status ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÄ‡∏ä‡πà‡∏ô draft, published, completed
    if (status) {
      searchQuery.status = status;
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ status ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      searchQuery.status = { $in: ["published", "completed", "discount"] };
    }

    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    if (query) {
      // ‡πÉ‡∏ä‡πâ text search ‡∏Ç‡∏≠‡∏á MongoDB
      searchQuery.$text = { $search: query };
    }

    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    if (categories.length > 0) {
      searchQuery.categories = { $in: categories };
    }

    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ó‡πá‡∏Å
    if (tags.length > 0) {
      searchQuery.tags = { $in: tags };
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
    const sort: any = {};
    
    if (query) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô
      sort.score = { $meta: "textScore" };
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° parameter ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    switch (sortBy) {
      case "latest":
        sort.lastEpisodePublishedAt = -1;
        sort.updatedAt = -1;
        break;
      case "oldest":
        sort.firstPublishedAt = 1;
        break;
      case "popular":
        sort.viewsCount = -1;
        sort.followersCount = -1;
        break;
      case "rating":
        sort.averageRating = -1;
        sort.viewsCount = -1;
        break;
      case "relevance":
      default:
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å relevance ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°
        if (!query && sortBy === "relevance") {
          sort.viewsCount = -1;
          sort.followersCount = -1;
        }
        break;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á User Model ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö populate
    const User = UserModel();
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏° populate author
    let results: any;
    let total: number;
    
    switch (type) {
      case "category":
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        const Category = CategoryModel();
        const categoryQuery: any = {
          isDeleted: false,
          isVisible: true,
        };
        
        if (query) {
          categoryQuery.$text = { $search: query };
        }
        
        total = await Category.countDocuments(categoryQuery);
        results = await Category.find(categoryQuery)
          .sort(query ? { score: { $meta: "textScore" } } : { displayOrder: 1 })
          .skip(skip)
          .limit(limit)
          .lean();
        
        return NextResponse.json(
          {
            categories: results,
            pagination: {
              total,
              page,
              limit,
              totalPages: Math.ceil(total / limit),
            },
          },
          { status: 200 }
        );
        
      case "novel":
      default:
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
        total = await NovelModel().countDocuments(searchQuery);
        
        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° projection ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        const projection = query ? { score: { $meta: "textScore" } } : {};
        
        results = await NovelModel()
          .find(searchQuery, projection)
          .populate({
            path: "author",
            select: "username profile.displayName profile.avatar",
            model: User,
          })
          .sort(sort)
          .skip(skip)
          .limit(limit)
          .lean();
        
        return NextResponse.json(
          {
            novels: results,
            pagination: {
              total,
              page,
              limit,
              totalPages: Math.ceil(total / limit),
            },
          },
          { status: 200 }
        );
    }
  } catch (error: any) {
    console.error(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (query: ${request.url}):`, error.message);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" },
      { status: 500 }
    );
  }
}