// src/app/api/search/novels/route.ts
import { NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb";
import NovelModel, { INovel } from "@/backend/models/Novel"; // Import INovel
import UserModel from "@/backend/models/User";
import CategoryModel from "@/backend/models/Category";

export async function GET(request: Request) {
  await dbConnect();

  try {
    const { searchParams } = new URL(request.url);

    // ‡∏î‡∏∂‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å URL
    const query = searchParams.get("q") || "";
    const categoryId = searchParams.get("category") || ""; // ID ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å
    const subCategoryId = searchParams.get("subCategory") || ""; // ID ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏£‡∏≠‡∏á (‡πÉ‡∏´‡∏°‡πà)
    const tags = searchParams.getAll("tag") || [];
    const sort = searchParams.get("sort") || "relevance"; // relevance, latest, popular, rating, followers, lastSignificantUpdateAt (‡πÉ‡∏´‡∏°‡πà)
    const status = searchParams.get("status") || ""; // published, completed, onHiatus (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° discount)
    const explicitContent = searchParams.get("explicit") || ""; // yes, no, "" (all)
    const ageRating = searchParams.get("age") || ""; // everyone, teen, mature17+, adult18+, "" (all)
    const isDiscounted = searchParams.get("discounted"); // true, false, "" (all) (‡πÉ‡∏´‡∏°‡πà)
    const language = searchParams.get("lang") || ""; // th, en, etc. (‡πÉ‡∏´‡∏°‡πà)
    const limit = parseInt(searchParams.get("limit") || "20", 10); // Default to 20 for better pagination
    const page = parseInt(searchParams.get("page") || "1", 10);
    const skip = (page - 1) * limit;

    console.log(`üì° API /api/search/novels called with query: ${query}, categoryId: ${categoryId}, subCategoryId: ${subCategoryId}, sort: ${sort}, limit: ${limit}, page: ${page}`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const searchCriteria: any = {
      isDeleted: false,
      visibility: "public", // ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô public
    };

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° discount ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ isDiscounted ‡πÄ‡∏õ‡πá‡∏ô boolean field ‡πÅ‡∏¢‡∏Å)
    if (status && status !== "all" && ["published", "completed", "onHiatus", "archived"].includes(status)) {
      searchCriteria.status = status;
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà
    if (explicitContent === "yes") {
      searchCriteria.isExplicitContent = true;
    } else if (explicitContent === "no") {
      searchCriteria.isExplicitContent = false;
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏£‡∏ï‡∏ï‡∏¥‡πâ‡∏á‡∏≠‡∏≤‡∏¢‡∏∏
    if (ageRating && ageRating !== "all") {
      searchCriteria.ageRating = ageRating;
    }
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤
    if (language && language !== "all") {
        searchCriteria.language = language;
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤ (‡πÉ‡∏´‡∏°‡πà)
    if (isDiscounted === "true") {
      searchCriteria.isDiscounted = true;
    } else if (isDiscounted === "false") {
      searchCriteria.isDiscounted = false;
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å
    if (categoryId) {
      searchCriteria.categories = categoryId; // Assumes categories field in Novel model stores primary category IDs
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏£‡∏≠‡∏á (‡πÉ‡∏´‡∏°‡πà)
    if (subCategoryId) {
        searchCriteria.subCategories = subCategoryId; // Assumes subCategories field in Novel model
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÅ‡∏ó‡πá‡∏Å
    if (tags.length > 0) {
      searchCriteria.tags = { $all: tags }; // $all ensures all specified tags are present
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏ä‡πâ text search
    if (query) {
      searchCriteria.$text = {
        $search: query,
        $language: "thai", // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ dynamic ‡∏ï‡∏≤‡∏° language filter
        $caseSensitive: false,
        $diacriticSensitive: false,
      };
    }

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
    const sortOptions: any = {};
    if (query && sort === "relevance") {
      sortOptions.score = { $meta: "textScore" };
    } else {
      switch (sort) {
        case "latest": // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          sortOptions.lastEpisodePublishedAt = -1;
          break;
        case "popular": // ‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß
          sortOptions.viewsCount = -1;
          break;
        case "rating": // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
          sortOptions.averageRating = -1;
          break;
        case "followers": // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
          sortOptions.followersCount = -1;
          break;
        case "lastSignificantUpdateAt": // ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å)
          sortOptions.lastSignificantUpdateAt = -1;
          break;
        default: // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏£‡∏∑‡∏≠ relevance ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ query ‡∏Å‡πá‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          sortOptions.lastEpisodePublishedAt = -1;
          break;
      }
    }
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° _id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Ç‡∏≠‡∏á pagination ‡∏´‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    sortOptions._id = -1;


    // ‡∏™‡∏£‡πâ‡∏≤‡∏á User Model ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö populate
    const User = UserModel();

    // Fields to select
    const selectedFields = "title slug coverImage description status isExplicitContent ageRating tags lastEpisodePublishedAt viewsCount likesCount averageRating followersCount author categories subCategories isDiscounted discountDetails language episodesCount publishedEpisodesCount";

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
    const novelsQuery = NovelModel()
      .find(searchCriteria)
      .populate({
        path: "author",
        select: "username profile.displayName profile.avatar", // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ path ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô UserModel
        model: User,
      })
      .populate({ // Populate primary categories
        path: "categories",
        select: "name slug iconUrl themeColor", // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å Category
        model: CategoryModel(),
      })
      .populate({ // Populate sub-categories (if you have them and want to display them)
        path: "subCategories",
        select: "name slug iconUrl themeColor",
        model: CategoryModel(),
      })
      .select(selectedFields + (query && sort === "relevance" ? " score" : "")) // ‡πÄ‡∏û‡∏¥‡πà‡∏° score ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ search
      .sort(sortOptions)
      .skip(skip)
      .limit(limit)
      .lean();
      
    if (query && sort === "relevance") {
        // Mongoose may require explicitly adding the $meta field in select when using it in sort
        // For lean queries, this might behave differently, ensure `score` is available if sorting by it.
    }

    const novels = await novelsQuery;

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    const total = await NovelModel().countDocuments(searchCriteria);

    console.log(`‚úÖ Found ${novels.length} novels matching query (total: ${total})`);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    let categoryData = null;
    if (categoryId) {
      categoryData = await CategoryModel().findById(categoryId).select("name slug description coverImageUrl").lean();
    }
    let subCategoryData = null;
    if (subCategoryId) {
        subCategoryData = await CategoryModel().findById(subCategoryId).select("name slug description").lean();
    }

    // ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á)
    let relatedTags: string[] = [];
    if (novels.length > 0) {
      const tagFrequency: Record<string, number> = {};
      novels.forEach((novel:any) => { // Cast novel to any or use INovel if lean returns typed objects
        novel.tags?.forEach((tag: string) => {
          if (!tags.includes(tag)) { // ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
            tagFrequency[tag] = (tagFrequency[tag] || 0) + 1;
          }
        });
      });
      relatedTags = Object.entries(tagFrequency)
        .sort((a, b) => b[1] - a[1]) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà
        .slice(0, 10) // ‡πÄ‡∏≠‡∏≤ 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
        .map(entry => entry[0]);
    }

    return NextResponse.json(
      {
        novels,
        category: categoryData, // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        subCategory: subCategoryData, // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÉ‡∏´‡∏°‡πà)
        relatedTags,
        pagination: {
          total,
          page,
          limit,
          totalPages: Math.ceil(total / limit),
        },
      },
      { status: 200 }
    );
  } catch (error: any) {
    console.error(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢:`, error.message, error.stack);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢", details: error.message },
      { status: 500 }
    );
  }
}