// src/app/api/search/novels/route.ts
import { NextRequest, NextResponse } from "next/server"; // Import NextRequest
import dbConnect from "@/backend/lib/mongodb";
import NovelModel, { INovel, NovelStatus, NovelAccessLevel } from "@/backend/models/Novel"; // Import INovel ‡πÅ‡∏•‡∏∞ Enums
import UserModel from "@/backend/models/User"; //
import CategoryModel, { ICategory } from "@/backend/models/Category"; //
import mongoose from "mongoose";


// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö PopulatedNovelForDetailPage ‡πÅ‡∏ï‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤)
interface SearchedNovelResult {
  _id: string;
  title: string; //
  slug: string; //
  author?: { // ‡∏à‡∏≤‡∏Å INovel.author (populated)
    _id: string;
    username?: string; //
    profile?: {
      displayName?: string; //
      penName?: string; //
      avatarUrl?: string; //
    };
  };
  coverImageUrl?: string; //
  synopsis: string; //
  status: NovelStatus; //
  // ageRating?: string; // ageRatingCategoryId ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å populate ‡πÄ‡∏õ‡πá‡∏ô object ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
  ageRatingCategory?: Pick<ICategory, "_id" | "name" | "slug"> | null; //
  // tags?: string[]; // customTags ‡∏à‡∏≤‡∏Å themeAssignment.customTags
  customTags?: string[]; //
  mainThemeCategory?: Pick<ICategory, "_id" | "name" | "slug"> | null; //
  subThemeCategories?: Pick<ICategory, "_id" | "name" | "slug">[]; //
  languageCategory?: Pick<ICategory, "_id" | "name" | "slug"> | null; //
  stats: { // ‡∏à‡∏≤‡∏Å INovel.stats
    viewsCount: number;
    likesCount: number;
    averageRating: number;
    followersCount: number;
    lastPublishedEpisodeAt?: Date; //
    totalWords: number; //
  };
  monetizationSettings?: { // ‡∏à‡∏≤‡∏Å INovel.monetizationSettings
    activePromotion?: {
        isActive: boolean;
        promotionalPriceCoins?: number;
        promotionStartDate?: Date;
        promotionEndDate?: Date;
    } | null;
    defaultEpisodePriceCoins?: number;
  };
  currentEpisodePriceCoins?: number; //‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß
  totalEpisodesCount: number; //
  publishedEpisodesCount: number; //
  lastContentUpdatedAt: Date; //
  score?: number; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö text search relevance
}


export async function GET(request: NextRequest) { // ‡πÉ‡∏ä‡πâ NextRequest
  await dbConnect(); //

  try {
    const { searchParams } = new URL(request.url);

    // ‡∏î‡∏∂‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å URL
    const query = searchParams.get("q")?.trim() || "";
    const mainThemeId = searchParams.get("mainTheme") || ""; // ID ‡∏Ç‡∏≠‡∏á Main Theme Category (‡πÄ‡∏ä‡πà‡∏ô genre)
    const subThemeId = searchParams.get("subTheme") || "";   // ID ‡∏Ç‡∏≠‡∏á Sub-Theme Category
    const tagQuery = searchParams.getAll("tag") || []; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô tagQuery ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ä‡∏ô‡∏Å‡∏±‡∏ö customTags ‡πÉ‡∏ô model
    const sort = searchParams.get("sort") || "relevance"; // relevance, lastContentUpdatedAt, stats.lastPublishedEpisodeAt, stats.viewsCount, stats.averageRating, stats.followersCount
    const novelStatus = searchParams.get("status") || ""; // DRAFT, PUBLISHED, UNPUBLISHED, ARCHIVED, COMPLETED (ONGOING ‡∏Ñ‡∏∑‡∏≠ !isCompleted)
    // explicitContent ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å ageRatingCategoryId ‡∏´‡∏£‡∏∑‡∏≠ contentWarningCategories
    const ageRatingId = searchParams.get("ageRating") || ""; // ID ‡∏Ç‡∏≠‡∏á Age Rating Category
    const isDiscountedParam = searchParams.get("discounted"); // "true", "false", "" (all)
    const languageId = searchParams.get("lang") || ""; // ID ‡∏Ç‡∏≠‡∏á Language Category
    const limit = parseInt(searchParams.get("limit") || "20", 10);
    const page = parseInt(searchParams.get("page") || "1", 10);
    const skip = (page - 1) * limit;

    console.log(`üì° API /api/search/novels called with query: ${query}, mainThemeId: ${mainThemeId}, subThemeId: ${subThemeId}, sort: ${sort}, limit: ${limit}, page: ${page}`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const searchCriteria: mongoose.FilterQuery<INovel> = {
      // isDeleted: false, // ‡πÑ‡∏°‡πà‡∏°‡∏µ field ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô NovelModel
      accessLevel: NovelAccessLevel.PUBLIC, // ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô public
      status: { $in: [NovelStatus.PUBLISHED, NovelStatus.SCHEDULED] } // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà published ‡∏´‡∏£‡∏∑‡∏≠ scheduled
                                                                 // ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏à‡∏∞ $nin: [NovelStatus.BANNED_BY_ADMIN, NovelStatus.REJECTED_BY_ADMIN]
    };

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ (published, completed, ongoing, etc.)
    if (novelStatus && novelStatus !== "all") {
      if (novelStatus === "completed") {
        searchCriteria.isCompleted = true; //
        searchCriteria.status = NovelStatus.PUBLISHED; // ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞ published
      } else if (novelStatus === "ongoing") {
        searchCriteria.isCompleted = false; //
        searchCriteria.status = NovelStatus.PUBLISHED;
      } else if (Object.values(NovelStatus).includes(novelStatus as NovelStatus)) {
        searchCriteria.status = novelStatus as NovelStatus;
      }
    }


    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° ageRatingCategoryId
    if (ageRatingId && ageRatingId !== "all") {
      searchCriteria.ageRatingCategoryId = new mongoose.Types.ObjectId(ageRatingId);
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° language ID (language category)
    if (languageId && languageId !== "all") {
      searchCriteria.language = new mongoose.Types.ObjectId(languageId);
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤
    if (isDiscountedParam === "true") {
      searchCriteria["monetizationSettings.activePromotion.isActive"] = true;
      // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö date range ‡∏Ç‡∏≠‡∏á promotion ‡∏î‡πâ‡∏ß‡∏¢ $and ‡πÅ‡∏•‡∏∞ $lte, $gte
      const now = new Date();
      searchCriteria.$and = [
        ...(searchCriteria.$and || []),
        { "monetizationSettings.activePromotion.promotionStartDate": { $lte: now } },
        { "monetizationSettings.activePromotion.promotionEndDate": { $gte: now } },
      ];
    } else if (isDiscountedParam === "false") {
      searchCriteria.$or = [
        { "monetizationSettings.activePromotion.isActive": false },
        { "monetizationSettings.activePromotion.isActive": { $exists: false } },
        // ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      ];
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å (mainTheme)
    if (mainThemeId) {
      searchCriteria["themeAssignment.mainTheme.categoryId"] = new mongoose.Types.ObjectId(mainThemeId);
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏£‡∏≠‡∏á (subTheme)
    if (subThemeId) {
      searchCriteria["themeAssignment.subThemes.categoryId"] = new mongoose.Types.ObjectId(subThemeId);
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÅ‡∏ó‡πá‡∏Å (customTags)
    if (tagQuery.length > 0) {
      searchCriteria["themeAssignment.customTags"] = { $all: tagQuery.map(tag => tag.toLowerCase()) };
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏ä‡πâ text search (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ text index ‡πÉ‡∏ô Model)
    if (query) {
      const langForSearch = languageId ? (await CategoryModel.findById(languageId).select("name").lean())?.name?.toLowerCase() || "none" : "none"; // ‡∏´‡∏£‡∏∑‡∏≠ "thai" ‡∏ï‡∏≤‡∏° default ‡πÉ‡∏ô schema
      searchCriteria.$text = {
        $search: query,
        // $language: langForSearch, // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ dynamic language ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö text search (Mongo 5.0+)
                                     // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ default_language ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô index
        $caseSensitive: false,
        $diacriticSensitive: false, // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡πâ‡∏≤ $language ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏î‡∏µ
      };
    }

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
    const sortOptions: any = {};
    if (query && sort === "relevance") {
      sortOptions.score = { $meta: "textScore" };
    } else {
      switch (sort) {
        case "latestUpdate": // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
          sortOptions.lastContentUpdatedAt = -1;
          break;
        case "latestEpisode": // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          sortOptions["stats.lastPublishedEpisodeAt"] = -1;
          break;
        case "popular": // ‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß
          sortOptions["stats.viewsCount"] = -1;
          break;
        case "rating": // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
          sortOptions["stats.averageRating"] = -1;
          break;
        case "followers": // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
          sortOptions["stats.followersCount"] = -1;
          break;
        default: // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏£‡∏∑‡∏≠ relevance ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ query ‡∏Å‡πá‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          sortOptions.lastContentUpdatedAt = -1;
          break;
      }
    }
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° _id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Ç‡∏≠‡∏á pagination ‡∏´‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    sortOptions._id = -1;


    // Fields to select (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ search results)
    const selectedFields =
      "title slug coverImageUrl synopsis status isCompleted " +
      "themeAssignment.mainTheme.categoryId themeAssignment.subThemes.categoryId themeAssignment.customTags " +
      "ageRatingCategoryId language " +
      "stats.viewsCount stats.likesCount stats.averageRating stats.followersCount stats.lastPublishedEpisodeAt stats.totalWords " +
      "monetizationSettings.activePromotion monetizationSettings.defaultEpisodePriceCoins " +
      "totalEpisodesCount publishedEpisodesCount author lastContentUpdatedAt";

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
    const novelsQuery = NovelModel
      .find(searchCriteria)
      .populate<{ author: SearchedNovelResult["author"] }>({
        path: "author",
        model: UserModel,
        select: "username profile.displayName profile.penName profile.avatarUrl", // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï fields
      })
      .populate<{ mainThemeCategory: SearchedNovelResult["mainThemeCategory"] }>({
        path: "themeAssignment.mainTheme.categoryId",
        model: CategoryModel,
        select: "_id name slug", // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      })
      .populate<{ subThemeCategories: SearchedNovelResult["subThemeCategories"] }>({
        path: "themeAssignment.subThemes.categoryId",
        model: CategoryModel,
        select: "_id name slug",
      })
      .populate<{ ageRatingCategory: SearchedNovelResult["ageRatingCategory"] }>({
        path: "ageRatingCategoryId",
        model: CategoryModel,
        select: "_id name slug",
      })
      .populate<{ languageCategory: SearchedNovelResult["languageCategory"] }>({
        path: "language",
        model: CategoryModel,
        select: "_id name slug",
      })
      .select(selectedFields + (query && sort === "relevance" ? " score" : "")) // ‡πÄ‡∏û‡∏¥‡πà‡∏° score ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ search
      .sort(sortOptions)
      .skip(skip)
      .limit(limit)
      .lean(); // ‡πÉ‡∏ä‡πâ .lean()

    const rawNovels = await novelsQuery;

    // Map ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì currentEpisodePriceCoins
    const novels: SearchedNovelResult[] = rawNovels.map((novel: any) => {
        const now = new Date();
        const promo = novel.monetizationSettings?.activePromotion;
        let currentPrice = novel.monetizationSettings?.defaultEpisodePriceCoins ?? 0;
        if (
            promo &&
            promo.isActive &&
            promo.promotionalPriceCoins !== undefined &&
            (!promo.promotionStartDate || new Date(promo.promotionStartDate) <= now) &&
            (!promo.promotionEndDate || new Date(promo.promotionEndDate) >= now)
        ) {
            currentPrice = promo.promotionalPriceCoins;
        }
        return {
            ...novel,
            _id: novel._id.toString(),
            author: novel.author,
            coverImageUrl: novel.coverImageUrl,
            synopsis: novel.synopsis,
            status: novel.status,
            ageRatingCategory: novel.ageRatingCategory,
            customTags: novel.themeAssignment?.customTags,
            mainThemeCategory: novel.mainThemeCategory,
            subThemeCategories: novel.subThemeCategories,
            languageCategory: novel.languageCategory,
            stats: novel.stats,
            monetizationSettings: novel.monetizationSettings,
            currentEpisodePriceCoins: currentPrice,
            totalEpisodesCount: novel.totalEpisodesCount,
            publishedEpisodesCount: novel.publishedEpisodesCount,
            lastContentUpdatedAt: novel.lastContentUpdatedAt,
            score: novel.score
        };
    });


    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    const total = await NovelModel.countDocuments(searchCriteria);

    console.log(`‚úÖ Found ${novels.length} novels matching query (total: ${total})`);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    let mainThemeCategoryData = null;
    if (mainThemeId) {
      mainThemeCategoryData = await CategoryModel.findById(mainThemeId).select("name slug description coverImageUrl color").lean(); //
    }
    let subThemeCategoryData = null;
    if (subThemeId) {
      subThemeCategoryData = await CategoryModel.findById(subThemeId).select("name slug description color").lean(); //
    }

    // ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á)
    let relatedTagsResult: {tag: string, count: number}[] = [];
    if (novels.length > 0) {
      const tagFrequency: Record<string, number> = {};
      novels.forEach((novelDoc: SearchedNovelResult) => {
        novelDoc.customTags?.forEach((tag: string) => { // ‡πÉ‡∏ä‡πâ customTags
          if (!tagQuery.includes(tag)) { // ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
            tagFrequency[tag] = (tagFrequency[tag] || 0) + 1;
          }
        });
      });
      relatedTagsResult = Object.entries(tagFrequency)
        .sort((a, b) => b[1] - a[1]) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà
        .slice(0, 10) // ‡πÄ‡∏≠‡∏≤ 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
        .map(entry => ({ tag: entry[0], count: entry[1] }));
    }

    return NextResponse.json(
      {
        novels,
        mainThemeCategory: mainThemeCategoryData, // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        subThemeCategory: subThemeCategoryData,   // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        relatedTags: relatedTagsResult,
        pagination: {
          total,
          page,
          limit,
          totalPages: Math.ceil(total / limit),
        },
      },
      { status: 200 }
    );
  } catch (error: any) {
    console.error(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢:`, error.message, error.stack);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢", details: error.message },
      { status: 500 }
    );
  }
}