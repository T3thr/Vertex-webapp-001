// src/app/api/auth/signup/route.ts
// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ Credentials-based authentication
// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô User collection (‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
// API ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ verify reCAPTCHA token ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏±‡∏ö Google
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ UserModel ‡πÅ‡∏ö‡∏ö Monolithic, ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á default values ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IUser

import { NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
import UserModel, { IUser, IAccount, IUserProfile } from "@/backend/models/User"; // Import IUser ‡πÅ‡∏•‡∏∞ Sub-interfaces ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
import { sendVerificationEmail } from "@/backend/services/sendemail"; // << ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ generateVerificationToken ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô User model method ‡πÅ‡∏•‡πâ‡∏ß
import { validateEmail, validatePassword, validateUsername } from "@/backend/utils/validation"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
import { Types } from "mongoose";

interface SignUpRequestBody {
  email: string;
  username: string;
  password: string;
  recaptchaToken: string;
}

interface RecaptchaResponseFromGoogle {
  success: boolean;
  challenge_ts?: string;
  hostname?: string;
  "error-codes"?: string[];
}

export async function POST(request: Request): Promise<NextResponse> {
  console.log("üîµ [Signup API] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å...");
  try {
    await dbConnect();
    console.log("‚úÖ [Signup API] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    let body: SignUpRequestBody;
    try {
      body = await request.json();
      console.log(`‚ÑπÔ∏è [Signup API] Body ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:`, {
        email: body.email,
        username: body.username,
        password: body.password ? '[‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô]' : '[‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô]',
        recaptchaToken: body.recaptchaToken ? `${body.recaptchaToken.substring(0, 15)}...` : '[‡πÑ‡∏°‡πà‡∏°‡∏µ token]'
      });
    } catch (jsonError: any) {
      console.error("‚ùå [Signup API] JSON parse error:", jsonError.message);
      return NextResponse.json(
        { error: `‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${jsonError.message}`, success: false },
        { status: 400 }
      );
    }

    const { email, username, password, recaptchaToken } = body;

    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!email || !username || !password || !recaptchaToken) {
      const missingFields = [];
      if (!email) missingFields.push("‡∏≠‡∏µ‡πÄ‡∏°‡∏•");
      if (!username) missingFields.push("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
      if (!password) missingFields.push("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô");
      if (!recaptchaToken) missingFields.push("reCAPTCHA token");
      console.error(`‚ùå [Signup API] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ${missingFields.join(", ")}`);
      return NextResponse.json(
        { error: `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ${missingFields.join(", ")}`, success: false },
        { status: 400 }
      );
    }

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!validateEmail(email)) {
      console.error(`‚ùå [Signup API] ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${email}`);
      return NextResponse.json({ error: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", success: false }, { status: 400 });
    }
    const usernameValidation = validateUsername(username);
    if (!usernameValidation.valid) {
      console.error(`‚ùå [Signup API] ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${username}, ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${usernameValidation.message}`);
      return NextResponse.json(
        { error: usernameValidation.message || "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢", success: false },
        { status: 400 }
      );
    }
    const passwordValidation = validatePassword(password);
    if (!passwordValidation.valid) {
      console.error(`‚ùå [Signup API] ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${passwordValidation.message}`);
      return NextResponse.json(
        { error: passwordValidation.message || "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", success: false },
        { status: 400 }
      );
    }

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reCAPTCHA Token
    const secretKey = process.env.RECAPTCHA_SECRET_KEY;
    if (!secretKey) {
      console.error("‚ùå [Signup API] RECAPTCHA_SECRET_KEY ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤");
      return NextResponse.json(
        { error: "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ reCAPTCHA ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (SK missing)", success: false },
        { status: 500 }
      );
    }
    const verificationUrl = `https://www.google.com/recaptcha/api/siteverify?secret=${secretKey}&response=${recaptchaToken}`;
    console.log("üîÑ [Signup API] ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reCAPTCHA ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google...");
    const googleResponse = await fetch(verificationUrl, { method: "POST" });
    const googleRecaptchaData: RecaptchaResponseFromGoogle = await googleResponse.json();
    console.log(`‚ÑπÔ∏è [Signup API] ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Google reCAPTCHA:`, googleRecaptchaData);

    if (!googleRecaptchaData.success) {
      console.warn(`‚ùå [Signup API] ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:`, googleRecaptchaData["error-codes"]);
      return NextResponse.json(
        { success: false, error: "‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", "error-codes": googleRecaptchaData["error-codes"] || [] },
        { status: 400 }
      );
    }
    console.log(`‚úÖ [Signup API] reCAPTCHA ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô`);

    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô UserModel (‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß)
    const lowerCaseEmail = email.toLowerCase();
    console.log(`üîç [Signup API] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥: email=${lowerCaseEmail}, username=${username}`);
    const existingUser = await UserModel.findOne({
      $or: [{ email: lowerCaseEmail }, { username: username }],
    }).lean();

    if (existingUser) {
      let conflictField = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
      if (existingUser.email === lowerCaseEmail) conflictField = "‡∏≠‡∏µ‡πÄ‡∏°‡∏•";
      else if (existingUser.username === username) conflictField = "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ";
      console.error(`‚ùå [Signup API] ${conflictField} '${conflictField === "‡∏≠‡∏µ‡πÄ‡∏°‡∏•" ? lowerCaseEmail : username}' ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß`);
      return NextResponse.json(
        { error: `${conflictField} ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß`, success: false },
        { status: 409 } // Conflict
      );
    }

    // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
    // ‡∏Å‡∏≤‡∏£ hash password ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢ pre-save hook ‡πÉ‡∏ô UserSchema ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤
    // ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á emailVerificationToken ‡πÅ‡∏•‡∏∞ expiry ‡∏Å‡πá‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢ method ‡πÉ‡∏ô UserSchema
    console.log("üîÑ [Signup API] ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà...");
    const newUser = new UserModel({
      username: username,
      email: lowerCaseEmail,
      password: password, // Password ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å hash ‡πÇ‡∏î‡∏¢ pre-save hook
      accounts: [{ // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó credentials
        provider: "credentials",
        providerAccountId: new Types.ObjectId().toString(), // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÉ‡∏ä‡πâ _id ‡∏Ç‡∏≠‡∏á user ‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á save
        type: "credentials",
      } as IAccount],
      roles: ["Reader"], // ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      isEmailVerified: false,
      isActive: true, // ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ active ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      isBanned: false,
      profile: { // Default profile values (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å IUserProfile)
        displayName: username, // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ displayName ‡πÄ‡∏õ‡πá‡∏ô username
        // avatarUrl, coverImageUrl, bio, gender, etc. ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô undefined ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤ default ‡∏à‡∏≤‡∏Å schema
      } as IUserProfile, // Cast ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
      writerStats: undefined, // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ writerStats
      trackingStats: { // Default trackingStats (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å IUserTrackingStats)
        joinDate: new Date(),
        totalLoginDays: 0,
        totalNovelsRead: 0,
        totalEpisodesRead: 0,
        totalTimeSpentReadingSeconds: 0,
        totalCoinSpent: 0,
        totalRealMoneySpent: 0,
      },
      socialStats: { // Default socialStats (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å IUserSocialStats)
        followersCount: 0,
        followingCount: 0,
        novelsCreatedCount: 0,
        commentsMadeCount: 0,
        ratingsGivenCount: 0,
        likesGivenCount: 0,
      },
      preferences: { // Default preferences (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å IUserPreferences ‡πÅ‡∏•‡∏∞ Sub-interfaces)
        language: "th",
        display: {
          theme: "system",
          reading: { fontSize: "medium", readingModeLayout: "scrolling", lineHeight: 1.6, textAlignment: "left" },
          accessibility: { dyslexiaFriendlyFont: false, highContrastMode: false },
        },
        notifications: {
          masterNotificationsEnabled: true,
          email: { enabled: true, newsletter: true, novelUpdatesFromFollowing:true, newFollowers:true, commentsOnMyNovels:true, repliesToMyComments:true, donationAlerts:true, systemAnnouncements:true, securityAlerts:true, promotionalOffers:false, achievementUnlocks:true },
          push: { enabled: true, novelUpdatesFromFollowing:true, newFollowers:true, commentsOnMyNovels:true, repliesToMyComments:true, donationAlerts:true, systemAnnouncements:true, securityAlerts:true, promotionalOffers:false, achievementUnlocks:true },
          inApp: { enabled: true, novelUpdatesFromFollowing:true, newFollowers:true, commentsOnMyNovels:true, repliesToMyComments:true, donationAlerts:true, systemAnnouncements:true, securityAlerts:true, promotionalOffers:false, achievementUnlocks:true },
        },
        contentAndPrivacy: {
          showMatureContent: false,
          preferredGenres: [],
          profileVisibility: "public",
          readingHistoryVisibility: "followers_only",
          showActivityStatus: true,
          allowDirectMessagesFrom: "followers",
          analyticsConsent: { allowPsychologicalAnalysis: false, allowPersonalizedFeedback: false },
        },
        visualNovelGameplay: { // Default Visual Novel Gameplay Preferences
            textSpeed: "normal", autoPlayMode: "click", autoPlayDelayMs:1500, skipUnreadText: false,
            transitionsEnabled: true, screenEffectsEnabled: true, textWindowOpacity: 0.8,
            masterVolume: 1.0, bgmVolume: 0.7, sfxVolume: 0.8, voiceVolume: 1.0,
            voicesEnabled: true, preferredVoiceLanguage: "original", showChoiceTimer: true,
            blurThumbnailsOfMatureContent: true, preferredArtStyles: [], preferredGameplayMechanics: [],
            assetPreloading: "essential", characterAnimationLevel: "full"
        },
      },
      wallet: { // Default wallet (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å IUserWallet)
        coinBalance: 0,
      },
      gamification: { // Default gamification (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å IUserGamification)
        level: 1,
        currentLevelObject: null, // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å set ‡πÇ‡∏î‡∏¢ pre-save hook ‡∏ñ‡πâ‡∏≤ Level 1 ‡∏°‡∏µ‡πÉ‡∏ô DB
        experiencePoints: 0,
        totalExperiencePointsEverEarned: 0,
        nextLevelXPThreshold: 100, // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô, pre-save hook ‡∏≠‡∏≤‡∏à‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å Level model
        achievements: [],
        showcasedItems: [],
        loginStreaks: { currentStreakDays: 0, longestStreakDays: 0 }, // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà login
        dailyCheckIn: { currentStreakDays: 0 },
        lastActivityAt: new Date(),
      },
      verification: { kycStatus: "none" }, // Default verification
      donationSettings: { isEligibleForDonation: false }, // Default donation settings
      securitySettings: { // Default security settings
        twoFactorAuthentication: { isEnabled: false },
        loginAttempts: { count: 0 },
        activeSessions: [],
      },
      // mentalWellbeingInsights ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô undefined ‡∏´‡∏£‡∏∑‡∏≠ default ‡∏à‡∏≤‡∏Å schema
    });

    // 5.1 ‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡πà‡∏≤‡∏ô method ‡∏Ç‡∏≠‡∏á user instance
    const verificationTokenPlain = newUser.generateEmailVerificationToken(); // Method ‡∏ô‡∏µ‡πâ‡∏à‡∏∞ set hashed token ‡πÅ‡∏•‡∏∞ expiry ‡πÉ‡∏ô newUser ‡∏î‡πâ‡∏ß‡∏¢

    // 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞ trigger pre-save hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hashing password ‡πÅ‡∏•‡∏∞ gamification level)
    await newUser.save();
    console.log(`‚úÖ [Signup API] ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (ID: ${newUser._id}), username: ${newUser.username}, email: ${newUser.email}`);

    // 7. ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    try {
      await sendVerificationEmail(newUser.email as string, verificationTokenPlain); // ‡∏™‡πà‡∏á plain token ‡πÑ‡∏õ‡πÉ‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      console.log(`‚úÖ [Signup API] ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${newUser.email} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    } catch (emailError: any) {
      console.error("‚ùå [Signup API] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ:", emailError.message);
      // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      return NextResponse.json(
        {
          success: true,
          message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏Ç‡∏≠‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö",
          userId: newUser._id.toString(),
        },
        { status: 201 } // Created, but with a warning for the client
      );
    }

    return NextResponse.json(
      {
        success: true,
        message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ",
        userId: newUser._id.toString(),
      },
      { status: 201 }
    );

  } catch (error: any) {
    console.error("‚ùå [Signup API] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î:", error.message || error);
    let errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å";
    let status = 500;

    if (error.code === 11000) { // MongoDB duplicate key
      const field = Object.keys(error.keyValue)[0];
      errorMessage = `${field === "email" ? "‡∏≠‡∏µ‡πÄ‡∏°‡∏•" : (field === "username" ? "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" : `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '${field}'`)} ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß`;
      status = 409; // Conflict
    } else if (error.name === "ValidationError") { // Mongoose validation error
      const errors = Object.values(error.errors).map((e: any) => e.message);
      errorMessage = `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${errors.join(", ")}`;
      status = 400; // Bad Request
    } else if (error.message) {
      errorMessage = error.message;
    }

    return NextResponse.json({ error: errorMessage, success: false }, { status });
  }
}