// src/app/api/auth/signup/route.ts
// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ Credentials-based authentication
// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô User collection ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
// API ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ verify reCAPTCHA token ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏±‡∏ö Google (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ‡πÄ‡∏û‡∏¥‡πà‡∏° console log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£ parse JSON

import { NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb";
import UserModel from "@/backend/models/User";
import SocialMediaUserModel from "@/backend/models/SocialMediaUserhaha"; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ model ‡∏ô‡∏µ‡πâ
import { sendVerificationEmail, generateVerificationToken } from "@/backend/services/sendemail"; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ services ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ
import { validateEmail, validatePassword, validateUsername } from "@/backend/utils/validation"; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ utils ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ

interface SignUpRequestBody {
  email: string;
  username: string;
  password: string;
  recaptchaToken: string; // Token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å client-side reCAPTCHA
}

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Google reCAPTCHA API
interface RecaptchaResponseFromGoogle {
  success: boolean;
  challenge_ts?: string; // Timestamp ‡∏Ç‡∏≠‡∏á challenge load (ISO format yyyy-MM-dd'T'HH:mm:ssZZ)
  hostname?: string;     // Hostname ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà reCAPTCHA ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  "error-codes"?: string[]; // Optional array ‡∏Ç‡∏≠‡∏á error codes
  // score?: number;      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reCAPTCHA v3
  // action?: string;     // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reCAPTCHA v3
}

export async function POST(request: Request): Promise<NextResponse> {
  console.log("üîµ [Signup API] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å...");
  try {
    await dbConnect();
    console.log("‚úÖ [Signup API] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    let body: SignUpRequestBody;
    try {
      body = await request.json();
      console.log(`‚ÑπÔ∏è [Signup API] Body ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:`, {
        email: body.email,
        username: body.username,
        password: body.password ? '[‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô]' : '[‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô]',
        recaptchaToken: body.recaptchaToken ? `${body.recaptchaToken.substring(0, 15)}...` : '‡πÑ‡∏°‡πà‡∏°‡∏µ token'
      });
    } catch (jsonError: any) {
      console.error("‚ùå [Signup API] JSON parse error:", jsonError.message);
      return NextResponse.json(
        { error: `‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${jsonError.message}`, success: false },
        { status: 400 }
      );
    }

    const { email, username, password, recaptchaToken } = body;

    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!email || !username || !password || !recaptchaToken) {
      const missingFields = [];
      if (!email) missingFields.push("‡∏≠‡∏µ‡πÄ‡∏°‡∏•");
      if (!username) missingFields.push("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
      if (!password) missingFields.push("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô");
      if (!recaptchaToken) missingFields.push("reCAPTCHA token"); // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å
      console.error(`‚ùå [Signup API] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ${missingFields.join(", ")}`);
      return NextResponse.json(
        { error: `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ${missingFields.join(", ")}`, success: false },
        { status: 400 }
      );
    }

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (email, username, password)
    if (!validateEmail(email)) {
      console.error(`‚ùå [Signup API] ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${email}`);
      return NextResponse.json({ error: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", success: false }, { status: 400 });
    }

    const usernameValidation = validateUsername(username);
    if (!usernameValidation.valid) {
      console.error(`‚ùå [Signup API] ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${username}, ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${usernameValidation.message}`);
      return NextResponse.json(
        { error: usernameValidation.message || "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", success: false },
        { status: 400 }
      );
    }

    const passwordValidation = validatePassword(password);
    if (!passwordValidation.valid) {
      console.error(`‚ùå [Signup API] ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${passwordValidation.message}`);
      return NextResponse.json(
        { error: passwordValidation.message || "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", success: false },
        { status: 400 }
      );
    }

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reCAPTCHA Token ‡∏Å‡∏±‡∏ö Google (‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    const secretKey = process.env.RECAPTCHA_SECRET_KEY;
    console.log(`‚ÑπÔ∏è [Signup API] RECAPTCHA_SECRET_KEY: ${secretKey ? '‡∏°‡∏µ' : '‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    if (!secretKey) {
      console.error("‚ùå [Signup API] RECAPTCHA_SECRET_KEY ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Environment Variables");
      return NextResponse.json(
        { error: "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ reCAPTCHA ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (SK missing)", success: false },
        { status: 500 } // Server configuration error
      );
    }

    const verificationUrl = "https://www.google.com/recaptcha/api/siteverify";
    const params = new URLSearchParams({
        secret: secretKey,
        response: recaptchaToken,
        // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° IP ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£) ‡∏î‡πâ‡∏ß‡∏¢ request.headers.get('x-forwarded-for') ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤
        // remoteip: request.headers.get('x-forwarded-for')?.split(',')[0].trim() || ''
    });

    console.log("üîÑ [Signup API] ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reCAPTCHA ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google...");
    const googleResponse = await fetch(verificationUrl, {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: params.toString(),
    });

    const googleRecaptchaData: RecaptchaResponseFromGoogle = await googleResponse.json();
    console.log(`‚ÑπÔ∏è [Signup API] ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Google reCAPTCHA:`, googleRecaptchaData);

    if (!googleRecaptchaData.success) {
      console.warn(`‚ùå [Signup API] ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏à‡∏≤‡∏Å Google:`, {
        success: googleRecaptchaData.success,
        errorCodes: googleRecaptchaData["error-codes"]?.join(", ") || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        hostname: googleRecaptchaData.hostname,
      });
      let userFriendlyError = "‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß";
      if (googleRecaptchaData["error-codes"]?.includes("timeout-or-duplicate")) {
        userFriendlyError = "‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà";
      } else if (googleRecaptchaData["error-codes"]?.includes("invalid-input-response")) {
        userFriendlyError = "‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô reCAPTCHA ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
      } else if (googleRecaptchaData["error-codes"]?.includes("bad-request")) {
        userFriendlyError = "‡∏Ñ‡∏≥‡∏Ç‡∏≠ reCAPTCHA ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
      } // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° error codes ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ç‡∏≠‡∏á Google

      return NextResponse.json(
        { success: false, error: userFriendlyError, "error-codes": googleRecaptchaData["error-codes"] || [] },
        { status: 400 } // Bad Request ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å reCAPTCHA ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
      );
    }
    console.log(`‚úÖ [Signup API] reCAPTCHA ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô, Hostname: ${googleRecaptchaData.hostname}, Timestamp: ${googleRecaptchaData.challenge_ts}`);

    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const lowerCaseEmail = email.toLowerCase();
    const User = UserModel(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á User model
    const SocialMediaUser = SocialMediaUserModel(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á SocialMediaUser model

    console.log(`üîç [Signup API] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥: email=${lowerCaseEmail}, username=${username}`);
    const existingUserInUsers = await User.findOne({
      $or: [{ email: lowerCaseEmail }, { username: username }], // ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ username ‡πÅ‡∏ö‡∏ö case-insensitive ‡∏î‡πâ‡∏ß‡∏¢‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    }).lean(); // .lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠ performance ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Mongoose document methods

    const existingUserInSocialMediaUsers = await SocialMediaUser.findOne({
      $or: [{ email: lowerCaseEmail }, { username: username }],
    }).lean();

    if (existingUserInUsers || existingUserInSocialMediaUsers) {
      let conflictField = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
      if ((existingUserInUsers?.email === lowerCaseEmail) || (existingUserInSocialMediaUsers?.email === lowerCaseEmail)) {
        conflictField = "‡∏≠‡∏µ‡πÄ‡∏°‡∏•";
      } else if ((existingUserInUsers?.username === username) || (existingUserInSocialMediaUsers?.username === username)) {
        // ‡∏´‡∏≤‡∏Å username ‡πÉ‡∏ô DB ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ö‡∏ö case-sensitive, ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ case-insensitive, query ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ $regex ‡∏´‡∏£‡∏∑‡∏≠ collation
        conflictField = "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ";
      }
      console.error(`‚ùå [Signup API] ${conflictField} '${conflictField === "‡∏≠‡∏µ‡πÄ‡∏°‡∏•" ? lowerCaseEmail : username}' ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß`);
      return NextResponse.json(
        { error: `${conflictField} ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß`, success: false },
        { status: 409 } // Conflict
      );
    }

    // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    console.log("üîÑ [Signup API] ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•...");
    const { token: verificationToken, hashedToken: hashedVerificationToken, expiry: verificationTokenExpiry } = generateVerificationToken();

    // 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ hash password, ‡∏Ñ‡∏ß‡∏£ hash ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)
    console.log("üîÑ [Signup API] ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô User collection...");
    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£ hash password ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡πÉ‡∏ô model pre-save hook ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á instance
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ model ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ hash password ‡πÄ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ hash ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡∏ô‡∏µ‡πâ
    const newUser = new User({
      email: lowerCaseEmail,
      username,
      password, // << ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: Password ‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏π‡∏Å HASH ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB !!!
      role: "Reader", // ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤ default ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
      isEmailVerified: false,
      emailVerificationToken: hashedVerificationToken,
      emailVerificationTokenExpiry: verificationTokenExpiry,
      isActive: true, // ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ active ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà verify email
      isBanned: false,
      profile: {
        displayName: username,
        // photoURL: '', // default or leave empty
        // bio: '',
      },
      trackingStats: {
        totalLoginDays: 0,
        totalNovelsRead: 0,
        totalEpisodesRead: 0,
        totalCoinSpent: 0,
        totalRealMoneySpent: 0,
        joinDate: new Date(),
        // lastLoginDate: null,
      },
      socialStats: {
        followersCount: 0,
        followingCount: 0,
        novelsCreatedCount: 0,
        commentsMadeCount: 0,
        ratingsGivenCount: 0,
        likesGivenCount: 0,
      },
      preferences: {
        language: "th", // default
        theme: "system", // default
        notifications: { email: true, push: true, novelUpdates: true, comments: true, donations: true, newFollowers: true, systemAnnouncements: true },
        contentFilters: { showMatureContent: false, blockedGenres: [], blockedTags: [] },
        privacy: { showActivityStatus: true, profileVisibility: "public", readingHistoryVisibility: "followersOnly" },
      },
      wallet: {
        coinBalance: 0,
        // transactionHistory: [],
      },
      gamification: {
        level: 1,
        experiencePoints: 0,
        achievements: [],
        badges: [],
        streaks: { currentLoginStreak: 0, longestLoginStreak: 0 },
        dailyCheckIn: { currentStreak: 0 /* lastCheckInDate: null */ }
      },
      // writerDetails: { isVerifiedWriter: false, penName: '', status: 'none' },
      writerVerification: { status: "none" }, // 'none', 'pending', 'approved', 'rejected'
      donationSettings: { isDonationEnabled: false /* paypalAddress: '' */ },
      joinedAt: new Date(),
      // ... other fields from your schema
    });

    await newUser.save();
    console.log(`‚úÖ [Signup API] ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•): ${username} (${lowerCaseEmail})`);

    // 7. ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    try {
      await sendVerificationEmail(lowerCaseEmail, verificationToken);
      console.log(`‚úÖ [Signup API] ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${lowerCaseEmail} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    } catch (emailError: unknown) {
      console.error("‚ùå [Signup API] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ:", emailError);
      // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏•‡πÑ‡∏Å‡πÉ‡∏´‡πâ‡∏Ç‡∏≠‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
      return NextResponse.json(
        {
          success: true, // ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
          message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏Ç‡∏≠‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•",
          userId: newUser._id // ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á user id ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ client ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        },
        { status: 201 } // Created, but with a warning
      );
    }

    return NextResponse.json(
      { success: true, message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", userId: newUser._id },
      { status: 201 } // Created
    );

  } catch (error: unknown) {
    console.error("‚ùå [Signup API] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î:", error);
    let errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å";
    let status = 500;

    if (error instanceof Error) {
      // @ts-expect-error MongoDB duplicate key error
      if (error.code === 11000) {
        // @ts-expect-error Accessing keyValue
        const field = Object.keys(error.keyValue)[0];
        // @ts-expect-error Accessing keyValue[field]
        const value = error.keyValue[field];
        errorMessage = `${field === "email" ? "‡∏≠‡∏µ‡πÄ‡∏°‡∏•" : (field === "username" ? "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" : `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '${field}'`)} '${value}' ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß`;
        status = 409; // Conflict

      } else if (error.name === "ValidationError") {
        // @ts-expect-error Accessing errors
        const errors = Object.values(error.errors).map((e: any) => e.message);
        errorMessage = `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${errors.join(", ")}`;
        status = 400; // Bad Request
      } else {
        errorMessage = error.message;
      }
    } else if (typeof error === 'string') {
      errorMessage = error;
    }
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SyntaxError ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON parsing ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
    if (error instanceof SyntaxError && error.message.includes("JSON")) {
      errorMessage = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)";
      status = 400;
    }

    return NextResponse.json(
      { error: errorMessage, success: false },
      { status }
    );
  }
}