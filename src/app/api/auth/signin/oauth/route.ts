// src/app/api/auth/signin/oauth/route.ts
// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö/‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡πà‡∏≤‡∏ô OAuth providers (Google, Twitter, etc.)
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö UserModel ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô User collection ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Type ‡∏Ç‡∏≠‡∏á Subdocument ‡πÅ‡∏•‡∏∞ Default values ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Nested Objects

import { NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb";
import UserModel, {
  IUser,
  IAccount,
  IUserProfile,
  IUserTrackingStats,
  IUserSocialStats,
  IUserPreferences,
  IUserWallet,
  IUserGamification,
  IUserVerification,
  IUserDonationSettings,
  IUserSecuritySettings,
  IMentalWellbeingInsights,
  INotificationChannelSettings,
  IUserDisplayPreferences,
  IUserContentPrivacyPreferences,
  IVisualNovelGameplayPreferences,
  IUserAnalyticsConsent,
  IUserReadingDisplayPreferences,
  IUserAccessibilityDisplayPreferences,
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° sub-interfaces ‡∏Ç‡∏≠‡∏á gamification ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  IShowcasedGamificationItem,
  IUserDisplayBadge,
} from "@/backend/models/User"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ path ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞ import ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
import { Types, Document } from "mongoose";

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Request Body ‡∏à‡∏≤‡∏Å NextAuth JWT Callback (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
interface OAuthSignInRequestBody {
  provider: string;
  providerAccountId: string;
  email?: string | null;
  name?: string | null;
  usernameSuggestion?: string | null;
  picture?: string | null;
}

// --- ƒê·ªãnh nghƒ©a Type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Response ---
// 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IUser ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Plain Object (‡πÑ‡∏°‡πà‡∏°‡∏µ Mongoose Document methods/properties)
// ‡πÅ‡∏•‡∏∞ Omit '_id' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô string ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
type PlainUserObjectData = Omit<
  IUser,
  keyof Document | // Omit standard Mongoose Document properties like save(), model(), etc.
  '_id' | // Omit original _id which is Types.ObjectId
  'matchPassword' | // Omit custom methods
  'generateEmailVerificationToken' |
  'generatePasswordResetToken'
>;

// 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User Response ‡∏ó‡∏µ‡πà‡∏°‡∏µ _id ‡πÄ‡∏õ‡πá‡∏ô string
// ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ sub-documents ‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô plain objects ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
// ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ toObject() ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡πà Type ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
type OAuthSignInResponseUser = PlainUserObjectData & {
  _id: string; // _id ‡πÉ‡∏ô response ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô string
  // ‡∏´‡∏≤‡∏Å sub-documents ‡πÄ‡∏ä‡πà‡∏ô 'accounts' ‡∏°‡∏µ _id ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏ô response
  // ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ ‡πÅ‡∏ï‡πà IAccount ‡πÉ‡∏ô User.ts ‡∏°‡∏µ _id: false ‡∏ã‡∏∂‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ _id field
  // ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô accounts: IAccount[] (‡∏ó‡∏µ‡πà IAccount ‡πÄ‡∏õ‡πá‡∏ô plain interface) ‡∏Å‡πá‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
  accounts: IAccount[]; // IUser.accounts ‡πÄ‡∏õ‡πá‡∏ô Types.DocumentArray<IAccount>, toObject() ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ IAccount[]
  // ‡∏´‡∏≤‡∏Å IUserProfile ‡∏´‡∏£‡∏∑‡∏≠ interface ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô IUser ‡∏°‡∏µ method ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô Mongoose subdocument instance
  // ‡∏Å‡∏≤‡∏£ cast ‡∏´‡∏£‡∏∑‡∏≠ toObject() ‡∏ã‡πâ‡∏≠‡∏ô‡∏≠‡∏≤‡∏à‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡πÅ‡∏ï‡πà‡∏à‡∏≤‡∏Å User.ts ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏õ‡πá‡∏ô plain interfaces
};


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á username ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
async function generateUniqueUsername(baseUsername: string): Promise<string> {
  let currentUsername = baseUsername.toLowerCase().replace(/[^a-z0-9_.]/g, "").substring(0, 40);
  if (currentUsername.length < 3) {
    currentUsername = `${currentUsername}${Math.random().toString(36).substring(2, 5)}`;
  }
  currentUsername = currentUsername.substring(0, 50);

  let counter = 0;
  let uniqueUsername = currentUsername;

  // eslint-disable-next-line no-constant-condition
  while (true) {
    const existingUser = await UserModel.findOne({ username: uniqueUsername }).lean();
    if (!existingUser) {
      break;
    }
    counter++;
    const baseForNew = currentUsername.substring(0, 50 - (String(counter).length + 1));
    uniqueUsername = `${baseForNew}_${counter}`;
    if (uniqueUsername.length > 50) { // Fallback ‡∏´‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        uniqueUsername = `user_${Date.now().toString().slice(-7)}_${counter}`;
    }
  }
  return uniqueUsername;
}

// Helper function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á default notification settings (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏° IUser)
function createDefaultNotificationChannelSettings(): INotificationChannelSettings {
    return {
        enabled: true,
        newsletter: true, // ‡∏´‡∏£‡∏∑‡∏≠ false ‡∏ï‡∏≤‡∏° default ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        novelUpdatesFromFollowing: true,
        newFollowers: true,
        commentsOnMyNovels: true,
        repliesToMyComments: true,
        donationAlerts: true,
        systemAnnouncements: true,
        securityAlerts: true, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        promotionalOffers: false, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        achievementUnlocks: true, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    };
}

export async function POST(request: Request): Promise<NextResponse> {
  let wasNewlyCreated = false; // Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  await dbConnect();
  console.log("üîµ [API:OAuthSignIn] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

  try {
    const body = (await request.json()) as OAuthSignInRequestBody;
    const { provider, providerAccountId, email, name, usernameSuggestion, picture } = body;

    console.log(`‚ÑπÔ∏è [API:OAuthSignIn] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö request ‡∏à‡∏≤‡∏Å provider: ${provider}, providerAccountId: ${providerAccountId}, email: ${email}`);

    if (!provider || !providerAccountId) {
      console.error("‚ùå [API:OAuthSignIn] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: provider ‡∏´‡∏£‡∏∑‡∏≠ providerAccountId ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤");
      return NextResponse.json(
        { error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Provider ‡∏´‡∏£‡∏∑‡∏≠ Provider Account ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
        { status: 400 }
      );
    }
     // Twitter ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ email, ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô provider ‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ email ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ name/usernameSuggestion ‡∏Å‡πá‡∏à‡∏∞‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!email && !usernameSuggestion && !name && provider !== "twitter") {
        console.error("‚ùå [API:OAuthSignIn] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ email ‡∏´‡∏£‡∏∑‡∏≠ name/usernameSuggestion)");
        return NextResponse.json(
          { error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Provider ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ email ‡∏´‡∏£‡∏∑‡∏≠ name)" },
          { status: 400 }
        );
    }


    let userDocument: (IUser & { _id: Types.ObjectId }) | null = await UserModel.findOne({
      "accounts.provider": provider,
      "accounts.providerAccountId": providerAccountId,
    });

    if (userDocument) {
      console.log(`‚úÖ [API:OAuthSignIn] ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢ ${provider} ID: ${providerAccountId} (Username: ${userDocument.username})`);

      if (!userDocument.isActive) {
        console.warn(`‚ö†Ô∏è [API:OAuthSignIn] ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (‡πÄ‡∏î‡∏¥‡∏°) ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${userDocument.username}`);
        return NextResponse.json({ error: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" }, { status: 403 });
      }
      if (userDocument.isBanned) {
        const banMessage = userDocument.bannedUntil ? `‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏ñ‡∏∂‡∏á ${new Date(userDocument.bannedUntil).toLocaleString("th-TH")}` : "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£";
        console.warn(`‚ö†Ô∏è [API:OAuthSignIn] ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (‡πÄ‡∏î‡∏¥‡∏°) ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô: ${userDocument.username}`);
        return NextResponse.json({ error: banMessage, banReason: userDocument.banReason }, { status: 403 });
      }

      let updated = false;
      if (email && userDocument.email !== email.toLowerCase()) {
        if (!userDocument.email || !userDocument.isEmailVerified) { // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ñ‡πâ‡∏≤ email ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà verified
            const existingEmailUser = await UserModel.findOne({ email: email.toLowerCase(), _id: { $ne: userDocument._id } });
            if (!existingEmailUser) {
                userDocument.email = email.toLowerCase();
                userDocument.isEmailVerified = true;
                userDocument.emailVerifiedAt = new Date();
                updated = true;
                console.log(`üîÑ [API:OAuthSignIn] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userDocument.username} ‡πÄ‡∏õ‡πá‡∏ô ${email}`);
            } else {
                console.warn(`‚ö†Ô∏è [API:OAuthSignIn] ‡∏≠‡∏µ‡πÄ‡∏°‡∏• ${email} ‡∏à‡∏≤‡∏Å ${provider} ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏∑‡πà‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ`);
            }
        }
      } else if (email && !userDocument.email) {
         const existingEmailUser = await UserModel.findOne({ email: email.toLowerCase(), _id: { $ne: userDocument._id } });
        if (!existingEmailUser) {
            userDocument.email = email.toLowerCase();
            userDocument.isEmailVerified = true;
            userDocument.emailVerifiedAt = new Date();
            updated = true;
            console.log(`‚ûï [API:OAuthSignIn] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡πÄ‡∏°‡∏• ${email} ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userDocument.username}`);
        } else {
            console.warn(`‚ö†Ô∏è [API:OAuthSignIn] ‡∏≠‡∏µ‡πÄ‡∏°‡∏• ${email} ‡∏à‡∏≤‡∏Å ${provider} ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏∑‡πà‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ`);
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ userDocument.profile ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á property ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
      if (userDocument.profile) {
          if (name && !userDocument.profile.displayName) {
            userDocument.profile.displayName = name;
            updated = true;
          }
          if (picture && !userDocument.profile.avatarUrl) {
            userDocument.profile.avatarUrl = picture;
            updated = true;
          }
      } else { // ‡∏ñ‡πâ‡∏≤ profile ‡πÄ‡∏õ‡πá‡∏ô undefined ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡πÉ‡∏´‡∏°‡πà
          userDocument.profile = {
              displayName: name || undefined,
              avatarUrl: picture || undefined,
              // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î default ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ç‡∏≠‡∏á IUserProfile ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
              gender: "prefer_not_to_say",
          };
          updated = true;
      }


      userDocument.lastLoginAt = new Date();
      await userDocument.save();
      console.log(`üîÑ [API:OAuthSignIn] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï lastLoginAt ${updated ? '‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ ' : ''}‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userDocument.username}`);

    } else { // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢ provider + providerAccountId
      if (email) { // ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ email ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        const existingUserWithEmail = await UserModel.findOne({ email: email.toLowerCase() });
        if (existingUserWithEmail) {
          userDocument = existingUserWithEmail; // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏î‡πâ‡∏ß‡∏¢ email ‡∏ô‡∏µ‡πâ
          console.log(`üîó [API:OAuthSignIn] ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏• ${email} (Username: ${userDocument.username}), ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${provider}`);

          if (!userDocument.isActive) return NextResponse.json({ error: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" }, { status: 403 });
          if (userDocument.isBanned) return NextResponse.json({ error: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö" }, { status: 403 });

          const accountExists = userDocument.accounts.some(
            acc => acc.provider === provider && acc.providerAccountId === providerAccountId
          );

          if (!accountExists) {
            const newAccountObject: IAccount = { // ‡∏™‡∏£‡πâ‡∏≤‡∏á plain object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IAccount
              provider,
              providerAccountId,
              type: "oauth",
            } as IAccount; // Cast ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Type, Mongoose ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
            userDocument.accounts.push(newAccountObject);

            if (!userDocument.isEmailVerified) { // ‡∏ñ‡πâ‡∏≤ email ‡∏´‡∏•‡∏±‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà verify ‡πÉ‡∏´‡πâ verify ‡πÄ‡∏•‡∏¢
                userDocument.isEmailVerified = true;
                userDocument.emailVerifiedAt = new Date();
            }
            if (userDocument.profile) {
                if (name && !userDocument.profile.displayName) userDocument.profile.displayName = name;
                if (picture && !userDocument.profile.avatarUrl) userDocument.profile.avatarUrl = picture;
            } else {
                userDocument.profile = { displayName: name || undefined, avatarUrl: picture || undefined, gender: "prefer_not_to_say" };
            }

            userDocument.lastLoginAt = new Date();
            await userDocument.save();
            console.log(`‚úÖ [API:OAuthSignIn] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${provider} ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userDocument.username} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
          } else {
            console.log(`‚ÑπÔ∏è [API:OAuthSignIn] ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${provider} ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userDocument.username} ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
          }
        }
      }

      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö userDocument (‡∏Ñ‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á providerId ‡πÅ‡∏•‡∏∞ email ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô) ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      if (!userDocument) {
        wasNewlyCreated = true; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ flag
        console.log(`‚ú® [API:OAuthSignIn] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å ${provider} ‡∏î‡πâ‡∏ß‡∏¢ email: ${email}, name: ${name}`);

        const newUsernameBase = usernameSuggestion || (email ? email.split("@")[0] : "") || name?.replace(/\s+/g, "") || `user${Date.now().toString().slice(-6)}`;
        const finalUsername = await generateUniqueUsername(newUsernameBase);

        // --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Default Values ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Nested Objects ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ---
        const defaultReadingPrefs: IUserReadingDisplayPreferences = {
            fontSize: "medium", readingModeLayout: "scrolling", fontFamily: "Sarabun", lineHeight: 1.6, textAlignment: "left",
        };
        const defaultAccessibilityPrefs: IUserAccessibilityDisplayPreferences = {
            dyslexiaFriendlyFont: false, highContrastMode: false,
        };
        const defaultDisplayPrefs: IUserDisplayPreferences = {
            theme: "system", reading: defaultReadingPrefs, accessibility: defaultAccessibilityPrefs,
        };
        const defaultAnalyticsConsent: IUserAnalyticsConsent = {
            allowPsychologicalAnalysis: false, allowPersonalizedFeedback: false, lastConsentReviewDate: new Date(),
        };
        const defaultContentPrivacyPrefs: IUserContentPrivacyPreferences = {
            showMatureContent: false, preferredGenres: [], blockedGenres: [], blockedTags: [], blockedAuthors: [], blockedNovels: [],
            profileVisibility: "public", readingHistoryVisibility: "followers_only", showActivityStatus: true,
            allowDirectMessagesFrom: "followers", analyticsConsent: defaultAnalyticsConsent,
        };
        const defaultVisualNovelGameplayPrefs: IVisualNovelGameplayPreferences = {
            textSpeed: "normal", autoPlayMode: "click", autoPlayDelayMs: 1500, skipUnreadText: false,
            transitionsEnabled: true, screenEffectsEnabled: true, textWindowOpacity: 0.8, masterVolume: 1.0,
            bgmVolume: 0.7, sfxVolume: 0.8, voiceVolume: 1.0, voicesEnabled: true, preferredVoiceLanguage: "original",
            showChoiceTimer: true, blurThumbnailsOfMatureContent: true, preferredArtStyles: [], preferredGameplayMechanics: [],
            assetPreloading: "essential", characterAnimationLevel: "full",
        };
        const defaultProfile: IUserProfile = {
            displayName: name || finalUsername, avatarUrl: picture || undefined,
            penName: undefined, bio: undefined, coverImageUrl: undefined, gender: "prefer_not_to_say",
            dateOfBirth: undefined, country: undefined, timezone: undefined, location: undefined, websiteUrl: undefined,
        };
        const defaultTrackingStats: IUserTrackingStats = {
            joinDate: new Date(), totalLoginDays: 1, totalNovelsRead: 0, totalEpisodesRead: 0,
            totalTimeSpentReadingSeconds: 0, totalCoinSpent: 0, totalRealMoneySpent: 0, firstLoginAt: new Date(),
            lastNovelReadAt: undefined, lastNovelReadId: undefined,
        };
        const defaultSocialStats: IUserSocialStats = {
            followersCount: 0, followingCount: 0, novelsCreatedCount: 0, commentsMadeCount: 0, ratingsGivenCount: 0, likesGivenCount: 0,
        };
        const defaultPreferences: IUserPreferences = {
            language: "th", display: defaultDisplayPrefs,
            notifications: {
                masterNotificationsEnabled: true, email: createDefaultNotificationChannelSettings(),
                push: createDefaultNotificationChannelSettings(), inApp: createDefaultNotificationChannelSettings(),
            },
            contentAndPrivacy: defaultContentPrivacyPrefs, visualNovelGameplay: defaultVisualNovelGameplayPrefs,
        };
        const defaultWallet: IUserWallet = { coinBalance: 0, lastCoinTransactionAt: undefined };
        const defaultGamification: IUserGamification = {
            level: 1, currentLevelObject: null, experiencePoints: 0, totalExperiencePointsEverEarned: 0,
            nextLevelXPThreshold: 100, achievements: [], showcasedItems: [] as IShowcasedGamificationItem[],
            primaryDisplayBadge: undefined as IUserDisplayBadge | undefined,
            secondaryDisplayBadges: [] as IUserDisplayBadge[],
            loginStreaks: { currentStreakDays: 1, longestStreakDays: 1, lastLoginDate: new Date() },
            dailyCheckIn: { currentStreakDays: 0, lastCheckInDate: undefined }, lastActivityAt: new Date(),
        };
        const defaultVerification: IUserVerification = { kycStatus: "none" };
        const defaultDonationSettings: IUserDonationSettings = { isEligibleForDonation: false };
        const defaultSecuritySettings: IUserSecuritySettings = {
            twoFactorAuthentication: { isEnabled: false }, loginAttempts: { count: 0 }, activeSessions: [],
        };
        const defaultMentalWellbeingInsights: IMentalWellbeingInsights = {
            overallEmotionalTrend: "unknown", consultationRecommended: false,
        };

        const newUserInput = { // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö new UserModel ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Partial<IUser>
          username: finalUsername,
          email: email ? email.toLowerCase() : undefined,
          isEmailVerified: !!email,
          emailVerifiedAt: email ? new Date() : undefined,
          roles: ["Reader"],
          profile: defaultProfile,
          accounts: [{ provider, providerAccountId, type: "oauth" } as IAccount],
          trackingStats: defaultTrackingStats,
          socialStats: defaultSocialStats,
          preferences: defaultPreferences,
          wallet: defaultWallet,
          gamification: defaultGamification,
          isActive: true,
          isBanned: false,
          lastLoginAt: new Date(),
          // Optional fields from IUser not explicitly set above will use Mongoose schema defaults or be undefined
          writerStats: undefined,
          verifiedBadges: [],
          verification: defaultVerification,
          donationSettings: defaultDonationSettings,
          securitySettings: defaultSecuritySettings,
          mentalWellbeingInsights: defaultMentalWellbeingInsights,
          isDeleted: false,
        };

        if (newUserInput.email) {
            const existingEmailUser = await UserModel.findOne({ email: newUserInput.email });
            if (existingEmailUser) {
                console.error(`‚ùå [API:OAuthSignIn] ‡∏Ç‡∏ì‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà ‡∏≠‡∏µ‡πÄ‡∏°‡∏• ${newUserInput.email} ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß (race condition)`);
                return NextResponse.json({ error: `‡∏≠‡∏µ‡πÄ‡∏°‡∏• ${newUserInput.email} ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏∑‡πà‡∏ô.` }, { status: 409 });
            }
        }

        // Cast newUserInput to any temporarily if TypeScript complains about missing Mongoose methods/properties
        // Mongoose will handle applying schema defaults for fields not provided.
        userDocument = new UserModel(newUserInput as any) as (IUser & { _id: Types.ObjectId });
        await userDocument.save();
        console.log(`‚úÖ [API:OAuthSignIn] ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà ${userDocument.username} ‡∏à‡∏≤‡∏Å ${provider} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      }
    }

    if (!userDocument) { // Double check, ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠ ‡∏ì ‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ
        console.error("‚ùå [API:OAuthSignIn] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á User document ‡πÑ‡∏î‡πâ");
        return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö OAuth ‡πÑ‡∏î‡πâ" }, { status: 500 });
    }

    // --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Response Object ---
    // 1. ‡πÅ‡∏õ‡∏•‡∏á Mongoose document ‡πÄ‡∏õ‡πá‡∏ô plain JavaScript object
    const plainUserObject = userDocument.toObject<IUser>(); // toObject() ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô plain object ‡∏ó‡∏µ‡πà‡∏°‡∏µ _id ‡πÄ‡∏õ‡πá‡∏ô ObjectId

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á userResponse ‡πÇ‡∏î‡∏¢ map field ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á _id ‡πÄ‡∏õ‡πá‡∏ô string
    // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å field ‡πÉ‡∏ô OAuthSignInResponseUser ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤
    const userResponse: OAuthSignInResponseUser = {
      // ‡πÉ‡∏ä‡πâ spread operator ‡∏Å‡∏±‡∏ö plainUserObject ‡∏ó‡∏µ‡πà cast ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ _id (‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
      // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á conflict ‡∏Å‡∏±‡∏ö _id: string ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏™‡πà
      ...(plainUserObject as Omit<IUser, '_id'>),
      _id: userDocument._id.toString(), // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î _id ‡πÄ‡∏õ‡πá‡∏ô string ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ 'accounts' ‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô plain array of plain objects
      // IAccount ‡πÉ‡∏ô User.ts ‡∏Ñ‡∏∑‡∏≠ Types.DocumentArray<IAccount> (‡∏ó‡∏µ‡πà IAccount extends Document)
      // toObject() ‡∏Ç‡∏≠‡∏á parent document ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å toObject() ‡∏ö‡∏ô subdocuments ‡∏î‡πâ‡∏ß‡∏¢
      // ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ map ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å toObject() ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡πâ‡∏≤ IAccount ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô Mongoose Document instance
      accounts: plainUserObject.accounts.map(acc => (acc.toObject ? acc.toObject() : acc) as IAccount),
    };
    
    // ‡∏•‡∏ö password ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å object ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö (‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ OAuth user ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ password ‡πÉ‡∏ô model ‡∏ô‡∏µ‡πâ)
    if ('password' in (userResponse as any)) {
        delete (userResponse as any).password;
    }

    console.log(`‚úÖ [API:OAuthSignIn] ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userResponse.username} ‡∏Å‡∏•‡∏±‡∏ö (ID: ${userResponse._id})`);
    return NextResponse.json({ user: userResponse }, { status: wasNewlyCreated ? 201 : 200 });

  } catch (error: any) {
    console.error("‚ùå [API:OAuthSignIn] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error.message, error.stack);
    if (error.code === 11000) { // MongoDB duplicate key error
        const field = Object.keys(error.keyValue)[0];
        const message = `${field === 'email' ? '‡∏≠‡∏µ‡πÄ‡∏°‡∏•' : (field === 'username' ? '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' : `‡∏ü‡∏¥‡∏•‡∏î‡πå '${field}'`)} ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß`;
        return NextResponse.json({ error: message }, { status: 409 }); // Conflict
    }
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Social Sign-In", details: error.message },
      { status: 500 }
    );
  }
}