// src/app/api/auth/signin/credentials/route.ts
// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢ Credentials (‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£ query user ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å matchPassword ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

import { NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb";
import UserModel, { IAccount, IUser } from "@/backend/models/User"; // IUser ‡πÅ‡∏•‡∏∞ UserModel
import { Types } from "mongoose";

interface CredentialsSignInRequestBody {
  identifier: string;
  password: string;
}

// CredentialsSignInResponseUser ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á IUser ‡∏ó‡∏µ‡πà client ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
// ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡∏à‡∏∞ map ‡∏°‡∏≤‡∏à‡∏≤‡∏Å SessionUser ‡πÉ‡∏ô options.ts ‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ
// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÉ‡∏ô API ‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á IUser (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å toObject ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á _id)
type CredentialsSignInResponseUser = Omit<IUser, '_id' | 'password' | 'accounts'> & {
    _id: string;
    accounts: Array<Pick<IUser['accounts'][number], 'provider' | 'providerAccountId' | 'type'>>; // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
};


export async function POST(request: Request) {
  try {
    await dbConnect();
    console.log("üîµ [API:CredentialsSignIn] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    const body: CredentialsSignInRequestBody = await request.json();
    const { identifier, password } = body;
    console.log(`‚ÑπÔ∏è [API:CredentialsSignIn] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: identifier=${identifier}`);

    if (!identifier?.trim() || !password?.trim()) {
      console.warn("‚ö†Ô∏è [API:CredentialsSignIn] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return NextResponse.json(
        { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" },
        { status: 400 }
      );
    }

    console.log(`üîç [API:CredentialsSignIn] ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢ identifier: ${identifier}`);
    // Query ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ .lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ Mongoose document instance
    // ‡πÅ‡∏•‡∏∞ select password ‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô matchPassword
    const userDocument = await UserModel.findOne({
      $and: [
        {
          $or: [
            { email: identifier.trim().toLowerCase() },
            { username: { $regex: `^${identifier.trim()}$`, $options: "i" } },
          ],
        },
        {
          accounts: { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ account ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó credentials
            $elemMatch: { provider: "credentials", type: "credentials" },
          },
        },
      ],
    }).select("+password +accounts"); // <--- ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å +password ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢

    if (!userDocument) {
      console.warn(`‚ö†Ô∏è [API:CredentialsSignIn] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ credentials: ${identifier}`);
      return NextResponse.json(
        { error: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
        { status: 401 }
      );
    }
    console.log(`‚úÖ [API:CredentialsSignIn] ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${userDocument.username} (ID: ${userDocument._id})`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (userDocument ‡πÄ‡∏õ‡πá‡∏ô Mongoose document instance ‡πÅ‡∏•‡πâ‡∏ß)
    const isPasswordValid = await userDocument.matchPassword(password); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å method ‡∏à‡∏≤‡∏Å instance ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    if (!isPasswordValid) {
      console.warn(`‚ö†Ô∏è [API:CredentialsSignIn] ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${identifier}`);
      return NextResponse.json(
        { error: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
        { status: 401 }
      );
    }
    console.log(`‚úÖ [API:CredentialsSignIn] ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${userDocument.username}`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (‡πÉ‡∏ä‡πâ userDocument ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Mongoose document instance)
    if (!userDocument.isActive) {
      console.warn(`‚ö†Ô∏è [API:CredentialsSignIn] ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${identifier}`);
      return NextResponse.json(
        { error: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•" },
        { status: 403 }
      );
    }

    if (userDocument.isBanned) {
      const banMessage = userDocument.bannedUntil
        ? `‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏à‡∏ô‡∏ñ‡∏∂‡∏á ${new Date(userDocument.bannedUntil).toLocaleString("th-TH", { timeZone: "Asia/Bangkok" })}`
        : "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£";
      console.warn(`‚ö†Ô∏è [API:CredentialsSignIn] ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô: ${identifier}`);
      return NextResponse.json(
        { error: banMessage, banReason: userDocument.banReason || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏" },
        { status: 403 }
      );
    }

    if (userDocument.email && !userDocument.isEmailVerified) {
      console.warn(`‚ö†Ô∏è [API:CredentialsSignIn] ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: ${identifier}`);
      return NextResponse.json(
        { error: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì" },
        { status: 403 }
      );
    }
    console.log(`‚úÖ [API:CredentialsSignIn] ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤ login ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    userDocument.lastLoginAt = new Date();
    await userDocument.save({ validateModifiedOnly: true }); // validateModifiedOnly ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç field ‡∏≠‡∏∑‡πà‡∏ô
    console.log(`‚ÑπÔ∏è [API:CredentialsSignIn] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï lastLoginAt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${userDocument.username}`);

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö response ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ toObject() ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á _id
    const userObject = userDocument.toObject<IUser & { _id: Types.ObjectId }>(); // <--- ‡πÉ‡∏ä‡πâ IUser
    
    const userResponse: CredentialsSignInResponseUser = {
        ...(userObject as Omit<IUser, '_id' | 'password' | 'accounts'>), // Cast ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á type conflict ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        _id: userObject._id.toString(),
        // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• accounts ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        accounts: userObject.accounts.map(acc => ({
            provider: acc.provider,
            providerAccountId: acc.providerAccountId,
            type: acc.type,
        })) as IAccount[], // Cast to IAccount[]
    };

    // password ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏ß‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡πâ‡∏≤ schema ‡∏°‡∏µ select: false ‡πÅ‡∏•‡∏∞ toObject() ‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û ƒëi·ªÅu ƒë√≥
    // ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à ‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ delete property password ‡∏à‡∏≤‡∏Å userResponse ‡πÑ‡∏î‡πâ
    // delete (userResponse as any).password; // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏Å‡∏±‡∏á‡∏ß‡∏•


    console.log(`‚úÖ [API:CredentialsSignIn] ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${identifier}`);
    return NextResponse.json(
      { success: true, user: userResponse }, // ‡∏™‡πà‡∏á userResponse ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
      { status: 200 }
    );
  } catch (error: any) {
    console.error("‚ùå [API:CredentialsSignIn] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error.message || error, error.stack);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ: " + (error.message || "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏")},
      { status: 500 }
    );
  }
}