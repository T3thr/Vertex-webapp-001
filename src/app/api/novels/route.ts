// src/app/api/novels/route.ts

import { NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb";
import NovelModel, { NovelStatus, NovelAccessLevel, INovel } from "@/backend/models/Novel";
import UserModel, { IUser } from "@/backend/models/User"; // IUser ‡∏ñ‡∏π‡∏Å import ‡πÄ‡∏û‡∏∑‡πà‡∏≠ typing author
import CategoryModel, { ICategory } from "@/backend/models/Category"; // ICategory ‡∏ñ‡∏π‡∏Å import ‡πÄ‡∏û‡∏∑‡πà‡∏≠ typing categories

// Helper function to ensure models are initialized
// Mongoose automatically handles model compilation, but this can be an explicit check.
const ensureModels = () => {
  NovelModel;
  UserModel;
  CategoryModel;
};

export async function GET(request: Request) {
  try {
    await dbConnect();
    ensureModels(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ model ‡∏ñ‡∏π‡∏Å initialize ‡πÅ‡∏•‡πâ‡∏ß

    const { searchParams } = new URL(request.url);
    const filter = searchParams.get("filter") || "trending";
    const limit = parseInt(searchParams.get("limit") || "8", 10);
    const page = parseInt(searchParams.get("page") || "1", 10);
    const categorySlug = searchParams.get("categorySlug");
    const languageId = searchParams.get("languageId");

    const skip = (page - 1) * limit;

    console.log(`üì° API /api/novels called with query: ${request.url}`);

    const query: any = {
      status: NovelStatus.PUBLISHED,
      accessLevel: NovelAccessLevel.PUBLIC,
      // isDeleted: false, // NovelModel ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏µ isDeleted field ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á, ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ soft delete ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô model
    };
    const sort: any = {};

    if (categorySlug) {
      const category = await CategoryModel.findOne({ slug: categorySlug }).lean();
      if (category) {
        // ‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö: ‡∏ò‡∏µ‡∏°‡∏´‡∏•‡∏±‡∏Å, ‡∏ò‡∏µ‡∏°‡∏£‡∏≠‡∏á, ‡πÅ‡∏ó‡πá‡∏Å narrative, etc.
        // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏ô‡πâ‡∏ô mainTheme ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å CategoryType ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        query.$or = [
          { "themeAssignment.mainTheme.categoryId": category._id },
          { "themeAssignment.subThemes.categoryId": category._id },
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö narrativeFocus ‡∏ñ‡πâ‡∏≤ categorySlug ‡∏™‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô
          { "narrativeFocus.artStyle": category._id },
          { "narrativeFocus.commonTropes": category._id },
          { "narrativeFocus.interactivityLevel": category._id },
        ];
      } else {
        console.warn(`‚ö†Ô∏è Category with slug "${categorySlug}" not found.`);
      }
    }

    if (languageId) {
      query.language = languageId; // language ‡πÉ‡∏ô NovelModel ‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á Category
    }

    switch (filter) {
      case "trending": // ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°, ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°, ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ "‡∏£‡πâ‡∏≠‡∏ô‡πÅ‡∏£‡∏á" ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ logic ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ ‡πÄ‡∏ä‡πà‡∏ô view velocity
        sort["stats.viewsCount"] = -1;
        sort["stats.followersCount"] = -1;
        sort["stats.lastPublishedEpisodeAt"] = -1;
        query.isCompleted = false; // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏ô‡πâ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö trending
        break;
      case "published": // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (New Releases)
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        sort["publishedAt"] = -1; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        sort["stats.lastPublishedEpisodeAt"] = -1; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏ï‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        break;
      case "promoted": // ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏î‡πà‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (Promoted / Featured / Discount)
        // query.isFeatured = true; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isFeatured
        // ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å activePromotion
        const now = new Date();
        query["monetizationSettings.activePromotion.isActive"] = true;
        query["monetizationSettings.activePromotion.promotionStartDate"] = { $lte: now };
        query["monetizationSettings.activePromotion.promotionEndDate"] = { $gte: now };
        query["monetizationSettings.activePromotion.promotionalPriceCoins"] = { $exists: true, $ne: null }; // ‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
        sort["stats.viewsCount"] = -1; // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
        sort["monetizationSettings.activePromotion.promotionStartDate"] = -1; // ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        break;
      case "completed": // ‡∏à‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏π‡∏£‡∏ì‡πå
        query.isCompleted = true;
        sort["stats.averageRating"] = -1;
        sort["stats.viewsCount"] = -1;
        sort["publishedAt"] = -1; // ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        break;
      default:
        console.error(`‚ùå Invalid filter parameter: ${filter}`);
        return NextResponse.json(
          { error: "‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
          { status: 400 }
        );
    }

    const total = await NovelModel.countDocuments(query);
    console.log(`‚ÑπÔ∏è Found ${total} novels matching query:`, JSON.stringify(query), `and sort:`, JSON.stringify(sort));

    // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ type assertion ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å .lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ TypeScript ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
    const novels: INovel[] = await NovelModel.find(query)
      .populate<{ author: NonNullable<INovel['author']> }>({ // Ensure author is populated
        path: "author",
        select: "username profile.displayName profile.penName profile.avatarUrl roles", // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ field ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° UserModel
        model: UserModel,
      })
      .populate<{ themeAssignment: { mainTheme: { categoryId: NonNullable<ICategory> } } }>({
        path: "themeAssignment.mainTheme.categoryId",
        select: "name slug localizations iconUrl color categoryType",
        model: CategoryModel,
      })
      .populate<{ language: NonNullable<ICategory> }>({
        path: "language",
        select: "name slug localizations iconUrl color",
        model: CategoryModel,
      })
      .populate<{ ageRatingCategoryId?: ICategory }>({
        path: "ageRatingCategoryId",
        select: "name slug localizations iconUrl color description", // ‡πÄ‡∏û‡∏¥‡πà‡∏° description ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Card
        model: CategoryModel,
      })
      // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ populate subThemes ‡∏´‡∏£‡∏∑‡∏≠ contentWarnings (‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ query ‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
      // .populate({
      // path: "themeAssignment.subThemes.categoryId",
      // select: "name slug",
      // model: CategoryModel,
      // })
      // .populate({
      // path: "themeAssignment.contentWarnings",
      // select: "name slug iconUrl",
      // model: CategoryModel,
      // })
      .sort(sort)
      .skip(skip)
      .limit(limit)
      .lean(); // ‡πÉ‡∏ä‡πâ .lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠ performance ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Mongoose document methods

    console.log(`‚úÖ Fetched ${novels.length} novels for filter: ${filter}`);

    return NextResponse.json(
      {
        novels, // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ novels ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏°‡∏µ type ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö frontend
        pagination: {
          total,
          page,
          limit,
          totalPages: Math.ceil(total / limit),
        },
      },
      { status: 200 }
    );
  } catch (error: any) {
    console.error(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ (filter: ${request.url}):`, error.message, error.stack);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢", details: error.message },
      { status: 500 }
    );
  }
}