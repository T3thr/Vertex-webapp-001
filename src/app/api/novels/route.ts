// src/app/api/novels/route.ts
import { NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb";
import NovelModel, { NovelStatus, NovelAccessLevel, INovel, NovelContentType, IPromotionDetails, INovelStats } from "@/backend/models/Novel";
import UserModel, { IUser } from "@/backend/models/User"; // UserModel ‡∏ñ‡∏π‡∏Å import ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô GET ‡∏ô‡∏µ‡πâ ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÉ‡∏ô POST/PUT
import CategoryModel, { ICategory, CategoryType } from "@/backend/models/Category";
import { NovelCardData, PopulatedAuthor, PopulatedCategory } from "@/components/NovelCard"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
import mongoose, { Types } from "mongoose";

// Helper function to safely convert value to ObjectId
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ id ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞ valid ObjectId format ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á
const toObjectId = (id: string | undefined | null): Types.ObjectId | null => {
  if (typeof id === 'string' && mongoose.Types.ObjectId.isValid(id)) {
    return new mongoose.Types.ObjectId(id);
  }
  return null;
};

export async function GET(request: Request) {
  try {
    await dbConnect(); // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    const { searchParams } = new URL(request.url);
    const filter = searchParams.get("filter") || "trending"; // default filter ‡∏Ñ‡∏∑‡∏≠ trending
    const limit = parseInt(searchParams.get("limit") || "7", 10); // default limit ‡∏Ñ‡∏∑‡∏≠ 7 
    const page = parseInt(searchParams.get("page") || "1", 10);
    const categorySlug = searchParams.get("categorySlug");
    const languageIdParam = searchParams.get("languageId");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö novelType ‡πÅ‡∏•‡∏∞ cast ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö NovelContentType ‡∏´‡∏£‡∏∑‡∏≠ null
    const novelTypeParam = searchParams.get("novelType");
    const novelType = novelTypeParam && Object.values(NovelContentType).includes(novelTypeParam as NovelContentType)
      ? novelTypeParam as NovelContentType
      : null;

    const skip = (page - 1) * limit;

    console.log(`üì° [API /api/novels] Called with URL: ${request.url}`);
    console.log(`‚ÑπÔ∏è [API /api/novels] Params - filter: ${filter}, limit: ${limit}, page: ${page}, categorySlug: ${categorySlug}, languageId: ${languageIdParam}, novelType: ${novelType}`);

    // Query ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß, ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞, ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
    const query: any = {
      status: { $in: [NovelStatus.PUBLISHED, NovelStatus.COMPLETED] },
      accessLevel: NovelAccessLevel.PUBLIC,
      isDeleted: false,
    };
    const sort: any = {};

    // Filter ‡∏ï‡∏≤‡∏° sourceType (‡πÄ‡∏ä‡πà‡∏ô interactive_fiction ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Visual Novels)
    if (novelType) {
      query["sourceType.type"] = novelType;
      console.log(`‚ÑπÔ∏è [API /api/novels] Filtering for novelType: ${novelType}`);
    }

    // Array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö $and conditions ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ $and
    const andConditions: any[] = [];

    // Filter ‡∏ï‡∏≤‡∏° categorySlug
    if (categorySlug) {
      const category = await CategoryModel.findOne({ slug: categorySlug }).lean<ICategory>();
      if (category && category._id) {
        console.log(`‚ÑπÔ∏è [API /api/novels] Filtering by category: ${category.name} (ID: ${category._id})`);
        const categoryObjId = category._id; // lean() ‡∏Ñ‡∏∑‡∏ô ObjectId ‡∏ñ‡πâ‡∏≤ schema ‡πÄ‡∏õ‡πá‡∏ô ObjectId
        const categoryConditions = {
          $or: [ // ‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ category ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô field ‡πÉ‡∏î field ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ
            { "themeAssignment.mainTheme.categoryId": categoryObjId },
            { "themeAssignment.subThemes.categoryId": categoryObjId },
            { "themeAssignment.moodAndTone": categoryObjId },
            { "themeAssignment.contentWarnings": categoryObjId },
            { "narrativeFocus.artStyle": categoryObjId },
            { "narrativeFocus.commonTropes": categoryObjId },
            { "narrativeFocus.interactivityLevel": categoryObjId },
            { "narrativeFocus.narrativePacingTags": categoryObjId },
            { "narrativeFocus.primaryConflictTypes": categoryObjId },
            { "narrativeFocus.targetAudienceProfileTags": categoryObjId },
            { "narrativeFocus.lengthTag": categoryObjId },
            { "narrativeFocus.playerAgencyLevel": categoryObjId },
            { "narrativeFocus.storyArcStructure": categoryObjId },
            { "narrativeFocus.narrativePerspective": categoryObjId },
            { "sourceType.fandomCategoryId": categoryObjId },
          ]
        };
        andConditions.push(categoryConditions);
      } else {
        console.warn(`‚ö†Ô∏è [API /api/novels] Category with slug "${categorySlug}" not found. No novels will match this category slug.`);
        // ‡∏ñ‡πâ‡∏≤ categorySlug ‡∏£‡∏∞‡∏ö‡∏∏‡∏°‡∏≤‡πÅ‡∏ï‡πà‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠, ‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ user ‡∏™‡∏±‡∏ö‡∏™‡∏ô
        return NextResponse.json({ novels: [], pagination: { total: 0, page, limit, totalPages: 0 } }, { status: 200 });
      }
    }

    // Filter ‡∏ï‡∏≤‡∏° languageId
    if (languageIdParam) {
      const langId = toObjectId(languageIdParam);
      if (langId) {
        query.language = langId; // language ‡πÉ‡∏ô NovelModel ‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á Category
        console.log(`‚ÑπÔ∏è [API /api/novels] Filtering by languageId: ${languageIdParam}`);
      } else {
        console.warn(`‚ö†Ô∏è [API /api/novels] Invalid languageId format: "${languageIdParam}". Skipping language filter.`);
      }
    }

    // Logic ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° filter parameter
    switch (filter) {
      case "trending":
        sort["stats.trendingStats.trendingScore"] = -1; // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô trending ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        sort["stats.viewsCount"] = -1; // ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß
        console.log(`‚ÑπÔ∏è [API /api/novels] Applying filter: trending`);
        break;
      case "published":
        sort["stats.lastPublishedEpisodeAt"] = -1; // ‡∏ï‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà
        sort["publishedAt"] = -1; // ‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (fallback)
        console.log(`‚ÑπÔ∏è [API /api/novels] Applying filter: published (latest episodes/novels)`);
        break;
      case "promoted":
        const now = new Date();
        const promotionConditions = {
          $or: [ // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô isFeatured ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà active
            { isFeatured: true },
            {
              "monetizationSettings.activePromotion.isActive": true,
              "monetizationSettings.activePromotion.promotionalPriceCoins": { $exists: true, $ne: null },
              $and: [ // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô
                { $or: [{ "monetizationSettings.activePromotion.promotionStartDate": { $lte: now } }, { "monetizationSettings.activePromotion.promotionStartDate": { $exists: false } }] },
                { $or: [{ "monetizationSettings.activePromotion.promotionEndDate": { $gte: now } }, { "monetizationSettings.activePromotion.promotionEndDate": { $exists: false } }] },
              ],
            },
          ]
        };
        andConditions.push(promotionConditions);
        // Sort ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö promoted: ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° isFeatured ‡∏Å‡πà‡∏≠‡∏ô, ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà
        sort["isFeatured"] = -1; // ‡πÉ‡∏´‡πâ isFeatured=true ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        sort["stats.trendingStats.trendingScore"] = -1; // ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏° trending
        sort["publishedAt"] = -1;
        console.log(`‚ÑπÔ∏è [API /api/novels] Applying filter: promoted (featured or active promotions)`);
        break;
      case "completed":
        query.isCompleted = true; // ‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß
        sort["stats.averageRating"] = -1; // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        sort["stats.viewsCount"] = -1;
        sort["publishedAt"] = -1;
        console.log(`‚ÑπÔ∏è [API /api/novels] Applying filter: completed`);
        break;
      default:
        // Fallback ‡πÑ‡∏õ trending ‡∏ñ‡πâ‡∏≤ filter ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
        sort["stats.trendingStats.trendingScore"] = -1;
        sort["stats.viewsCount"] = -1;
        console.warn(`‚ö†Ô∏è [API /api/novels] Invalid or missing filter parameter: "${filter}". Defaulting to 'trending'.`);
    }

    // ‡∏£‡∏ß‡∏° $andConditions ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö query ‡∏´‡∏•‡∏±‡∏Å
    if (andConditions.length > 0) {
      query.$and = query.$and ? [...query.$and, ...andConditions] : andConditions;
    }

    const total = await NovelModel.countDocuments(query);
    console.log(`‚ÑπÔ∏è [API /api/novels] Final Query: ${JSON.stringify(query)}, Sort: ${JSON.stringify(sort)}`);
    console.log(`‚ÑπÔ∏è [API /api/novels] Found ${total} novels matching query.`);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏° populate field ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    // ‡πÉ‡∏ä‡πâ .lean({ virtuals: true }) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ plain JS objects ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏° virtual fields (‡πÄ‡∏ä‡πà‡∏ô currentEpisodePriceCoins)
    const rawNovels = await NovelModel.find(query)
      .populate<{ author: Pick<IUser, '_id' | 'username' | 'profile' | 'roles'> }>({
        path: "author",
        select: "username profile.displayName profile.penName profile.avatarUrl roles", // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö card
        model: UserModel, // ‡∏£‡∏∞‡∏ö‡∏∏ model ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô (Mongoose ‡∏°‡∏±‡∏Å‡∏à‡∏∞ infer ‡πÑ‡∏î‡πâ)
      })
      .populate<{ themeAssignment: { mainTheme: { categoryId: ICategory }, subThemes: { categoryId: ICategory }[], moodAndTone: ICategory[], contentWarnings: ICategory[] } }>({
        path: "themeAssignment.mainTheme.categoryId",
        select: "name slug localizations iconUrl color categoryType description",
        model: CategoryModel,
      })
      .populate({ // Populate subThemes (array of objects)
        path: 'themeAssignment.subThemes.categoryId',
        select: 'name slug iconUrl color categoryType description',
        model: CategoryModel,
      })
      .populate({
        path: 'themeAssignment.moodAndTone',
        select: 'name slug iconUrl color categoryType description',
        model: CategoryModel,
      })
      .populate({
        path: 'themeAssignment.contentWarnings',
        select: 'name slug iconUrl color categoryType description',
        model: CategoryModel,
      })
      .populate<{ language: ICategory }>({
        path: "language",
        select: "name slug localizations iconUrl color categoryType description",
        model: CategoryModel,
      })
      .populate<{ ageRatingCategoryId?: ICategory }>({
        path: "ageRatingCategoryId",
        select: "name slug localizations iconUrl color categoryType description",
        model: CategoryModel,
      })
      .sort(sort)
      .skip(skip)
      .limit(limit)
      .lean({ virtuals: true }) as any[]; // Cast to any[] ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß, ‡πÅ‡∏•‡πâ‡∏ß map ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á

    // Map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö (rawNovels) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á NovelCardData ‡∏ó‡∏µ‡πà Client Component (NovelCard) ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
    // ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á ObjectId ‡πÄ‡∏õ‡πá‡∏ô string
    const novels: NovelCardData[] = rawNovels.map(novel => {
      // Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á populated category (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      const transformPopulatedCategory = (cat: any): PopulatedCategory | undefined => {
        if (!cat || typeof cat !== 'object' || !cat._id) return undefined; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ cat ‡πÄ‡∏õ‡πá‡∏ô object ‡πÅ‡∏•‡∏∞‡∏°‡∏µ _id
        return {
          _id: cat._id.toString(), // ‡πÅ‡∏õ‡∏•‡∏á ObjectId ‡πÄ‡∏õ‡πá‡∏ô string
          name: cat.name,
          slug: cat.slug,
          localizations: cat.localizations,
          iconUrl: cat.iconUrl,
          color: cat.color,
          categoryType: cat.categoryType,
          description: cat.description,
        };
      };
      
      // Helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á array ‡∏Ç‡∏≠‡∏á populated categories
      const transformPopulatedCategoryArray = (cats: any[]): PopulatedCategory[] => {
        if (!Array.isArray(cats)) return [];
        return cats.map(transformPopulatedCategory).filter(Boolean) as PopulatedCategory[];
      };

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á object author
      const authorData: PopulatedAuthor = novel.author && typeof novel.author === 'object' && novel.author._id
        ? {
            _id: novel.author._id.toString(),
            username: novel.author.username,
            profile: novel.author.profile, // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ profile sub-document ‡∏ñ‡∏π‡∏Å populate ‡∏°‡∏≤‡∏Ñ‡∏£‡∏ö
            roles: novel.author.roles,
          }
        : { _id: new mongoose.Types.ObjectId().toString(), username: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ô‡∏≤‡∏°‡∏õ‡∏≤‡∏Å‡∏Å‡∏≤" }; // Default author ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

      return {
        _id: novel._id?.toString(), // _id ‡∏Ç‡∏≠‡∏á Novel
        title: novel.title,
        slug: novel.slug,
        synopsis: novel.synopsis,
        coverImageUrl: novel.coverImageUrl,
        stats: { // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ stats ‡∏ó‡∏µ‡πà NovelCard ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
          viewsCount: novel.stats?.viewsCount || 0,
          likesCount: novel.stats?.likesCount || 0,
          averageRating: novel.stats?.averageRating || 0,
          lastPublishedEpisodeAt: novel.stats?.lastPublishedEpisodeAt ? new Date(novel.stats.lastPublishedEpisodeAt) : undefined,
        },
        isCompleted: novel.isCompleted,
        isFeatured: novel.isFeatured,
        publishedAt: novel.publishedAt ? new Date(novel.publishedAt) : undefined,
        status: novel.status as NovelStatus,
        totalEpisodesCount: novel.totalEpisodesCount,
        publishedEpisodesCount: novel.publishedEpisodesCount,
        currentEpisodePriceCoins: novel.currentEpisodePriceCoins, // Virtual field
        monetizationSettings: novel.monetizationSettings as INovel['monetizationSettings'],

        author: authorData,

        themeAssignment: {
          mainTheme: novel.themeAssignment?.mainTheme?.categoryId
            ? {
                categoryId: transformPopulatedCategory(novel.themeAssignment.mainTheme.categoryId)!, // ‡πÉ‡∏ä‡πâ ! ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô transformPopulatedCategory
                customName: novel.themeAssignment.mainTheme.customName,
              }
            : { categoryId: { _id: new mongoose.Types.ObjectId().toString(), name: '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ' } as PopulatedCategory }, // Default mainTheme
          subThemes: novel.themeAssignment?.subThemes?.map((st: any) => ({
            categoryId: transformPopulatedCategory(st.categoryId)!,
            customName: st.customName,
          })).filter((st: any) => st.categoryId && st.categoryId._id) || [], // ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà categoryId ‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          moodAndTone: transformPopulatedCategoryArray(novel.themeAssignment?.moodAndTone),
          contentWarnings: transformPopulatedCategoryArray(novel.themeAssignment?.contentWarnings),
          customTags: novel.themeAssignment?.customTags || [],
        },
        language: transformPopulatedCategory(novel.language) || { _id: new mongoose.Types.ObjectId().toString(), name: '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏' } as PopulatedCategory, // Default language
        ageRatingCategoryId: transformPopulatedCategory(novel.ageRatingCategoryId), // ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô undefined ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
      };
    });

    console.log(`‚úÖ [API /api/novels] Successfully fetched and transformed ${novels.length} novels for filter: ${filter}, page: ${page}, limit: ${limit}`);

    return NextResponse.json(
      {
        novels,
        pagination: {
          total,
          page,
          limit,
          totalPages: Math.ceil(total / limit),
        },
      },
      { status: 200 }
    );
  } catch (error: any) {
    console.error(`‚ùå [API /api/novels] Critical error fetching novels (URL: ${request ? request.url : 'N/A'}):`, error.message, error.stack);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢", details: error.message },
      { status: 500 }
    );
  }
}