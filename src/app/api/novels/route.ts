// src/app/api/novels/route.ts
import { NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb";
import NovelModel, { NovelStatus, NovelAccessLevel, INovel, NovelContentType, IPromotionDetails } from "@/backend/models/Novel";
import UserModel from "@/backend/models/User"; // IUser can be used for typing if needed, but PopulatedAuthor is more specific for card
import CategoryModel, { ICategory } from "@/backend/models/Category";
import { NovelCardData, PopulatedAuthor, PopulatedCategory } from "@/components/NovelCard"; // Import the specific data structure for the frontend
import mongoose from "mongoose";

// Helper function to ensure models are initialized
// Mongoose automatically handles model compilation, but this can be an explicit check.
const ensureModels = () => {
  NovelModel;
  UserModel;
  CategoryModel;
};

export async function GET(request: Request) {
  try {
    await dbConnect();
    ensureModels(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ model ‡∏ñ‡∏π‡∏Å initialize ‡πÅ‡∏•‡πâ‡∏ß

    const { searchParams } = new URL(request.url);
    const filter = searchParams.get("filter") || "trending";
    const limit = parseInt(searchParams.get("limit") || "8", 10);
    const page = parseInt(searchParams.get("page") || "1", 10);
    const categorySlug = searchParams.get("categorySlug");
    const languageId = searchParams.get("languageId");
    const novelType = searchParams.get("novelType"); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô visual-novel

    const skip = (page - 1) * limit;

    console.log(`üì° [API /api/novels] Called with URL: ${request.url}`);

    const query: any = {
      status: NovelStatus.PUBLISHED, // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß
      accessLevel: NovelAccessLevel.PUBLIC, // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞
      isDeleted: false, // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö (soft delete)
    };
    const sort: any = {};

    if (novelType === "visual-novel") {
      query["sourceType.type"] = NovelContentType.INTERACTIVE_FICTION; // ‡∏Å‡∏£‡∏≠‡∏á Visual Novel ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      console.log(`‚ÑπÔ∏è [API /api/novels] Filtering for Visual Novels (Interactive Fiction)`);
    }

    if (categorySlug) {
      const category = await CategoryModel.findOne({ slug: categorySlug }).lean();
      if (category) {
        console.log(`‚ÑπÔ∏è [API /api/novels] Filtering by category: ${category.name} (ID: ${category._id})`);
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç $or ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ fields ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö category
        const categoryConditions = [
          { "themeAssignment.mainTheme.categoryId": category._id },
          { "themeAssignment.subThemes.categoryId": category._id },
          { "narrativeFocus.artStyle": category._id },
          { "narrativeFocus.commonTropes": category._id },
          { "narrativeFocus.interactivityLevel": category._id },
          { "narrativeFocus.narrativePacingTags": category._id },
          { "narrativeFocus.primaryConflictTypes": category._id },
          { "narrativeFocus.targetAudienceProfileTags": category._id },
          { "narrativeFocus.lengthTag": category._id },
          // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á Category ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        ];
        if (query.$or) {
          query.$and = [ { $or: query.$or } , { $or: categoryConditions }];
        } else {
          query.$or = categoryConditions;
        }

      } else {
        console.warn(`‚ö†Ô∏è [API /api/novels] Category with slug "${categorySlug}" not found.`);
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ category ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏•‡∏¢‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö requirement
        // return NextResponse.json({ novels: [], pagination: { total: 0, page, limit, totalPages:0 }}, { status: 200 });
      }
    }

    if (languageId) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≥‡πÑ‡∏õ query
      if (mongoose.Types.ObjectId.isValid(languageId)) {
        query.language = languageId; // language ‡πÉ‡∏ô NovelModel ‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á Category
         console.log(`‚ÑπÔ∏è [API /api/novels] Filtering by languageId: ${languageId}`);
      } else {
        console.warn(`‚ö†Ô∏è [API /api/novels] Invalid languageId format: "${languageId}". Skipping language filter.`);
      }
    }

    switch (filter) {
      case "trending": // ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
        sort["stats.trendingStats.trendingScore"] = -1; // ‡πÉ‡∏ä‡πâ trendingScore ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
        sort["stats.viewsCount"] = -1; // ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ viewsCount
        sort["stats.followersCount"] = -1;
        sort["stats.lastPublishedEpisodeAt"] = -1;
        // query.isCompleted = false; // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö‡πÄ‡∏™‡∏°‡∏≠‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö trending
        console.log(`‚ÑπÔ∏è [API /api/novels] Applying filter: trending`);
        break;
      case "published": // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (New Releases)
        sort["publishedAt"] = -1; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        sort["stats.lastPublishedEpisodeAt"] = -1; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏ï‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        console.log(`‚ÑπÔ∏è [API /api/novels] Applying filter: published (new releases)`);
        break;
      case "promoted": // ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏î‡πà‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
        const now = new Date();
        // query.isFeatured = true; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isFeatured ‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
        // ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà active
         query.$or = [
            { isFeatured: true },
            {
                "monetizationSettings.activePromotion.isActive": true,
                "monetizationSettings.activePromotion.promotionStartDate": { $lte: now },
                "monetizationSettings.activePromotion.promotionEndDate": { $gte: now },
                "monetizationSettings.activePromotion.promotionalPriceCoins": { $exists: true, $ne: null }
            }
        ];
        sort["stats.viewsCount"] = -1;
        sort["publishedAt"] = -1;
        console.log(`‚ÑπÔ∏è [API /api/novels] Applying filter: promoted (featured or active promotions)`);
        break;
      case "completed": // ‡∏à‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏π‡∏£‡∏ì‡πå
        query.isCompleted = true;
        sort["stats.averageRating"] = -1;
        sort["stats.viewsCount"] = -1;
        sort["publishedAt"] = -1; // ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        console.log(`‚ÑπÔ∏è [API /api/novels] Applying filter: completed`);
        break;
      default:
        console.error(`‚ùå [API /api/novels] Invalid filter parameter: ${filter}`);
        return NextResponse.json(
          { error: "‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
          { status: 400 }
        );
    }

    const total = await NovelModel.countDocuments(query);
    console.log(`‚ÑπÔ∏è [API /api/novels] Found ${total} novels matching query:`, JSON.stringify(query), `Sort:`, JSON.stringify(sort));

    // ‡πÉ‡∏ä‡πâ NovelCardData[] ‡πÄ‡∏õ‡πá‡∏ô type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö frontend
    const novels: NovelCardData[] = await NovelModel.find(query)
      .populate<{ author: PopulatedAuthor }>({
        path: "author",
        select: "username profile.displayName profile.penName profile.avatarUrl roles",
        model: UserModel, // Explicitly provide model for robustness
      })
      .populate<{ themeAssignment: { mainTheme: { categoryId: PopulatedCategory } } }>({
        path: "themeAssignment.mainTheme.categoryId",
        select: "name slug localizations iconUrl color categoryType",
        model: CategoryModel,
      })
      .populate<{ language: PopulatedCategory }>({
        path: "language",
        select: "name slug localizations iconUrl color",
        model: CategoryModel,
      })
      .populate<{ ageRatingCategoryId?: PopulatedCategory }>({
        path: "ageRatingCategoryId",
        select: "name slug localizations iconUrl color description", // description ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Card
        model: CategoryModel,
      })
      // ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ populate ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡πÄ‡∏ä‡πà‡∏ô subThemes, contentWarnings ‡∏´‡∏≤‡∏Å NovelCard ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
      // .populate<{ themeAssignment: { subThemes?: { categoryId: PopulatedCategory }[] } }>({
      //   path: "themeAssignment.subThemes.categoryId",
      //   select: "name slug iconUrl color categoryType",
      //   model: CategoryModel,
      // })
      .sort(sort)
      .skip(skip)
      .limit(limit)
      .lean({ virtuals: true }); // lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠ performance ‡πÅ‡∏•‡∏∞ virtuals: true ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ virtuals ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ

    console.log(`‚úÖ [API /api/novels] Fetched ${novels.length} novels for filter: ${filter}, page: ${page}, limit: ${limit}`);

    return NextResponse.json(
      {
        novels, // novels ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô type NovelCardData[]
        pagination: {
          total,
          page,
          limit,
          totalPages: Math.ceil(total / limit),
        },
      },
      { status: 200 }
    );
  } catch (error: any) {
    console.error(`‚ùå [API /api/novels] Error fetching novels (URL: ${request.url}):`, error.message, error.stack);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢", details: error.message },
      { status: 500 }
    );
  }
}