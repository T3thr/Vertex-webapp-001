// src/app/api/novels/route.ts

import { NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb";
import NovelModel from "@/backend/models/Novel";
import UserModel from "@/backend/models/User";

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ GET request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
export async function GET(request: Request) {
  await dbConnect();

  try {
    const { searchParams } = new URL(request.url);
    const filter = searchParams.get("filter") || "trending";
    const limit = parseInt(searchParams.get("limit") || "8", 10);
    const page = parseInt(searchParams.get("page") || "1", 10);
    const skip = (page - 1) * limit;

    console.log(`üì° API /api/novels called with query: ${request.url}`);

    // ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö query
    const query: any = {
      isDeleted: false,
      visibility: "public",
    };
    const sort: any = {};

    switch (filter) {
      case "trending":
        // ‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°: ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°, ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°, ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        sort.viewsCount = -1;
        sort.followersCount = -1;
        sort.lastEpisodePublishedAt = -1;
        break;
      case "published":
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
        sort.lastEpisodePublishedAt = -1;
        sort.createdAt = -1;
        query.status = "published";
        break;
      case "discount":
        // ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©: ‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ isDiscounted ‡πÄ‡∏õ‡πá‡∏ô true
        query.isDiscounted = true;
        sort.viewsCount = -1;
        sort.createdAt = -1;
        break;
      case "completed":
        // ‡∏à‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏π‡∏£‡∏ì‡πå: ‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ completed
        query.status = "completed";
        sort.averageRating = -1;
        sort.viewsCount = -1;
        break;
      default:
        console.error(`‚ùå Invalid filter parameter: ${filter}`);
        return NextResponse.json(
          { error: "‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
          { status: 400 }
        );
    }

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö query ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
    const total = await NovelModel().countDocuments(query);
    console.log(`‚ÑπÔ∏è Found ${total} novels matching filter: ${filter}`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á User Model ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö populate
    const User = UserModel();
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏° populate author
    const novels = await NovelModel()
      .find(query)
      .populate({
        path: "author",
        select: "username profile.displayName profile.avatar",
        model: User,
      })
      .sort(sort)
      .skip(skip)
      .limit(limit)
      .lean();

    console.log(`‚úÖ Fetched ${novels.length} novels for filter: ${filter}`);

    return NextResponse.json(
      {
        novels,
        pagination: {
          total,
          page,
          limit,
          totalPages: Math.ceil(total / limit),
        },
      },
      { status: 200 }
    );
  } catch (error: any) {
    console.error(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ (filter: ${request.url}):`, error.message);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" },
      { status: 500 }
    );
  }
}