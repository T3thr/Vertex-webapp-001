// src/app/api/novels/[slug]/route.ts
// API Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug
// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢

import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ dbConnect ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ
import NovelModel, { INovel, NovelStatus, INovelStats, IThemeAssignment, INarrativeFocus } from "@/backend/models/Novel";
import UserModel, { IUser } from "@/backend/models/User";
import CategoryModel, { ICategory, CategoryType } from "@/backend/models/Category";
import EpisodeModel, { IEpisode, EpisodeStatus, IEpisodeStats } from "@/backend/models/Episode";
import CharacterModel, { ICharacter } from "@/backend/models/Character"; // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ CharacterRoleInStory ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô GET ‡∏ô‡∏µ‡πâ
import mongoose, { Types, HydratedDocument } from "mongoose";

// --- ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Populate ‡πÅ‡∏•‡πâ‡∏ß ---

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Author ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
interface PopulatedAuthorForApi {
  _id: string; // Stringified ObjectId
  username?: string; // username ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡∏≠‡∏á User model
  profile?: {
    displayName?: string;
    penName?: string;
    avatarUrl?: string;
  };
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Category ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
interface PopulatedCategoryForApi {
  _id: string; // Stringified ObjectId
  name: string;
  slug: string;
  iconUrl?: string;
  color?: string;
  description?: string;
  categoryType: CategoryType;
  localizations?: ICategory["localizations"];
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Episode ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ô
export interface PopulatedEpisodeSummary extends Pick<IEpisode,
  "title" | "episodeOrder" | "status" | "accessType" | "priceCoins"
> {
  _id: string; // Stringified ObjectId
  slug: string; // Derived from episodeOrder (e.g., episodeOrder.toString())
  publishedAt?: string | null; // ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô ISO String ‡∏´‡∏£‡∏∑‡∏≠ null
  stats: Pick<IEpisodeStats, "viewsCount" | "likesCount" | "commentsCount" | "totalWords" | "estimatedReadingTimeMinutes">;
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° method getEffectivePrice ‡πÅ‡∏•‡∏∞ getOriginalPrice ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô API
  // ‡πÅ‡∏ï‡πà‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ client ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å method ‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠ API ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡πâ client ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
  effectivePrice?: number; // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ô API ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
  originalPrice?: number; // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏° (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ô API ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Character ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Tab ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
export interface PopulatedCharacterSummary extends Pick<ICharacter,
  "name" | "roleInStory" | "customRoleDetails" | "characterCode"
> {
  _id: string; // Stringified ObjectId
  synopsis?: string; // ‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å character.description
  profileImageUrl?: string; // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å profileImageMediaId ‡πÅ‡∏•‡∏∞ mediaSourceType ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô URL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏´‡∏£‡∏∑‡∏≠ virtual
}

// --- Interface ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Novel ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö (Populated) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Detail ---
export interface PopulatedNovelForDetailPage {
  _id: string;
  title: string;
  slug: string;
  author: PopulatedAuthorForApi | null;
  synopsis: string;
  longDescription?: string;
  coverImageUrl?: string;
  bannerImageUrl?: string;
  status: NovelStatus;
  isCompleted: boolean;
  endingType: INovel["endingType"];
  totalEpisodesCount: number;
  publishedEpisodesCount: number;
  monetizationSettings: INovel["monetizationSettings"];
  currentEpisodePriceCoins: number; // ‡∏à‡∏≤‡∏Å virtual ‡∏Ç‡∏≠‡∏á NovelModel

  mainThemeCategory?: PopulatedCategoryForApi | null;
  subThemeCategories?: PopulatedCategoryForApi[];
  moodAndToneCategories?: PopulatedCategoryForApi[];
  contentWarningCategories?: PopulatedCategoryForApi[];
  ageRatingCategory?: PopulatedCategoryForApi | null;
  languageCategory: PopulatedCategoryForApi; // language ‡πÄ‡∏õ‡πá‡∏ô required ‡πÉ‡∏ô model
  artStyleCategory?: PopulatedCategoryForApi | null;
  customTags?: string[];

  episodesList: PopulatedEpisodeSummary[];
  charactersList: PopulatedCharacterSummary[];

  formattedViewsCount: string;
  formattedLikesCount: string;
  formattedFollowersCount: string;
  formattedWordsCount: string;
  formattedCommentsCount: string;
  formattedAverageRating: string;

  // ‡∏™‡πà‡∏á rawStats ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ client ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  rawStats: INovelStats;

  firstEpisodeSlug?: string;
  firstPublishedAt?: string | null; // ISO String ‡∏´‡∏£‡∏∑‡∏≠ null (publishedAt ‡∏Ç‡∏≠‡∏á Novel)
  updatedAt: string; // ISO String
  createdAt?: string | null; // ISO String ‡∏´‡∏£‡∏∑‡∏≠ null
  lastContentUpdatedAt?: string | null; // ISO String ‡∏´‡∏£‡∏∑‡∏≠ null
}

// --- ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö API ---
interface NovelResponse {
  novel: PopulatedNovelForDetailPage;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á Date object ‡∏´‡∏£‡∏∑‡∏≠ string ‡πÄ‡∏õ‡πá‡∏ô ISO string ‡∏´‡∏£‡∏∑‡∏≠ null
function safeToISOString(date?: Date | string | null): string | null {
    if (!date) return null;
    try {
        return new Date(date).toISOString();
    } catch (e) {
        // console.warn(`[API Helper] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${date}`, e);
        return null;
    }
}

/**
 * GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug
 * @param req ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å Next.js
 * @param context ‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ params ‡∏Ç‡∏≠‡∏á route
 * @returns JSON response ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
 */
export async function GET(
  req: NextRequest,
  context: { params: { slug: string } } // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Next.js ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô params ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Promise ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÅ‡∏•‡πâ‡∏ß
): Promise<NextResponse<NovelResponse | { error: string; details?: string }>> {
  let slugForLogging = "unknown_slug";

  try {
    const { slug } = context.params; // params ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Promise ‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÜ ‡∏Ç‡∏≠‡∏á App Router ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    slugForLogging = slug;

    if (!slug) {
      console.error("‚ùå [API /novels/[slug]] ‡∏Ç‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö slug ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return NextResponse.json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ slug ‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" }, { status: 400 });
    }

    console.log(`\n--- üì° [API GET /api/novels/${slug}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ---`);

    await dbConnect(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ dbConnect() ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡πÜ
    console.log("‚úÖ [API /novels/[slug]] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏° populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ .lean() ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ Mongoose Documents ‡∏ã‡∏∂‡πà‡∏á virtuals ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    const novelQuery = NovelModel.findOne({
      slug,
      isDeleted: { $ne: true }, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏î‡∏∂‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å soft delete
      status: { $nin: [NovelStatus.BANNED_BY_ADMIN, NovelStatus.REJECTED_BY_ADMIN, NovelStatus.ARCHIVED] }, // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á
    })
      .populate<{ author: HydratedDocument<IUser> | null }>({
        path: "author",
        model: UserModel, // Mongoose ‡∏à‡∏∞‡πÉ‡∏ä‡πâ UserModel ‡∏ó‡∏µ‡πà import ‡∏°‡∏≤
        select: "_id username profile.displayName profile.penName profile.avatarUrl",
      })
      .populate<{ language: HydratedDocument<ICategory> | null }>({
        path: "language", // language ‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡πÉ‡∏ô INovel
        model: CategoryModel,
      })
      .populate<{ ageRatingCategoryId: HydratedDocument<ICategory> | null }>({
        path: "ageRatingCategoryId",
        model: CategoryModel,
      })
      .populate<{ mainThemeCategoryId: HydratedDocument<ICategory> | null }>({
        path: "themeAssignment.mainTheme.categoryId", // Populate categoryId ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô mainTheme
        model: CategoryModel,
      })
      .populate<{ subThemeCategoryIds: HydratedDocument<ICategory>[] | null }>({
        path: "themeAssignment.subThemes.categoryId", // Populate categoryId ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô array subThemes
        model: CategoryModel,
      })
      .populate<{ moodAndToneCategoryIds: HydratedDocument<ICategory>[] | null }>({
        path: "themeAssignment.moodAndTone", // Populate array of categoryIds
        model: CategoryModel,
      })
      .populate<{ contentWarningCategoryIds: HydratedDocument<ICategory>[] | null }>({
        path: "themeAssignment.contentWarnings", // Populate array of categoryIds
        model: CategoryModel,
      })
      .populate<{ artStyleCategoryId: HydratedDocument<ICategory> | null }>({
        path: "narrativeFocus.artStyle", // Populate artStyle ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô narrativeFocus
        model: CategoryModel,
      });
      // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á .select() ‡∏ó‡∏∏‡∏Å field ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ prooject ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©
      // Mongoose ‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏ó‡∏∏‡∏Å fields ‡∏à‡∏≤‡∏Å schema ‡πÇ‡∏î‡∏¢ default. ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ select.
      // Virtuals ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏£‡∏ß‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å .toObject({ virtuals: true }) ‡∏´‡∏£‡∏∑‡∏≠ .toJSON({ virtuals: true })

    const novelData = await novelQuery.exec();

    if (!novelData) {
      console.warn(`‚ö†Ô∏è [API /novels/${slug}] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}" ‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ`);
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" }, { status: 404 });
    }
    console.log(`‚úÖ [API /novels/${slug}] ‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢: "${novelData.title}" (ID: ${novelData._id})`);

    // ‡πÅ‡∏õ‡∏•‡∏á Mongoose Document ‡πÄ‡∏õ‡πá‡∏ô Plain Object ‡∏û‡∏£‡πâ‡∏≠‡∏° Virtuals
    // Type INovel ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ virtuals ‡∏ñ‡∏π‡∏Å define ‡πÉ‡∏ô schema ‡πÅ‡∏•‡∏∞ Mongoose ‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ type ‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô
    const novelObject = novelData.toObject({ virtuals: true }) as INovel & { _id: Types.ObjectId };


    // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ mapping ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    const mapPopulatedAuthor = (authorDoc?: HydratedDocument<IUser> | IUser | null): PopulatedAuthorForApi | null => {
        if (!authorDoc) return null;
        // authorDoc ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô HydratedDocument ‡∏´‡∏£‡∏∑‡∏≠ plain object ‡∏à‡∏≤‡∏Å toObject()
        const authorData = authorDoc instanceof mongoose.Document ? authorDoc.toObject() : authorDoc;
        return {
            _id: (authorData._id as Types.ObjectId).toString(),
            username: authorData.username,
            profile: authorData.profile ? {
                displayName: authorData.profile.displayName,
                penName: authorData.profile.penName,
                avatarUrl: authorData.profile.avatarUrl,
            } : undefined,
        };
    };

    const mapPopulatedCategory = (categoryDoc?: HydratedDocument<ICategory> | ICategory | null): PopulatedCategoryForApi | null => {
        if (!categoryDoc) return null;
        const categoryData = categoryDoc instanceof mongoose.Document ? categoryDoc.toObject() : categoryDoc;
        return {
            _id: (categoryData._id as Types.ObjectId).toString(),
            name: categoryData.name,
            slug: categoryData.slug,
            iconUrl: categoryData.iconUrl,
            color: categoryData.color,
            description: categoryData.description,
            categoryType: categoryData.categoryType,
            localizations: categoryData.localizations,
        };
    };

    // 2. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ô (Episodes)
    const episodesHydrated = await EpisodeModel.find({
      novelId: novelObject._id, // ‡πÉ‡∏ä‡πâ _id ‡∏à‡∏≤‡∏Å novelObject
      status: { $in: [EpisodeStatus.PUBLISHED, EpisodeStatus.SCHEDULED] } // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ß‡πâ
    })
      .sort({ episodeOrder: 1 })
      .select("_id title episodeOrder status accessType priceCoins publishedAt stats") // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      .exec(); // ‡πÑ‡∏î‡πâ Mongoose documents

    const episodesList: PopulatedEpisodeSummary[] = await Promise.all(episodesHydrated.map(async epDoc => {
        const ep = epDoc.toObject({ virtuals: true }) as IEpisode & {_id: Types.ObjectId}; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô object ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å virtuals
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≠‡∏ô (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á - ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        // const effectivePrice = await epDoc.getEffectivePrice(); // epDoc ‡∏Ñ‡∏∑‡∏≠ Mongoose Document
        // const originalPrice = await epDoc.getOriginalPrice();

        return {
            _id: ep._id.toString(),
            title: ep.title,
            slug: ep.episodeOrder.toString(),
            episodeOrder: ep.episodeOrder,
            status: ep.status,
            accessType: ep.accessType,
            priceCoins: ep.priceCoins,
            publishedAt: safeToISOString(ep.publishedAt),
            stats: {
                viewsCount: ep.stats?.viewsCount || 0,
                likesCount: ep.stats?.likesCount || 0,
                commentsCount: ep.stats?.commentsCount || 0,
                totalWords: ep.stats?.totalWords || 0,
                estimatedReadingTimeMinutes: ep.stats?.estimatedReadingTimeMinutes || 0,
            },
            // effectivePrice, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            // originalPrice,  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        };
    }));
    console.log(`‚úÖ [API /novels/${slug}] ‡∏î‡∏∂‡∏á ${episodesList.length} ‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ "${novelObject.title}"`);

    // 3. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ (Characters)
    const charactersHydrated = await CharacterModel.find({
      novelId: novelObject._id,
      isArchived: { $ne: true },
    })
    // .sort({ 'characterProfile.displayOrder.writer': 1, name: 1 }) // displayOrder ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô CharacterModel ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    .sort({ name: 1 }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ (‡∏´‡∏£‡∏∑‡∏≠ field ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)
    .select("_id characterCode name roleInStory customRoleDetails description profileImageMediaId profileImageSourceType") // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å fields, ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á description
    .exec(); // ‡πÑ‡∏î‡πâ Mongoose documents

    const charactersList: PopulatedCharacterSummary[] = charactersHydrated.map(charDoc => {
        const char = charDoc.toObject({ virtuals: true }) as ICharacter & {_id: Types.ObjectId}; // virtuals: true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ profileImageUrlFull ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

        let imageUrl = char.profileImageUrl; // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ virtual ‡∏Å‡πà‡∏≠‡∏ô
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ virtual ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ placeholder ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
        if (!imageUrl || imageUrl.startsWith('placeholder_image_url_for_')) {
            if (char.profileImageMediaId && char.profileImageSourceType) {
                // TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Media/OfficialMedia ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
                // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: imageUrl = await getMediaUrl(char.profileImageMediaId, char.profileImageSourceType);
                // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ placeholder ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
                imageUrl = `/api/media_placeholder/${char.profileImageSourceType}/${char.profileImageMediaId.toString()}`;
            } else {
                imageUrl = "/images/default-character-avatar.png"; // ‡∏£‡∏π‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            }
        }

        return {
            _id: char._id.toString(),
            characterCode: char.characterCode,
            name: char.name,
            roleInStory: char.roleInStory,
            customRoleDetails: char.customRoleDetails,
            synopsis: char.description, // ‡πÉ‡∏ä‡πâ description ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô synopsis
            profileImageUrl: imageUrl,
        };
    });
    console.log(`‚úÖ [API /novels/${slug}] ‡∏î‡∏∂‡∏á ${charactersList.length} ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ "${novelObject.title}"`);

    // 4. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    // novelObject ‡πÄ‡∏õ‡πá‡∏ô plain object ‡∏ó‡∏µ‡πà‡∏°‡∏µ virtuals ‡πÅ‡∏•‡πâ‡∏ß
    // ‡πÅ‡∏ï‡πà field ‡∏ó‡∏µ‡πà populate ‡∏°‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô author, language) ‡∏Å‡πá‡πÄ‡∏õ‡πá‡∏ô plain objects ‡∏î‡πâ‡∏ß‡∏¢
    const typedAuthor = novelObject.author as HydratedDocument<IUser> | IUser | null | undefined;
    const typedLanguage = novelObject.language as HydratedDocument<ICategory> | ICategory | null | undefined;
    const typedAgeRating = novelObject.ageRatingCategoryId as HydratedDocument<ICategory> | ICategory | null | undefined;
    
    // themeAssignment ‡πÅ‡∏•‡∏∞ narrativeFocus ‡∏à‡∏∞‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏° schema
    const mainThemeCat = novelObject.themeAssignment?.mainTheme?.categoryId as unknown as HydratedDocument<ICategory> | ICategory | null | undefined;
    const subThemeCats = novelObject.themeAssignment?.subThemes?.map(st => st.categoryId) as (HydratedDocument<ICategory> | ICategory | null | undefined)[] | undefined;
    const moodToneCats = novelObject.themeAssignment?.moodAndTone as (HydratedDocument<ICategory> | ICategory | null | undefined)[] | undefined;
    const contentWarningCats = novelObject.themeAssignment?.contentWarnings as (HydratedDocument<ICategory> | ICategory | null | undefined)[] | undefined;
    const artStyleCat = novelObject.narrativeFocus?.artStyle as HydratedDocument<ICategory> | ICategory | null | undefined;


    const responseNovel: PopulatedNovelForDetailPage = {
      _id: novelObject._id.toString(),
      title: novelObject.title,
      slug: novelObject.slug,
      author: mapPopulatedAuthor(typedAuthor),
      synopsis: novelObject.synopsis || "",
      longDescription: novelObject.longDescription,
      coverImageUrl: novelObject.coverImageUrl,
      bannerImageUrl: novelObject.bannerImageUrl,
      status: novelObject.status,
      isCompleted: novelObject.isCompleted,
      endingType: novelObject.endingType,
      totalEpisodesCount: novelObject.totalEpisodesCount,
      publishedEpisodesCount: novelObject.publishedEpisodesCount,
      monetizationSettings: novelObject.monetizationSettings,
      currentEpisodePriceCoins: novelObject.currentEpisodePriceCoins, // Virtual field ‡∏à‡∏≤‡∏Å NovelModel

      mainThemeCategory: mapPopulatedCategory(mainThemeCat),
      subThemeCategories: subThemeCats?.map(cat => mapPopulatedCategory(cat)).filter(Boolean) as PopulatedCategoryForApi[] || [],
      moodAndToneCategories: moodToneCats?.map(cat => mapPopulatedCategory(cat)).filter(Boolean) as PopulatedCategoryForApi[] || [],
      contentWarningCategories: contentWarningCats?.map(cat => mapPopulatedCategory(cat)).filter(Boolean) as PopulatedCategoryForApi[] || [],
      ageRatingCategory: mapPopulatedCategory(typedAgeRating),
      languageCategory: mapPopulatedCategory(typedLanguage) || { _id: '', name: 'N/A', slug: 'na', categoryType: CategoryType.LANGUAGE } as PopulatedCategoryForApi, // ‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πá‡∏ô field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      artStyleCategory: mapPopulatedCategory(artStyleCat),
      customTags: novelObject.themeAssignment?.customTags || [],

      episodesList,
      charactersList,

      formattedViewsCount: formatNumber(novelObject.stats?.viewsCount),
      formattedLikesCount: formatNumber(novelObject.stats?.likesCount),
      formattedFollowersCount: formatNumber(novelObject.stats?.followersCount),
      formattedWordsCount: formatNumber(novelObject.stats?.totalWords),
      formattedCommentsCount: formatNumber(novelObject.stats?.commentsCount),
      formattedAverageRating: (novelObject.stats?.averageRating ?? 0).toFixed(1),
      
      rawStats: novelObject.stats, // ‡∏™‡πà‡∏á INovelStats ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

      firstEpisodeSlug: episodesList.find(ep => ep.status === EpisodeStatus.PUBLISHED)?.slug,
      firstPublishedAt: safeToISOString(novelObject.publishedAt),
      updatedAt: safeToISOString(novelObject.updatedAt)!,
      createdAt: safeToISOString(novelObject.createdAt),
      lastContentUpdatedAt: safeToISOString(novelObject.lastContentUpdatedAt),
    };

    console.log(`‚úÖ [API /novels/${slug}] ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ "${responseNovel.title}"`);
    const response: NovelResponse = { novel: responseNovel };
    return NextResponse.json(response, { status: 200 });

  } catch (error: any) {
    console.error(`‚ùå [API /novels/${slugForLogging}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:`, error.message, error.stack);
    
    if (error instanceof mongoose.Error.CastError) {
      return NextResponse.json({ error: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö slug ‡∏´‡∏£‡∏∑‡∏≠ ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", details: error.message }, { status: 400 });
    }
    
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢", details: error.message },
      { status: 500 }
    );
  } finally {
    console.log(`--- üì° [API GET /api/novels/${slugForLogging}] ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î --- \n`);
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö format ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ (K, M)
 * @param num - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ format
 * @returns ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà format ‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏ä‡πà‡∏ô 1.2M, 5K, 123) ‡∏´‡∏£‡∏∑‡∏≠ '0' ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô null/undefined/NaN
 */
function formatNumber(num?: number | null): string { // ‡∏õ‡∏£‡∏±‡∏ö num ‡πÄ‡∏õ‡πá‡∏ô optional ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö null ‡πÑ‡∏î‡πâ
  if (num === null || num === undefined || isNaN(num)) {
    return "0";
  }
  if (num === 0) return "0";
  if (Math.abs(num) >= 1000000) {
    return (num / 1000000).toFixed(1).replace(/\.0$/, "") + "M";
  }
  if (Math.abs(num) >= 1000) {
    return (num / 1000).toFixed(1).replace(/\.0$/, "") + "K";
  }
  return num.toString();
}