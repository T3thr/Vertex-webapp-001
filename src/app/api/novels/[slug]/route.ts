// src/app/api/novels/[slug]/route.ts
// API Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug
// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢

import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb";
import NovelModel, { INovel } from "@/backend/models/Novel";
import UserModel, { IUser } from "@/backend/models/User";
import CategoryModel, { ICategory } from "@/backend/models/Category";
import EpisodeModel, { IEpisode } from "@/backend/models/Episode";
import mongoose from "mongoose";

// --- Interfaces ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Populate ‡πÅ‡∏•‡πâ‡∏ß ---

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Author ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
interface PopulatedAuthor extends Pick<IUser, "_id" | "username"> {
  profile?: {
    displayName?: string;
    avatar?: string;
  };
  socialStats?: {
    followersCount: number;
  };
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Category ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
type PopulatedCategory = Pick<ICategory, "_id" | "name" | "slug" | "themeColor" | "iconUrl">;

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Episode ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô List
type PopulatedEpisodeSummary = Pick<
  IEpisode,
  | "title"
  | "slug"
  | "episodeNumber"
  | "status"
  | "visibility"
  | "isFree"
  | "priceInCoins"
  | "publishedAt"
  | "viewsCount"
  | "likesCount"
  | "commentsCount"
> & {
  _id: string; // Explicitly type _id as string
};

// --- Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Novel ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö (Populated) ---
export interface PopulatedNovelForDetailPage
  extends Omit<
    INovel,
    | "author"
    | "categories"
    | "subCategories"
    | "embeddingVector"
    | "seo"
    | "stats"
    | "sentimentAnalysis"
    | "genreDistribution"
  > {
  _id: string;
  author: PopulatedAuthor | null;
  categories: PopulatedCategory[];
  subCategories?: PopulatedCategory[];
  episodesList: PopulatedEpisodeSummary[];
  formattedViewsCount: string;
  formattedLikesCount: string;
  formattedFollowersCount: string;
  formattedWordsCount: string;
  firstEpisodeSlug?: string;
  firstPublishedAt?: Date; // Optional to match INovel
  updatedAt: Date; // Non-optional, guaranteed by timestamps
  description: string;
  tags: string[];
}

// --- Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö API ---
interface NovelResponse {
  novel: PopulatedNovelForDetailPage;
}

/**
 * GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug
 * @param req ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å Next.js
 * @returns JSON response ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
 */
export async function GET(
  req: NextRequest,
  { params }: { params: Record<string, string | string[]> }
): Promise<NextResponse<NovelResponse | { error: string }>> {
  try {
    // ‡∏î‡∏∂‡∏á slug ‡∏à‡∏≤‡∏Å params
    const slug = params.slug;
    if (!slug || Array.isArray(slug)) {
      console.error("‚ùå ‡∏Ç‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö slug ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return NextResponse.json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ slug ‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" }, { status: 400 });
    }

    console.log(`\n--- üì° [API GET /api/novels/${slug}] ---`);

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await dbConnect();
    console.log("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å
    const novel = await NovelModel()
      .findOne({
        slug,
        isDeleted: false,
      })
      .populate<{ author: PopulatedAuthor | null }>({
        path: "author",
        model: UserModel(),
        select: "username profile.displayName profile.avatar socialStats.followersCount",
      })
      .populate<{ categories: PopulatedCategory[] }>({
        path: "categories",
        model: CategoryModel(),
        select: "name slug themeColor iconUrl",
      })
      .populate<{ subCategories?: PopulatedCategory[] }>({
        path: "subCategories",
        model: CategoryModel(),
        select: "name slug themeColor iconUrl",
      })
      .select("-embeddingVector -sentimentAnalysis -genreDistribution")
      .lean()
      .exec();

    if (!novel) {
      console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}"`);
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" }, { status: 404 });
    }

    console.log(`‚úÖ ‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ "${novel.title}"`);

    // 2. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ô
    const rawEpisodesList = await EpisodeModel()
      .find({
        novel: novel._id,
        isDeleted: false,
      })
      .sort({ episodeNumber: 1 })
      .select(
        "_id title slug episodeNumber status visibility isFree priceInCoins publishedAt viewsCount likesCount commentsCount"
      )
      .lean()
      .exec();

    // ‡πÅ‡∏õ‡∏•‡∏á episodesList ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö PopulatedEpisodeSummary
    const episodesList: PopulatedEpisodeSummary[] = rawEpisodesList.map((episode) => ({
      _id: episode._id.toString(),
      title: episode.title,
      slug: episode.slug,
      episodeNumber: episode.episodeNumber,
      status: episode.status,
      visibility: episode.visibility,
      isFree: episode.isFree,
      priceInCoins: episode.priceInCoins,
      publishedAt: episode.publishedAt,
      viewsCount: episode.viewsCount,
      likesCount: episode.likesCount,
      commentsCount: episode.commentsCount,
    }));

    console.log(`‚úÖ ‡∏î‡∏∂‡∏á ${episodesList.length} ‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ "${novel.title}"`);

    // 3. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Response
    const responseData: PopulatedNovelForDetailPage = {
      ...novel,
      _id: novel._id.toString(),
      author: novel.author,
      categories: novel.categories,
      subCategories: novel.subCategories,
      episodesList,
      formattedViewsCount: formatNumber(novel.viewsCount ?? 0),
      formattedLikesCount: formatNumber(novel.likesCount ?? 0),
      formattedFollowersCount: formatNumber(novel.followersCount ?? 0),
      formattedWordsCount: formatNumber(novel.wordsCount ?? 0),
      firstEpisodeSlug: episodesList.length > 0 ? episodesList[0].slug : undefined,
      firstPublishedAt: novel.firstPublishedAt ? new Date(novel.firstPublishedAt) : undefined, // Handle undefined
      updatedAt: new Date(novel.updatedAt), // Non-optional, guaranteed by timestamps
      description: novel.description || "",
      tags: novel.tags || [],
    };

    console.log(`‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ "${novel.title}"`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    const response: NovelResponse = { novel: responseData };
    return NextResponse.json(response, { status: 200 });
  } catch (error: any) {
    console.error(`‚ùå [API] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô /api/novels/${params.slug}:`, error);

    if (error instanceof mongoose.Error.CastError) {
      return NextResponse.json({ error: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö slug ‡∏´‡∏£‡∏∑‡∏≠ ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 400 });
    }

    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" },
      { status: 500 }
    );
  } finally {
    console.log(`--- üì° [API GET /api/novels/${params.slug}] ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î --- \n`);
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö format ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ (K, M)
 * @param num - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ format
 * @returns ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà format ‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏ä‡πà‡∏ô 1.2M, 5K, 123) ‡∏´‡∏£‡∏∑‡∏≠ '0' ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô null/undefined
 */
function formatNumber(num: number | null | undefined): string {
  if (num === null || num === undefined || num === 0) {
    return "0";
  }
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1).replace(/\.0$/, "") + "M";
  }
  if (num >= 1000) {
    return (num / 1000).toFixed(1).replace(/\.0$/, "") + "K";
  }
  return num.toString();
}