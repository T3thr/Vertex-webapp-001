// src/app/api/novels/[slug]/route.ts
// API Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug
// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢

import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb";
import NovelModel, { INovel, NovelStatus, INovelStats } from "@/backend/models/Novel";
import UserModel, { IUser } from "@/backend/models/User";
import CategoryModel, { ICategory, CategoryType } from "@/backend/models/Category";
import EpisodeModel, { IEpisode, EpisodeStatus, IEpisodeStats, EpisodeAccessType } from "@/backend/models/Episode";
import CharacterModel, { ICharacter, CharacterRoleInStory } from "@/backend/models/Character";
import mongoose, { Types } from "mongoose";

// --- ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Populate ‡πÅ‡∏•‡πâ‡∏ß ---

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Author ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
interface PopulatedAuthorForApi {
  _id: string; // Stringified ObjectId
  username: string;
  profile?: {
    displayName?: string;
    penName?: string;
    avatarUrl?: string;
  };
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Category ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
interface PopulatedCategoryForApi {
  _id: string; // Stringified ObjectId
  name: string;
  slug: string;
  iconUrl?: string;
  color?: string;
  description?: string;
  categoryType: CategoryType;
  localizations?: ICategory["localizations"];
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Episode ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ô
export interface PopulatedEpisodeSummary extends Pick<IEpisode,
  "title" | "episodeOrder" | "status" | "accessType" | "priceCoins"
> {
  _id: string; // Stringified ObjectId
  slug: string; // Derived from episodeOrder (e.g., episodeOrder.toString())
  publishedAt?: string | null; // ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô ISO String ‡∏´‡∏£‡∏∑‡∏≠ null
  stats: Pick<IEpisodeStats, "viewsCount" | "likesCount" | "commentsCount" | "totalWords" | "estimatedReadingTimeMinutes">;
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Character ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Tab ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
export interface PopulatedCharacterSummary extends Pick<ICharacter,
  "name" | "roleInStory" | "customRoleDetails" | "characterCode"
> {
  _id: string; // Stringified ObjectId
  synopsis?: string; // ‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å characterProfile.synopsis
  profileImageUrl?: string; // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å profileImageMediaId ‡πÅ‡∏•‡∏∞ mediaSourceType ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô URL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
}

// --- Interface ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Novel ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö (Populated) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Detail ---
export interface PopulatedNovelForDetailPage {
  _id: string;
  title: string;
  slug: string;
  author: PopulatedAuthorForApi | null;
  synopsis: string;
  longDescription?: string;
  coverImageUrl?: string;
  bannerImageUrl?: string;
  status: NovelStatus;
  isCompleted: boolean;
  endingType: INovel["endingType"];
  totalEpisodesCount: number;
  publishedEpisodesCount: number;
  monetizationSettings: INovel["monetizationSettings"];
  currentEpisodePriceCoins: number;

  mainThemeCategory?: PopulatedCategoryForApi | null;
  subThemeCategories?: PopulatedCategoryForApi[];
  moodAndToneCategories?: PopulatedCategoryForApi[];
  contentWarningCategories?: PopulatedCategoryForApi[];
  ageRatingCategory?: PopulatedCategoryForApi | null;
  languageCategory: PopulatedCategoryForApi; // language ‡πÄ‡∏õ‡πá‡∏ô required ‡πÉ‡∏ô model
  artStyleCategory?: PopulatedCategoryForApi | null;
  customTags?: string[];

  episodesList: PopulatedEpisodeSummary[];
  charactersList: PopulatedCharacterSummary[];

  formattedViewsCount: string;
  formattedLikesCount: string;
  formattedFollowersCount: string;
  formattedWordsCount: string;
  formattedCommentsCount: string;
  formattedAverageRating: string;

  rawStats: Pick<INovelStats, "viewsCount" | "likesCount" | "followersCount" | "totalWords" | "commentsCount" | "ratingsCount" | "averageRating" | "lastPublishedEpisodeAt" | "uniqueViewersCount" | "sharesCount" | "bookmarksCount" | "estimatedReadingTimeMinutes" | "completionRate" | "purchasesCount">;

  firstEpisodeSlug?: string;
  firstPublishedAt?: string | null; // ISO String ‡∏´‡∏£‡∏∑‡∏≠ null
  updatedAt: string; // ISO String
  createdAt?: string; // ISO String
  lastContentUpdatedAt?: string | null; // ISO String ‡∏´‡∏£‡∏∑‡∏≠ null
}

// --- ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö API ---
interface NovelResponse {
  novel: PopulatedNovelForDetailPage;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á Date object ‡∏´‡∏£‡∏∑‡∏≠ string ‡πÄ‡∏õ‡πá‡∏ô ISO string ‡∏´‡∏£‡∏∑‡∏≠ null
function safeToISOString(date?: Date | string | null): string | null {
    if (!date) return null;
    try {
        return new Date(date).toISOString();
    } catch (e) {
        // console.warn(`[API Helper] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${date}`, e);
        return null; // ‡∏´‡∏£‡∏∑‡∏≠ return ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ client ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    }
}

/**
 * GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug
 * @param req ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å Next.js
 * @param context ‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ params ‡∏Ç‡∏≠‡∏á route (‡πÄ‡∏õ‡πá‡∏ô Promise ‡πÉ‡∏ô Next.js 15+)
 * @returns JSON response ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
 */
export async function GET(
  req: NextRequest,
  context: { params: Promise<{ slug: string }> } // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: params ‡πÄ‡∏õ‡πá‡∏ô Promise ‡∏ï‡∏≤‡∏° Next.js App Router
): Promise<NextResponse<NovelResponse | { error: string; details?: string }>> {
  let slugForLogging = "unknown_slug"; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logging ‡πÉ‡∏ô finally block

  try {
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: await params ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô Promise ‡πÉ‡∏ô Next.js 15+
    const { slug } = await context.params;
    slugForLogging = slug; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï slug ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logging

    if (!slug) {
      console.error("‚ùå [API /novels/[slug]] ‡∏Ç‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö slug ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return NextResponse.json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ slug ‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" }, { status: 400 });
    }

    console.log(`\n--- üì° [API GET /api/novels/${slug}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ---`);

    await dbConnect();
    console.log("‚úÖ [API /novels/[slug]] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏° populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const novelQuery = NovelModel.findOne({
      slug,
      status: { $nin: [NovelStatus.BANNED_BY_ADMIN, NovelStatus.REJECTED_BY_ADMIN] },
    })
      .populate<{ author: IUser | null }>({ // populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
        path: "author",
        model: UserModel,
        select: "_id username profile.displayName profile.penName profile.avatarUrl",
      })
      .populate<{ mainThemeCategory: ICategory | null }>({ // populate ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å
        path: "themeAssignment.mainTheme.categoryId",
        model: CategoryModel,
      })
      .populate<{ subThemeCategoriesRaw: { categoryId: ICategory }[] }>({ // populate ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢
        path: "themeAssignment.subThemes.categoryId",
        model: CategoryModel,
      })
      .populate<{ moodAndToneCategories: ICategory[] }>({ // populate ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ó‡∏ô
        path: "themeAssignment.moodAndTone",
        model: CategoryModel,
      })
      .populate<{ contentWarningCategories: ICategory[] }>({ // populate ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        path: "themeAssignment.contentWarnings",
        model: CategoryModel,
      })
      .populate<{ ageRatingCategory: ICategory | null }>({ // populate ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏ï‡∏ï‡∏¥‡πâ‡∏á‡∏≠‡∏≤‡∏¢‡∏∏
        path: "ageRatingCategoryId",
        model: CategoryModel,
      })
      .populate<{ languageCategory: ICategory | null }>({ // populate ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏†‡∏≤‡∏©‡∏≤
        path: "language",
        model: CategoryModel,
      })
      .populate<{ artStyleCategory: ICategory | null }>({ // populate ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏®‡∏¥‡∏•‡∏õ‡∏∞
        path: "narrativeFocus.artStyle",
        model: CategoryModel,
      })
      .select( // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å fields ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å Novel document
        "title slug author synopsis longDescription coverImageUrl bannerImageUrl status isCompleted endingType " +
        "themeAssignment.mainTheme.categoryId themeAssignment.subThemes.categoryId themeAssignment.moodAndTone themeAssignment.contentWarnings themeAssignment.customTags " +
        "narrativeFocus.artStyle " +
        "ageRatingCategoryId language " +
        "totalEpisodesCount publishedEpisodesCount stats monetizationSettings " +
        "publishedAt lastContentUpdatedAt createdAt updatedAt"
      )
      .lean({ virtuals: true });

    const novelData = await novelQuery.exec();

    if (!novelData) {
      console.warn(`‚ö†Ô∏è [API /novels/${slug}] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slug}"`);
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" }, { status: 404 });
    }
    console.log(`‚úÖ [API /novels/${slug}] ‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢: "${novelData.title}" (ID: ${novelData._id})`);

    // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ mapping ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    const mapPopulatedAuthor = (authorDoc: any): PopulatedAuthorForApi | null => {
        if (!authorDoc) return null;
        return {
            _id: authorDoc._id.toString(),
            username: authorDoc.username,
            profile: authorDoc.profile,
        };
    };

    const mapPopulatedCategory = (categoryDoc: any): PopulatedCategoryForApi | null => {
        if (!categoryDoc) return null;
        return {
            _id: categoryDoc._id.toString(),
            name: categoryDoc.name,
            slug: categoryDoc.slug,
            iconUrl: categoryDoc.iconUrl,
            color: categoryDoc.color,
            description: categoryDoc.description,
            categoryType: categoryDoc.categoryType,
            localizations: categoryDoc.localizations,
        };
    };

    // 2. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ô (Episodes) ‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà
    const episodesRaw = await EpisodeModel.find({
      novelId: novelData._id, // novelData._id ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
      status: { $in: [EpisodeStatus.PUBLISHED, EpisodeStatus.SCHEDULED] }
    })
      .sort({ episodeOrder: 1 }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≠‡∏ô
      .select("_id title episodeOrder status accessType priceCoins publishedAt stats")
      .lean()
      .exec();

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
    const episodesList: PopulatedEpisodeSummary[] = episodesRaw.map(ep => ({
      _id: (ep._id as Types.ObjectId).toString(),
      title: ep.title,
      slug: ep.episodeOrder.toString(), // ‡πÉ‡∏ä‡πâ episodeOrder ‡πÄ‡∏õ‡πá‡∏ô slug
      episodeOrder: ep.episodeOrder,
      status: ep.status,
      accessType: ep.accessType,
      priceCoins: ep.priceCoins,
      publishedAt: safeToISOString(ep.publishedAt),
      stats: {
        viewsCount: ep.stats?.viewsCount || 0,
        likesCount: ep.stats?.likesCount || 0,
        commentsCount: ep.stats?.commentsCount || 0,
        totalWords: ep.stats?.totalWords || 0,
        estimatedReadingTimeMinutes: ep.stats?.estimatedReadingTimeMinutes || 0,
      },
    }));
    console.log(`‚úÖ [API /novels/${slug}] ‡∏î‡∏∂‡∏á ${episodesList.length} ‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ "${novelData.title}"`);

    // 3. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ (Characters) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£
    const charactersRaw = await CharacterModel.find({
      novelId: novelData._id, // novelData._id ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô ObjectId
      isArchived: { $ne: true }, // ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£
    })
    .sort({ 'displayOrder.writer': 1, name: 1 }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° displayOrder ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠
    .select("_id characterCode name roleInStory customRoleDetails characterProfile.synopsis characterProfile.profileImageUrl profileImageMediaId profileImageSourceType isMainCharacter")
    .lean()
    .exec();

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
    const charactersList: PopulatedCharacterSummary[] = charactersRaw.map(char => {
        // Logic ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á profileImageUrl
        let imageUrl = char.characterProfile?.profileImageUrl; // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ URL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô profile
        if (!imageUrl && char.profileImageMediaId && char.profileImageSourceType) {
             // TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏à‡∏≤‡∏Å MediaId ‡πÅ‡∏•‡∏∞ SourceType (‡πÄ‡∏ä‡πà‡∏ô query MediaModel/OfficialMediaModel)
             // imageUrl = `some_logic_to_get_url(${char.profileImageMediaId}, ${char.profileImageSourceType})`;
        }
        if (!imageUrl) {
            imageUrl = "/images/default-character-avatar.png"; // Placeholder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        }

        return {
            _id: (char._id as Types.ObjectId).toString(),
            characterCode: char.characterCode,
            name: char.name,
            roleInStory: char.roleInStory,
            customRoleDetails: char.customRoleDetails,
            synopsis: char.characterProfile?.synopsis, // ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å characterProfile
            profileImageUrl: imageUrl,
        };
    });
    console.log(`‚úÖ [API /novels/${slug}] ‡∏î‡∏∂‡∏á ${charactersList.length} ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ "${novelData.title}"`);

    // 4. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    // Type assertion ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ TypeScript ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤ novelData ‡∏°‡∏µ field ‡∏ó‡∏µ‡πà populate ‡∏°‡∏≤
    const populatedNovel = novelData as (Omit<INovel, '_id' | 'author' | 'language' | 'themeAssignment' | 'ageRatingCategoryId' | 'narrativeFocus' | 'publishedAt' | 'lastContentUpdatedAt' | 'createdAt' | 'updatedAt'> & {
        _id: Types.ObjectId; // ObjectId ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        author: (IUser & { _id: Types.ObjectId }) | null;
        language: (ICategory & { _id: Types.ObjectId }) | null; // language ‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏ó‡∏µ‡πà populate ‡πÅ‡∏•‡πâ‡∏ß
        themeAssignment?: {
            mainTheme?: { categoryId?: (ICategory & { _id: Types.ObjectId }) | null };
            subThemes?: { categoryId?: (ICategory & { _id: Types.ObjectId }) | null }[];
            moodAndTone?: ((ICategory & { _id: Types.ObjectId }) | null)[];
            contentWarnings?: ((ICategory & { _id: Types.ObjectId }) | null)[];
            customTags?: string[];
        };
        ageRatingCategoryId?: (ICategory & { _id: Types.ObjectId }) | null;
        narrativeFocus?: { artStyle?: (ICategory & { _id: Types.ObjectId }) | null };
        currentEpisodePriceCoins: number; // ‡∏à‡∏≤‡∏Å virtual
        publishedAt?: Date | null;
        lastContentUpdatedAt?: Date | null;
        createdAt?: Date;
        updatedAt: Date;
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
    const responseNovel: PopulatedNovelForDetailPage = {
      _id: populatedNovel._id.toString(),
      title: populatedNovel.title,
      slug: populatedNovel.slug,
      author: mapPopulatedAuthor(populatedNovel.author),
      synopsis: populatedNovel.synopsis || "",
      longDescription: populatedNovel.longDescription,
      coverImageUrl: populatedNovel.coverImageUrl,
      bannerImageUrl: populatedNovel.bannerImageUrl,
      status: populatedNovel.status,
      isCompleted: populatedNovel.isCompleted,
      endingType: populatedNovel.endingType,
      totalEpisodesCount: populatedNovel.totalEpisodesCount,
      publishedEpisodesCount: populatedNovel.publishedEpisodesCount,
      monetizationSettings: populatedNovel.monetizationSettings,
      currentEpisodePriceCoins: populatedNovel.currentEpisodePriceCoins,

      // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏Å
      mainThemeCategory: mapPopulatedCategory(populatedNovel.themeAssignment?.mainTheme?.categoryId),
      subThemeCategories: populatedNovel.themeAssignment?.subThemes?.map(st => mapPopulatedCategory(st.categoryId)).filter(Boolean) as PopulatedCategoryForApi[] || [],
      moodAndToneCategories: populatedNovel.themeAssignment?.moodAndTone?.map(cat => mapPopulatedCategory(cat)).filter(Boolean) as PopulatedCategoryForApi[] || [],
      contentWarningCategories: populatedNovel.themeAssignment?.contentWarnings?.map(cat => mapPopulatedCategory(cat)).filter(Boolean) as PopulatedCategoryForApi[] || [],
      ageRatingCategory: mapPopulatedCategory(populatedNovel.ageRatingCategoryId),
      languageCategory: mapPopulatedCategory(populatedNovel.language) || { _id: '', name: '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏', slug: 'unknown', categoryType: CategoryType.LANGUAGE } as PopulatedCategoryForApi, // language is required
      artStyleCategory: mapPopulatedCategory(populatedNovel.narrativeFocus?.artStyle),
      customTags: populatedNovel.themeAssignment?.customTags || [],

      // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
      episodesList,
      charactersList,

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      formattedViewsCount: formatNumber(populatedNovel.stats?.viewsCount ?? 0),
      formattedLikesCount: formatNumber(populatedNovel.stats?.likesCount ?? 0),
      formattedFollowersCount: formatNumber(populatedNovel.stats?.followersCount ?? 0),
      formattedWordsCount: formatNumber(populatedNovel.stats?.totalWords ?? 0),
      formattedCommentsCount: formatNumber(populatedNovel.stats?.commentsCount ?? 0),
      formattedAverageRating: (populatedNovel.stats?.averageRating ?? 0).toFixed(1),
      rawStats: populatedNovel.stats,

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å
      firstEpisodeSlug: episodesList.find(ep => ep.status === EpisodeStatus.PUBLISHED)?.slug, // ‡∏´‡∏≤ slug ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà published
      firstPublishedAt: safeToISOString(populatedNovel.publishedAt), // publishedAt ‡∏Ñ‡∏∑‡∏≠ firstPublishedAt ‡∏Ç‡∏≠‡∏á novel
      updatedAt: safeToISOString(populatedNovel.updatedAt)!, // updatedAt ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠
      createdAt: safeToISOString(populatedNovel.createdAt),
      lastContentUpdatedAt: safeToISOString(populatedNovel.lastContentUpdatedAt),
    };

    console.log(`‚úÖ [API /novels/${slug}] ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ "${responseNovel.title}"`);
    const response: NovelResponse = { novel: responseNovel };
    return NextResponse.json(response, { status: 200 });

  } catch (error: any) {
    console.error(`‚ùå [API /novels/${slugForLogging}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:`, error.message, error.stack);
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó CastError (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
    if (error instanceof mongoose.Error.CastError) {
      return NextResponse.json({ error: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö slug ‡∏´‡∏£‡∏∑‡∏≠ ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", details: error.message }, { status: 400 });
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢", details: error.message },
      { status: 500 }
    );
  } finally {
    console.log(`--- üì° [API GET /api/novels/${slugForLogging}] ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î --- \n`);
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö format ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ (K, M)
 * @param num - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ format
 * @returns ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà format ‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏ä‡πà‡∏ô 1.2M, 5K, 123) ‡∏´‡∏£‡∏∑‡∏≠ '0' ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô null/undefined/NaN
 */
function formatNumber(num: number | null | undefined): string {
  if (num === null || num === undefined || isNaN(num)) {
    return "0";
  }
  if (num === 0) return "0"; // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ 0 ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
  if (Math.abs(num) >= 1000000) { // ‡πÉ‡∏ä‡πâ Math.abs ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    return (num / 1000000).toFixed(1).replace(/\.0$/, "") + "M";
  }
  if (Math.abs(num) >= 1000) {
    return (num / 1000).toFixed(1).replace(/\.0$/, "") + "K";
  }
  return num.toString();
}





