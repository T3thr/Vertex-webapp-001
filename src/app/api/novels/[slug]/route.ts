// src/app/api/novels/[slug]/route.ts
// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á API Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug
// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° Models

import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ path ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
import NovelModel, { INovel } from "@/backend/models/Novel";
import UserModel, { IUser } from "@/backend/models/User";
import CategoryModel, { ICategory } from "@/backend/models/Category";
import EpisodeModel, { IEpisode } from "@/backend/models/Episode";
import mongoose from "mongoose";

// --- Interfaces ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Populate ‡πÅ‡∏•‡πâ‡∏ß ---

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Author ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
interface PopulatedAuthor extends Pick<IUser, "_id" | "username"> {
  profile?: {
    displayName?: string;
    avatar?: string;
  };
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô socialStats.followersCount
  socialStats?: {
    followersCount: number;
  };
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Category ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
type PopulatedCategory = Pick<ICategory, "_id" | "name" | "slug" | "themeColor" | "iconUrl">;

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Episode ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô List
type PopulatedEpisodeSummary = Pick<
  IEpisode,
  | "_id"
  | "title"
  | "slug"
  | "episodeNumber"
  | "status"
  | "visibility"
  | "isFree"
  | "priceInCoins"
  | "publishedAt"
  | "viewsCount"
  | "likesCount"
  | "commentsCount"
>;

// --- Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Novel ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö (Populated) ---
// ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å fields ‡∏à‡∏≤‡∏Å INovel ‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà fields ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á populate ‡∏î‡πâ‡∏ß‡∏¢ type ‡∏ó‡∏µ‡πà populate ‡πÅ‡∏•‡πâ‡∏ß
// Omit fields ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÑ‡∏õ client ‡∏´‡∏£‡∏∑‡∏≠ fields ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà
export interface PopulatedNovelForDetailPage
  extends Omit<
    INovel,
    | "author" // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ PopulatedAuthor
    | "categories" // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ PopulatedCategory[]
    | "subCategories" // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ PopulatedCategory[]
    | "embeddingVector" // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ client
    | "seo" // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    | "stats" // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà client ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    | "sentimentAnalysis" // ‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ client
    | "genreDistribution" // ‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ client
  > {
  author: PopulatedAuthor | null;
  categories: PopulatedCategory[];
  subCategories?: PopulatedCategory[];
  episodesList: PopulatedEpisodeSummary[]; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ô (‡∏¢‡πà‡∏≠)
  formattedViewsCount?: string; // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà format ‡πÅ‡∏•‡πâ‡∏ß
  formattedLikesCount?: string;
  formattedFollowersCount?: string;
  formattedWordsCount?: string;
  // relatedNovels?: Pick<INovel, '_id' | 'title' | 'slug' | 'coverImage'>[]; // ‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (Optional)
  // --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° fields ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ UI ---
  firstEpisodeSlug?: string; // Slug ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô GET ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug
 * @param _req - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠ (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÅ‡∏ï‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Next.js)
 * @param params - ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å dynamic route ({ params: { slug: string } })
 * @returns NextResponse ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
 */
export async function GET(
  _req: NextRequest, // ‡πÉ‡∏ä‡πâ _req ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  { params }: { params: { slug: string } }
): Promise<NextResponse<PopulatedNovelForDetailPage | { error: string }>> {
  const { slug } = params; // ‡∏î‡∏∂‡∏á slug ‡∏à‡∏≤‡∏Å params
  console.log(`\n--- üì° [API GET /api/novels/${slug}] ---`);

  if (!slug) {
    console.error("‚ùå Missing slug parameter.");
    return NextResponse.json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ slug ‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" }, { status: 400 });
  }

  try {
    await dbConnect();
    console.log("‚úÖ Database connected.");

    const Novel = NovelModel();
    const User = UserModel();
    const Category = CategoryModel();
    const Episode = EpisodeModel();

    // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å
    const novel = await Novel.findOne({
      slug,
      isDeleted: false,
      // visibility: 'public', // ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á visibility ‡∏ï‡∏≤‡∏° requirement
    })
      .populate<{ author: PopulatedAuthor | null }>({
        path: "author",
        model: User,
        select: "username profile.displayName profile.avatar socialStats.followersCount", // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å field ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      })
      .populate<{ categories: PopulatedCategory[] }>({
        path: "categories",
        model: Category,
        select: "name slug themeColor iconUrl", // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å field ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      })
      .populate<{ subCategories?: PopulatedCategory[] }>({
        path: "subCategories",
        model: Category,
        select: "name slug themeColor iconUrl", // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å field ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      })
      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å fields ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Novel model ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô fields ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
      .select("-embeddingVector -sentimentAnalysis -genreDistribution")
      .lean() // ‡πÉ‡∏ä‡πâ lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠ performance ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ plain JS object
      .exec();

    if (!novel) {
      console.warn(`‚ö†Ô∏è Novel with slug "${slug}" not found.`);
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" }, { status: 404 });
    }

    console.log(`‚úÖ Novel "${novel.title}" found.`);

    // 2. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ô (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
    const episodesList = await Episode.find({
      novel: novel._id,
      isDeleted: false,
      // status: 'published', // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà published ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ client ‡∏Å‡∏£‡∏≠‡∏á
    })
      .sort({ episodeNumber: 1 }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≠‡∏ô
      .select(
        "title slug episodeNumber status visibility isFree priceInCoins publishedAt viewsCount likesCount commentsCount"
      )
      .lean()
      .exec();

    console.log(`‚úÖ Fetched ${episodesList.length} episodes for novel "${novel.title}".`);

    // 3. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Response
    const responseData: PopulatedNovelForDetailPage = {
      ...(novel as any), // Cast ‡πÄ‡∏õ‡πá‡∏ô any ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å lean() ‡πÅ‡∏•‡∏∞ populate type ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πä‡∏∞
      author: novel.author, // `author` ‡∏ñ‡∏π‡∏Å populate ‡πÅ‡∏•‡πâ‡∏ß
      categories: novel.categories, // `categories` ‡∏ñ‡∏π‡∏Å populate ‡πÅ‡∏•‡πâ‡∏ß
      subCategories: novel.subCategories, // `subCategories` ‡∏ñ‡∏π‡∏Å populate ‡πÅ‡∏•‡πâ‡∏ß
      episodesList: episodesList as PopulatedEpisodeSummary[], // Cast episodes ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
      formattedViewsCount: formatNumber(novel.viewsCount ?? 0),
      formattedLikesCount: formatNumber(novel.likesCount ?? 0),
      formattedFollowersCount: formatNumber(novel.followersCount ?? 0),
      formattedWordsCount: formatNumber(novel.wordsCount ?? 0),
      firstEpisodeSlug: episodesList.length > 0 ? episodesList[0].slug : undefined,
    };

    // (Optional) ‡∏•‡∏ö fields ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏à‡∏±‡∏á‡πÜ ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
    // delete (responseData as any).stats; // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö

    console.log(`‚úÖ Prepared response data for novel "${novel.title}".`);

    return NextResponse.json(responseData, { status: 200 });

  } catch (error: any) {
    console.error(`‚ùå Error fetching novel with slug "${slug}":`, error);

    if (error instanceof mongoose.Error.CastError) {
      return NextResponse.json({ error: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö slug ‡∏´‡∏£‡∏∑‡∏≠ ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 400 });
    }

    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" },
      { status: 500 }
    );
  } finally {
    console.log(`--- üì° [API GET /api/novels/${slug}] Finished --- \n`);
  }
}

// --- Helper Functions ---

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö format ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ (K, M)
 * @param num - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ format
 * @returns ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà format ‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏ä‡πà‡∏ô 1.2M, 5K, 123) ‡∏´‡∏£‡∏∑‡∏≠ '0' ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô null/undefined
 */
function formatNumber(num: number | null | undefined): string {
  if (num === null || num === undefined || num === 0) {
    return "0";
  }
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1).replace(/\.0$/, "") + "M";
  }
  if (num >= 1000) {
    return (num / 1000).toFixed(1).replace(/\.0$/, "") + "K";
  }
  return num.toString();
}