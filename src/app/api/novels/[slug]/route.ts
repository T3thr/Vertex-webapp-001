// src/app/api/novels/[slug]/route.ts
import { NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
import NovelModel, { INovel } from "@/backend/models/Novel"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path ‡πÅ‡∏•‡∏∞ import interface
import UserModel from "@/backend/models/User"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path
import CategoryModel from "@/backend/models/Category"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path
import mongoose from "mongoose";

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö context ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö params
interface RouteContext {
  params: {
    slug: string;
  };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô GET ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≤‡∏° slug
export async function GET(request: Request, context: RouteContext) {
  // ‡∏î‡∏∂‡∏á slug ‡∏à‡∏≤‡∏Å context.params
  const { slug } = context.params;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ slug ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!slug) {
    console.error("‚ùå API Error: Slug is missing in the request.");
    return NextResponse.json(
      { message: "Slug parameter is required" },
      { status: 400 }
    );
  }

  console.log(`üì° API /api/novels/${slug} called`);

  try {
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await dbConnect();
    console.log("üóÑÔ∏è Database connected.");

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Models ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô re-compilation ‡πÉ‡∏ô dev mode)
    const Novel = NovelModel();
    const User = UserModel();
    const Category = CategoryModel();

    // Query ‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ slug
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: author ‡πÅ‡∏•‡∏∞ categories
    // ‡πÉ‡∏ä‡πâ lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠ performance ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô (‡πÑ‡∏î‡πâ plain JS object)
    const novel: INovel | null = await Novel.findOne({
      slug: slug,
      isDeleted: false, // ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
      // visibility: 'public' // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö visibility ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏° logic ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ admin ‡∏î‡∏π private ‡πÑ‡∏î‡πâ)
    })
      .populate({
        path: "author",
        model: User, // ‡∏£‡∏∞‡∏ö‡∏∏ Model ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        select: "username profile.displayName profile.avatar role", // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å User
      })
      .populate({
        path: "categories",
        model: Category, // ‡∏£‡∏∞‡∏ö‡∏∏ Model ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        select: "name slug themeColor", // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å Category
      })
      .populate({
        path: "subCategories", // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ populate subCategories ‡∏î‡πâ‡∏ß‡∏¢
        model: Category,
        select: "name slug",
      })
      .lean(); // ‡πÉ‡∏ä‡πâ lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ Plain JavaScript Object

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!novel) {
      console.warn(`‚ö†Ô∏è Novel with slug "${slug}" not found or not accessible.`);
      return NextResponse.json({ message: "Novel not found" }, { status: 404 });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö visibility ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ñ‡πâ‡∏≤ visibility ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà public ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå, ‡∏≠‡∏≤‡∏à return 404/403
    // if (novel.visibility !== 'public') {
    //   // Check user session/role here
    //   // return NextResponse.json({ message: "Forbidden" }, { status: 403 });
    // }

    console.log(`‚úÖ Successfully fetched novel: ${novel.title}`);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    return NextResponse.json(novel, { status: 200 });

  } catch (error: any) {
    console.error(`‚ùå Error fetching novel with slug "${slug}":`, error);

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πà‡∏≤‡∏á‡πÜ
    if (error instanceof mongoose.Error.CastError) {
      return NextResponse.json(
        { message: "Invalid slug format" },
        { status: 400 }
      );
    }

    // ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    return NextResponse.json(
      { message: "Internal Server Error", error: error.message },
      { status: 500 }
    );
  }
}

// ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° POST, PUT, DELETE handlers ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£