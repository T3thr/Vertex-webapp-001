// src/app/api/novels/[slug]/route.ts
// FILE: src/app/api/novels/[slug]/route.ts
// API Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà, ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô, ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£, ‡∏ï‡∏≠‡∏ô

import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb";
import NovelModel, {
  INovel,
  IThemeAssignment,
  ISourceType,
  INarrativeFocus,
  IWorldBuildingDetails,
  INovelStats,
  IMonetizationSettings,
  IPsychologicalAnalysisConfig,
  ICollaborationSettings
} from "@/backend/models/Novel";
import UserModel, { IUser } from "@/backend/models/User";
import { IUserProfile } from '@/backend/models/UserProfile';
import IWriterStats from '@/backend/models/WriterStats';
import CategoryModel, { ICategory } from "@/backend/models/Category";
import CharacterModel, { ICharacter, CharacterRoleInStory } from "@/backend/models/Character";
import EpisodeModel, { IEpisode, IEpisodeStats, EpisodeStatus, EpisodeAccessType } from "@/backend/models/Episode";


// ===================================================================
// SECTION: TypeScript Interfaces ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Response
// ===================================================================

/**
 * @interface PopulatedAuthorForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate
 */
interface PopulatedAuthorForDetailPage {
  _id: string;
  username?: string;
  profile: IUserProfile; // Changed to IUserProfile
  writerStats?: {
    totalNovelsPublished: number;
    totalViewsAcrossAllNovels: number;
    totalLikesReceivedOnNovels: number;
  };
}

/**
 * @interface PopulatedCategoryInfo
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Category ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate
 */
interface PopulatedCategoryInfo {
  _id: string;
  name: string;
  slug: string;
  color?: string;
}

/**
 * @interface PopulatedThemeAssignment
 * @description Interface‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö themeAssignment ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate
 */
interface PopulatedThemeAssignment {
  mainTheme: {
    categoryId: PopulatedCategoryInfo;
    customName?: string;
  };
  subThemes?: Array<{
    categoryId: PopulatedCategoryInfo;
    customName?: string;
  }>;
  moodAndTone?: PopulatedCategoryInfo[];
  contentWarnings?: PopulatedCategoryInfo[];
  customTags?: string[];
}

/**
 * @interface PopulatedCharacterForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
 */
interface PopulatedCharacterForDetailPage {
  _id: string;
  name: string;
  profileImageUrl?: string;
  description?: string;
  roleInStory?: CharacterRoleInStory;
  colorTheme?: string;
}

/**
 * @interface PopulatedEpisodeForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
 */
interface PopulatedEpisodeForDetailPage {
  _id: string;
  title: string;
  episodeOrder: number;
  status: EpisodeStatus;
  accessType: EpisodeAccessType;
  priceCoins?: number;
  publishedAt?: string;
  teaserText?: string;
  stats: {
    viewsCount: number;
    likesCount: number;
    commentsCount: number;
    totalWords: number;
    estimatedReadingTimeMinutes: number;
  };
}

/**
 * @interface PopulatedNovelForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
 */
export interface PopulatedNovelForDetailPage {
  _id: string;
  title: string;
  slug: string;
  author: PopulatedAuthorForDetailPage;
  synopsis: string;
  longDescription?: string;
  coverImageUrl?: string;
  bannerImageUrl?: string;
  themeAssignment: PopulatedThemeAssignment;
  narrativeFocus?: INarrativeFocus;
  worldBuildingDetails?: IWorldBuildingDetails;
  ageRatingCategoryId?: PopulatedCategoryInfo;
  status: INovel["status"];
  accessLevel: INovel["accessLevel"];
  isCompleted: boolean;
  endingType: INovel["endingType"];
  sourceType: ISourceType;
  language: PopulatedCategoryInfo;
  firstEpisodeId?: string;
  totalEpisodesCount: number;
  publishedEpisodesCount: number;
  stats: INovelStats;
  monetizationSettings: IMonetizationSettings;
  psychologicalAnalysisConfig: IPsychologicalAnalysisConfig;
  collaborationSettings?: ICollaborationSettings;
  isFeatured?: boolean;
  publishedAt?: string;
  scheduledPublicationDate?: string;
  lastContentUpdatedAt: string;
  relatedNovels?: string[];
  seriesId?: string;
  seriesOrder?: number;
  createdAt: string;
  updatedAt: string;
  characters?: PopulatedCharacterForDetailPage[];
  episodes?: PopulatedEpisodeForDetailPage[];
}

/**
 * @interface RouteParams
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö route parameters
 */
interface RouteParams {
  params: {
    slug: string;
  };
}

// ===================================================================
// SECTION: API Route Handler
// ===================================================================

/**
 * GET Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug
 * @param request NextRequest object
 * @param context object containing the dynamic route parameters, e.g., { params: { slug: 'my-novel-slug' } }
 * @returns NextResponse ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠ error
 */
export async function GET(
    request: NextRequest, 
    context: RouteParams
) {
  try {
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MongoDB
    await dbConnect();

    // 1. ‚ú®[‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏£‡∏±‡∏ö slug ‡∏à‡∏≤‡∏Å context.params ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const { slug: rawSlug } = context.params;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á slug
    if (!rawSlug || typeof rawSlug !== 'string' || !rawSlug.trim()) {
      console.warn(`‚ö†Ô∏è [API /novels/[slug]] Slug ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: "${rawSlug}"`);
      return NextResponse.json(
        {
          error: "Invalid slug parameter",
          message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ slug ‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        },
        { status: 400 }
      );
    }

    // 2. ‚ú®[‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ decodeURIComponent ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
    const decodedSlug = decodeURIComponent(rawSlug.trim()).toLowerCase();

    console.log(`üì° [API /novels/[slug]] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug: "${decodedSlug}"`);

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug ‡∏û‡∏£‡πâ‡∏≠‡∏° populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const novelFromDb = await NovelModel.findOne({
      slug: decodedSlug,
      isDeleted: false // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
    })
      .populate<{ author: IUser }>({
        path: 'author',
        select: '_id username profile writerStats',
        model: UserModel
      })
      .populate<{ 'themeAssignment.mainTheme.categoryId': ICategory }>({
        path: 'themeAssignment.mainTheme.categoryId',
        select: '_id name slug color',
        model: CategoryModel
      })
      .populate<{ 'themeAssignment.subThemes.categoryId': ICategory[] }>({
        path: 'themeAssignment.subThemes.categoryId',
        select: '_id name slug color',
        model: CategoryModel
      })
      .populate<{ 'themeAssignment.moodAndTone': ICategory[] }>({
        path: 'themeAssignment.moodAndTone',
        select: '_id name slug color',
        model: CategoryModel
      })
      .populate<{ 'themeAssignment.contentWarnings': ICategory[] }>({
        path: 'themeAssignment.contentWarnings',
        select: '_id name slug color',
        model: CategoryModel
      })
      .populate<{ ageRatingCategoryId: ICategory }>({
        path: 'ageRatingCategoryId',
        select: '_id name slug color',
        model: CategoryModel
      })
      .populate<{ language: ICategory }>({
        path: 'language',
        select: '_id name slug',
        model: CategoryModel
      })
      .lean();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!novelFromDb) {
      console.warn(`‚ö†Ô∏è [API /novels/[slug]] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug: "${decodedSlug}"`);
      return NextResponse.json(
        {
          error: "Novel not found",
          message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ slug "${decodedSlug}"`
        },
        { status: 404 }
      );
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á category ‡πÄ‡∏õ‡πá‡∏ô PopulatedCategoryInfo
    const toPopulatedCategoryInfo = (cat: any): PopulatedCategoryInfo | undefined => {
      if (!cat || typeof cat !== 'object' || !('_id' in cat)) return undefined;
      return {
        _id: cat._id.toString(),
        name: cat.name,
        slug: cat.slug,
        color: cat.color,
      };
    };

    const toPopulatedCategoryInfoArray = (cats: any[]): PopulatedCategoryInfo[] => {
      if (!Array.isArray(cats)) return [];
      return cats.map(toPopulatedCategoryInfo).filter(Boolean) as PopulatedCategoryInfo[];
    };

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ (‡∏à‡∏≥‡∏Å‡∏±‡∏î 6 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å)
    const charactersFromDb = await CharacterModel.find({
      novelId: novelFromDb._id,
      isArchived: false
    })
      .select('_id name description roleInStory colorTheme profileImageMediaId profileImageSourceType')
      .sort({ createdAt: 1 })
      .limit(6)
      .lean();

    const characters: PopulatedCharacterForDetailPage[] = charactersFromDb.map(char => {
      let imageUrl = '/images/default-avatar.png';
      if (char.profileImageMediaId && char.profileImageSourceType) {
        imageUrl = `/api/media_placeholder/${char.profileImageSourceType}/${char.profileImageMediaId.toString()}`;
      }

      return {
        _id: char._id.toString(),
        name: char.name,
        profileImageUrl: imageUrl,
        description: char.description,
        roleInStory: char.roleInStory as CharacterRoleInStory,
        colorTheme: char.colorTheme
      };
    });

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ (‡∏à‡∏≥‡∏Å‡∏±‡∏î 10 ‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å)
    const episodesFromDb = await EpisodeModel.find({
      novelId: novelFromDb._id,
      status: { $in: [EpisodeStatus.PUBLISHED, EpisodeStatus.SCHEDULED] }
    })
      .select('_id title episodeOrder status accessType priceCoins publishedAt teaserText stats')
      .sort({ episodeOrder: 1 })
      .limit(10)
      .lean();

    const episodes: PopulatedEpisodeForDetailPage[] = episodesFromDb.map(ep => ({
      _id: ep._id.toString(),
      title: ep.title,
      episodeOrder: ep.episodeOrder,
      status: ep.status as EpisodeStatus,
      accessType: ep.accessType as EpisodeAccessType,
      priceCoins: ep.priceCoins,
      publishedAt: ep.publishedAt?.toISOString(),
      teaserText: ep.teaserText,
      stats: {
        viewsCount: ep.stats?.viewsCount || 0,
        likesCount: ep.stats?.likesCount || 0,
        commentsCount: ep.stats?.commentsCount || 0,
        totalWords: ep.stats?.totalWords || 0,
        estimatedReadingTimeMinutes: ep.stats?.estimatedReadingTimeMinutes || 0
      }
    }));

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô PopulatedNovelForDetailPage
    const populatedAuthor = novelFromDb.author as unknown as IUser;
    if (!populatedAuthor || typeof populatedAuthor !== 'object' || !populatedAuthor._id || !populatedAuthor.profile) {
      console.error(`‚ùå [API /novels/[slug]] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢: "${novelFromDb.title}"`);
      return NextResponse.json(
        { error: "Internal server error", message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" },
        { status: 500 }
      );
    }

    const responseData: PopulatedNovelForDetailPage = {
      _id: novelFromDb._id.toString(),
      title: novelFromDb.title,
      slug: novelFromDb.slug,
      author: {
        _id: populatedAuthor._id.toString(),
        username: populatedAuthor.username,
        profile: populatedAuthor.profile,
        writerStats: populatedAuthor.writerStats ? {
          totalNovelsPublished: populatedAuthor.writerStats.totalNovelsPublished,
          totalViewsAcrossAllNovels: populatedAuthor.writerStats.totalViewsAcrossAllNovels,
          totalLikesReceivedOnNovels: populatedAuthor.writerStats.totalLikesReceivedOnNovels,
        } : undefined,
      },
      synopsis: novelFromDb.synopsis,
      longDescription: novelFromDb.longDescription,
      coverImageUrl: novelFromDb.coverImageUrl,
      bannerImageUrl: novelFromDb.bannerImageUrl,
      themeAssignment: {
        mainTheme: {
          categoryId: toPopulatedCategoryInfo(novelFromDb.themeAssignment?.mainTheme?.categoryId)!,
          customName: novelFromDb.themeAssignment?.mainTheme?.customName,
        },
        subThemes: novelFromDb.themeAssignment?.subThemes?.map((st, index) => ({
          categoryId: toPopulatedCategoryInfo((novelFromDb.themeAssignment?.subThemes?.[index]?.categoryId as any))!,
          customName: st.customName,
        })) || [],
        moodAndTone: toPopulatedCategoryInfoArray(novelFromDb.themeAssignment?.moodAndTone as any[] || []),
        contentWarnings: toPopulatedCategoryInfoArray(novelFromDb.themeAssignment?.contentWarnings as any[] || []),
        customTags: novelFromDb.themeAssignment?.customTags || [],
      },
      narrativeFocus: novelFromDb.narrativeFocus,
      worldBuildingDetails: novelFromDb.worldBuildingDetails,
      ageRatingCategoryId: toPopulatedCategoryInfo(novelFromDb.ageRatingCategoryId as any),
      status: novelFromDb.status as INovel["status"],
      accessLevel: novelFromDb.accessLevel as INovel["accessLevel"],
      isCompleted: novelFromDb.isCompleted,
      endingType: novelFromDb.endingType as INovel["endingType"],
      sourceType: novelFromDb.sourceType as ISourceType,
      language: toPopulatedCategoryInfo(novelFromDb.language as any)!,
      firstEpisodeId: novelFromDb.firstEpisodeId?.toString(),
      totalEpisodesCount: novelFromDb.totalEpisodesCount,
      publishedEpisodesCount: novelFromDb.publishedEpisodesCount,
      stats: novelFromDb.stats as INovelStats,
      monetizationSettings: novelFromDb.monetizationSettings as IMonetizationSettings,
      psychologicalAnalysisConfig: novelFromDb.psychologicalAnalysisConfig as IPsychologicalAnalysisConfig,
      collaborationSettings: novelFromDb.collaborationSettings,
      isFeatured: novelFromDb.isFeatured,
      publishedAt: novelFromDb.publishedAt?.toISOString(),
      scheduledPublicationDate: novelFromDb.scheduledPublicationDate?.toISOString(),
      lastContentUpdatedAt: novelFromDb.lastContentUpdatedAt.toISOString(),
      relatedNovels: novelFromDb.relatedNovels?.map(id => id.toString()),
      seriesId: novelFromDb.seriesId?.toString(),
      seriesOrder: novelFromDb.seriesOrder,
      createdAt: novelFromDb.createdAt.toISOString(),
      updatedAt: novelFromDb.updatedAt.toISOString(),
      characters: characters,
      episodes: episodes,
    };

    console.log(`‚úÖ [API /novels/[slug]] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: "${novelFromDb.title}" (${characters.length} ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£, ${episodes.length} ‡∏ï‡∏≠‡∏ô)`);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏° cache header
    return NextResponse.json(
      {
        success: true,
        novel: responseData
      },
      {
        headers: {
          'Cache-Control': 'public, s-maxage=60, stale-while-revalidate=300',
        }
      }
    );

  } catch (error: any) {
    // 3. ‚ú®[‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Error Logging ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á slug ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
    const slugForError = (context?.params?.slug || 'unknown').substring(0, 100);
    console.error(`‚ùå [API /novels/[slug]] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug "${slugForError}": ${error.message}`);
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      },
      { status: 500 }
    );
  }
}