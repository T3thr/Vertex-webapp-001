// src/app/api/novels/[slug]/route.ts
// API Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà, ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô, ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£, ‡∏ï‡∏≠‡∏ô

import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb"; // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
import NovelModel, { INovel, IThemeAssignment, ISourceType, INarrativeFocus, IWorldBuildingDetails, INovelStats, IMonetizationSettings, IPsychologicalAnalysisConfig, ICollaborationSettings } from "@/backend/models/Novel";
import UserModel, { IUser, IUserProfile, IWriterStats } from "@/backend/models/User";
import CategoryModel, { ICategory } from "@/backend/models/Category";
import CharacterModel, { ICharacter, CharacterRoleInStory } from "@/backend/models/Character";
import EpisodeModel, { IEpisode, IEpisodeStats, EpisodeStatus, EpisodeAccessType } from "@/backend/models/Episode";
import { Types } from "mongoose";

// ===================================================================
// SECTION: TypeScript Interfaces ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Response
// (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
// ===================================================================

/**
 * @interface PopulatedAuthorForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate
 */
interface PopulatedAuthorForDetailPage {
  _id: string;
  username?: string;
  profile: {
    displayName?: string;
    penName?: string;
    avatarUrl?: string;
    bio?: string;
  };
  writerStats?: { // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
    totalNovelsPublished: number;
    totalViewsAcrossAllNovels: number; // ‡∏≠‡∏≤‡∏à‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ totalFollowers ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    totalLikesReceivedOnNovels: number;
  };
}

/**
 * @interface PopulatedCategoryInfo
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Category ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
 */
interface PopulatedCategoryInfo {
  _id: string;
  name: string;
  slug: string;
  color?: string;
}

/**
 * @interface PopulatedThemeAssignment
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö themeAssignment ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate
 */
interface PopulatedThemeAssignment {
  mainTheme: {
    categoryId: PopulatedCategoryInfo; // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ categoryId ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null/undefined ‡∏´‡∏•‡∏±‡∏á populate
    customName?: string;
  };
  subThemes?: Array<{
    categoryId: PopulatedCategoryInfo; // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ categoryId ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null/undefined ‡∏´‡∏•‡∏±‡∏á populate
    customName?: string;
  }>;
  moodAndTone?: PopulatedCategoryInfo[];
  contentWarnings?: PopulatedCategoryInfo[];
  customTags?: string[];
}

/**
 * @interface PopulatedCharacterForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
 */
interface PopulatedCharacterForDetailPage {
  _id: string;
  name: string;
  profileImageUrl?: string; // Virtual field from Character model
  description?: string;
  roleInStory?: CharacterRoleInStory;
  colorTheme?: string;
}

/**
 * @interface PopulatedEpisodeForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
 */
interface PopulatedEpisodeForDetailPage {
  _id: string;
  title: string;
  episodeOrder: number;
  status: EpisodeStatus;
  accessType: EpisodeAccessType;
  priceCoins?: number;
  publishedAt?: string; // ISOString
  teaserText?: string;
  stats: {
    viewsCount: number;
    likesCount: number;
    commentsCount: number;
    totalWords: number;
    estimatedReadingTimeMinutes: number;
  };
}


/**
 * @interface PopulatedNovelForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
 */
export interface PopulatedNovelForDetailPage {
  _id: string;
  title: string;
  slug: string;
  author: PopulatedAuthorForDetailPage; // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ author ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null/undefined
  coAuthors?: PopulatedAuthorForDetailPage[]; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡πà‡∏ß‡∏°
  synopsis: string;
  longDescription?: string;
  coverImageUrl?: string;
  bannerImageUrl?: string;
  themeAssignment: PopulatedThemeAssignment;
  narrativeFocus?: INarrativeFocus;
  worldBuildingDetails?: IWorldBuildingDetails;
  ageRatingCategoryId?: PopulatedCategoryInfo;
  status: INovel["status"];
  accessLevel: INovel["accessLevel"];
  isCompleted: boolean;
  endingType: INovel["endingType"];
  sourceType: ISourceType;
  language: PopulatedCategoryInfo; // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ language ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null/undefined
  firstEpisodeId?: string;
  totalEpisodesCount: number;
  publishedEpisodesCount: number;
  stats: INovelStats;
  monetizationSettings: IMonetizationSettings;
  psychologicalAnalysisConfig: IPsychologicalAnalysisConfig;
  collaborationSettings?: ICollaborationSettings;
  isFeatured?: boolean;
  publishedAt?: string; // ISOString
  scheduledPublicationDate?: string; // ISOString
  lastContentUpdatedAt: string; // ISOString
  relatedNovels?: string[]; // Array of ObjectIds as strings (‡∏≠‡∏≤‡∏à‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ populate ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞ slug ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
  seriesId?: string; // (‡∏≠‡∏≤‡∏à‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ populate ‡∏ä‡∏∑‡πà‡∏≠ series ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
  seriesOrder?: number;
  createdAt: string; // ISOString
  updatedAt: string; // ISOString

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏´‡∏•‡∏±‡∏Å (‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î, ‡πÄ‡∏ä‡πà‡∏ô 6 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å)
  characters?: PopulatedCharacterForDetailPage[];

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î, ‡πÄ‡∏ä‡πà‡∏ô 10 ‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å)
  episodes?: PopulatedEpisodeForDetailPage[];
}

// ===================================================================
// SECTION: API Route Handler
// ===================================================================

/**
 * GET Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug
 * @param request NextRequest object
 * @param context Context object ‡∏ó‡∏µ‡πà‡∏°‡∏µ params ‡∏ã‡∏∂‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏°‡∏µ slug
 * @returns NextResponse ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠ error
 */
export async function GET(
  request: NextRequest,
  context: { params: { slug: string } } // <<<< FIXED: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç type signature ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
) {
  try {
    // ‡∏î‡∏∂‡∏á slug ‡∏à‡∏≤‡∏Å context.params
    const { slug } = context.params;

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await dbConnect();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö slug
    if (!slug || typeof slug !== 'string' || !slug.trim()) {
      console.warn(`‚ö†Ô∏è [API /novels/[slug]] Invalid slug: "${slug}"`);
      return NextResponse.json(
        {
          error: "Invalid slug parameter",
          message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ slug ‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        },
        { status: 400 }
      );
    }

    const trimmedSlug = slug.trim().toLowerCase();
    console.log(`üìÑ [API /novels/[slug]] Fetching novel data for slug: "${trimmedSlug}"`);

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug ‡∏û‡∏£‡πâ‡∏≠‡∏° populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    // ‡πÉ‡∏ä‡πâ `.lean({ virtuals: true })` ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ virtual fields ‡∏à‡∏≤‡∏Å Mongoose ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    // ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞ map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏° interface ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    const novelFromDb = await NovelModel.findOne({
      slug: trimmedSlug,
      isDeleted: { $ne: true } // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö (soft delete)
    })
    .populate<{ author: IUser }>({
      path: 'author',
      select: 'username profile writerStats', // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å writerStats ‡∏ó‡∏±‡πâ‡∏á object ‡∏´‡∏£‡∏∑‡∏≠ field ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      model: UserModel // ‡∏£‡∏∞‡∏ö‡∏∏ model ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    })
    .populate<{ coAuthors: IUser[] }>({ // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ populate coAuthors
      path: 'coAuthors',
      select: 'username profile writerStats',
      model: UserModel
    })
    .populate<{ themeAssignment_mainTheme_categoryId: ICategory }>({
      path: 'themeAssignment.mainTheme.categoryId',
      select: 'name slug color',
      model: CategoryModel
    })
    .populate<{ themeAssignment_subThemes_categoryId: ICategory[] }>({
      path: 'themeAssignment.subThemes.categoryId',
      select: 'name slug color',
      model: CategoryModel
    })
    .populate<{ themeAssignment_moodAndTone: ICategory[] }>({
      path: 'themeAssignment.moodAndTone',
      select: 'name slug color',
      model: CategoryModel
    })
    .populate<{ themeAssignment_contentWarnings: ICategory[] }>({
      path: 'themeAssignment.contentWarnings',
      select: 'name slug color',
      model: CategoryModel
    })
    .populate<{ ageRatingCategoryId: ICategory }>({
      path: 'ageRatingCategoryId',
      select: 'name slug color',
      model: CategoryModel
    })
    .populate<{ language: ICategory }>({
      path: 'language',
      select: 'name slug', // slug ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö locale
      model: CategoryModel
    })
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ populate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö narrativeFocus categories ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠/slug ‡πÅ‡∏ó‡∏ô ObjectIds
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: (‡∏ñ‡πâ‡∏≤ INarrativeFocus ‡πÉ‡∏ô PopulatedNovelForDetailPage ‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö PopulatedCategoryInfo)
    // .populate({ path: 'narrativeFocus.narrativePacingTags', select: 'name slug', model: CategoryModel })
    // .populate({ path: 'narrativeFocus.primaryConflictTypes', select: 'name slug', model: CategoryModel })
    // ... (‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    .lean(); // ‡πÉ‡∏ä‡πâ lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞ map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏á

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!novelFromDb) {
      console.warn(`‚ö†Ô∏è [API /novels/[slug]] Novel not found for slug: "${trimmedSlug}"`);
      return NextResponse.json(
        {
          error: "Novel not found",
          message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ slug "${trimmedSlug}"`
        },
        { status: 404 }
      );
    }

    // --- Helper function to safely convert populated category to PopulatedCategoryInfo ---
    // (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö map category ‡∏ó‡∏µ‡πà populate ‡∏°‡∏≤)
    const toPopulatedCategoryInfo = (cat: any): PopulatedCategoryInfo | undefined => {
        if (!cat || typeof cat !== 'object' || !('_id' in cat) || !cat.name || !cat.slug) return undefined;
        return {
            _id: cat._id.toString(),
            name: cat.name,
            slug: cat.slug,
            color: cat.color,
        };
    };
    const toPopulatedCategoryInfoArray = (cats: any[]): PopulatedCategoryInfo[] => {
        if (!Array.isArray(cats)) return [];
        return cats.map(toPopulatedCategoryInfo).filter(Boolean) as PopulatedCategoryInfo[];
    };

    // --- Helper function to map User to PopulatedAuthorForDetailPage ---
    const toPopulatedAuthor = (user: IUser | undefined): PopulatedAuthorForDetailPage | undefined => {
        if (!user || typeof user !== 'object' || !user._id) return undefined;
        return {
            _id: user._id.toString(),
            username: user.username,
            profile: {
                displayName: user.profile?.displayName,
                penName: user.profile?.penName,
                avatarUrl: user.profile?.avatarUrl,
                bio: user.profile?.bio,
            },
            writerStats: user.writerStats ? {
                totalNovelsPublished: user.writerStats.totalNovelsPublished || 0,
                totalViewsAcrossAllNovels: user.writerStats.totalViewsAcrossAllNovels || 0,
                totalLikesReceivedOnNovels: user.writerStats.totalLikesReceivedOnNovels || 0,
            } : undefined,
        };
    };

    // --- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ (‡πÅ‡∏™‡∏î‡∏á 6 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£) ---
    const charactersFromDb = await CharacterModel.find({
      novelId: novelFromDb._id,
      isArchived: { $ne: true }
    })
    .select('name description roleInStory colorTheme profileImageMediaId profileImageSourceType') // profileImageUrl ‡πÄ‡∏õ‡πá‡∏ô virtual
    .sort({ createdAt: 1 }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    .limit(6) // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
    .lean();

    const characters: PopulatedCharacterForDetailPage[] = charactersFromDb.map(char => {
        let imageUrl = `/images/default-avatar.png`; // Default avatar
        if (char.profileImageMediaId && char.profileImageSourceType) {
            // Logic ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö virtual 'profileImageUrl' ‡πÉ‡∏ô CharacterModel
            // ‡∏ñ‡πâ‡∏≤ CharacterModel.ts ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á logic ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢
            // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ instance method ‡∏Ç‡∏≠‡∏á CharacterModel ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ .lean() (‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤)
            imageUrl = `/api/media_placeholder/${char.profileImageSourceType}/${char.profileImageMediaId.toString()}`;
        }
        return {
            _id: char._id.toString(),
            name: char.name,
            profileImageUrl: imageUrl,
            description: char.description,
            roleInStory: char.roleInStory as CharacterRoleInStory, // Cast ‡∏ñ‡πâ‡∏≤‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ enum ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            colorTheme: char.colorTheme
        };
    });

    // --- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ (‡πÅ‡∏™‡∏î‡∏á 10 ‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£) ---
    const episodesFromDb = await EpisodeModel.find({
      novelId: novelFromDb._id,
      status: { $in: [EpisodeStatus.PUBLISHED, EpisodeStatus.SCHEDULED] } // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    })
    .select('title episodeOrder status accessType priceCoins publishedAt teaserText stats')
    .sort({ episodeOrder: 1 }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≠‡∏ô
    .limit(10) // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
    .lean();

    const episodes: PopulatedEpisodeForDetailPage[] = episodesFromDb.map(ep => ({
      _id: ep._id.toString(),
      title: ep.title,
      episodeOrder: ep.episodeOrder,
      status: ep.status as EpisodeStatus,
      accessType: ep.accessType as EpisodeAccessType,
      priceCoins: ep.priceCoins,
      publishedAt: ep.publishedAt?.toISOString(),
      teaserText: ep.teaserText,
      stats: { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ field ‡πÉ‡∏ô IEpisodeStats ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
        viewsCount: ep.stats?.viewsCount || 0,
        likesCount: ep.stats?.likesCount || 0,
        commentsCount: ep.stats?.commentsCount || 0,
        totalWords: ep.stats?.totalWords || 0,
        estimatedReadingTimeMinutes: ep.stats?.estimatedReadingTimeMinutes || 0
      }
    }));

    // --- Map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á PopulatedNovelForDetailPage ---
    const author = toPopulatedAuthor(novelFromDb.author as IUser); // Cast IUser ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤ populate ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    if (!author) {
      console.error(`‚ùå [API /novels/[slug]] Author object is not correctly populated or missing for novel: "${novelFromDb.title}" (ID: ${novelFromDb._id})`);
      return NextResponse.json(
          { error: "Internal server error", message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" },
          { status: 500 }
      );
    }
    const coAuthors = (novelFromDb.coAuthors as IUser[])?.map(toPopulatedAuthor).filter(Boolean) as PopulatedAuthorForDetailPage[] | undefined;


    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö populated categories ‡∏Å‡πà‡∏≠‡∏ô map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error
    const mainThemeCategoryPopulated = novelFromDb.themeAssignment?.mainTheme?.categoryId as unknown as ICategory | undefined;
    const mainThemeCategoryInfo = toPopulatedCategoryInfo(mainThemeCategoryPopulated);
    if (!mainThemeCategoryInfo && novelFromDb.themeAssignment?.mainTheme?.categoryId) {
         console.warn(`‚ö†Ô∏è [API /novels/[slug]] Main theme category ID ${novelFromDb.themeAssignment.mainTheme.categoryId} was not fully populated for novel "${novelFromDb.title}"`);
         // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ fallback ‡∏´‡∏£‡∏∑‡∏≠ log ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    }
     if (!mainThemeCategoryInfo) {
        console.error(`‚ùå [API /novels/[slug]] Main theme category for novel "${novelFromDb.title}" is missing or not populated correctly.`);
        // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ return error 500 ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ default category info
         return NextResponse.json(
            { error: "Internal server error", message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå" },
            { status: 500 }
        );
    }


    const languageCategoryPopulated = novelFromDb.language as ICategory | undefined;
    const languageInfo = toPopulatedCategoryInfo(languageCategoryPopulated);
    if (!languageInfo && novelFromDb.language) {
         console.warn(`‚ö†Ô∏è [API /novels/[slug]] Language category ID ${novelFromDb.language} was not fully populated for novel "${novelFromDb.title}"`);
    }
    if (!languageInfo) {
        console.error(`‚ùå [API /novels/[slug]] Language category for novel "${novelFromDb.title}" is missing or not populated correctly.`);
         return NextResponse.json(
            { error: "Internal server error", message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå" },
            { status: 500 }
        );
    }


    const responseData: PopulatedNovelForDetailPage = {
      _id: novelFromDb._id.toString(),
      title: novelFromDb.title,
      slug: novelFromDb.slug,
      author: author, // ‡πÉ‡∏ä‡πâ author ‡∏ó‡∏µ‡πà map ‡πÅ‡∏•‡πâ‡∏ß
      coAuthors: coAuthors, // ‡πÉ‡∏ä‡πâ coAuthors ‡∏ó‡∏µ‡πà map ‡πÅ‡∏•‡πâ‡∏ß
      synopsis: novelFromDb.synopsis,
      longDescription: novelFromDb.longDescription,
      coverImageUrl: novelFromDb.coverImageUrl,
      bannerImageUrl: novelFromDb.bannerImageUrl,
      themeAssignment: {
        mainTheme: {
          categoryId: mainThemeCategoryInfo, // ‡πÉ‡∏ä‡πâ mainThemeCategoryInfo ‡∏ó‡∏µ‡πà map ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
          customName: novelFromDb.themeAssignment?.mainTheme?.customName,
        },
        subThemes: novelFromDb.themeAssignment?.subThemes?.map(st => ({
          categoryId: toPopulatedCategoryInfo(st.categoryId as unknown as ICategory)!, // ‡πÉ‡∏ä‡πâ ! ‡∏ñ‡πâ‡∏≤‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ populate ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞ schema ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö
          customName: st.customName,
        })).filter(st => st.categoryId) || [], // filter out subthemes with no valid categoryId
        moodAndTone: toPopulatedCategoryInfoArray(novelFromDb.themeAssignment?.moodAndTone as unknown as ICategory[] || []),
        contentWarnings: toPopulatedCategoryInfoArray(novelFromDb.themeAssignment?.contentWarnings as unknown as ICategory[] || []),
        customTags: novelFromDb.themeAssignment?.customTags || [],
      },
      narrativeFocus: novelFromDb.narrativeFocus as INarrativeFocus, // Cast ‡∏ñ‡πâ‡∏≤‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
      worldBuildingDetails: novelFromDb.worldBuildingDetails as IWorldBuildingDetails,
      ageRatingCategoryId: toPopulatedCategoryInfo(novelFromDb.ageRatingCategoryId as ICategory | undefined),
      status: novelFromDb.status as INovel["status"],
      accessLevel: novelFromDb.accessLevel as INovel["accessLevel"],
      isCompleted: novelFromDb.isCompleted,
      endingType: novelFromDb.endingType as INovel["endingType"],
      sourceType: novelFromDb.sourceType as ISourceType,
      language: languageInfo, // ‡πÉ‡∏ä‡πâ languageInfo ‡∏ó‡∏µ‡πà map ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      firstEpisodeId: novelFromDb.firstEpisodeId?.toString(),
      totalEpisodesCount: novelFromDb.totalEpisodesCount,
      publishedEpisodesCount: novelFromDb.publishedEpisodesCount,
      stats: novelFromDb.stats as INovelStats,
      monetizationSettings: novelFromDb.monetizationSettings as IMonetizationSettings,
      psychologicalAnalysisConfig: novelFromDb.psychologicalAnalysisConfig as IPsychologicalAnalysisConfig,
      collaborationSettings: novelFromDb.collaborationSettings as ICollaborationSettings | undefined,
      isFeatured: novelFromDb.isFeatured,
      publishedAt: novelFromDb.publishedAt?.toISOString(),
      scheduledPublicationDate: novelFromDb.scheduledPublicationDate?.toISOString(),
      lastContentUpdatedAt: novelFromDb.lastContentUpdatedAt.toISOString(),
      relatedNovels: novelFromDb.relatedNovels?.map(id => id.toString()),
      seriesId: novelFromDb.seriesId?.toString(),
      seriesOrder: novelFromDb.seriesOrder,
      createdAt: novelFromDb.createdAt.toISOString(),
      updatedAt: novelFromDb.updatedAt.toISOString(),
      characters: characters,
      episodes: episodes,
    };

    console.log(`‚úÖ [API /novels/[slug]] Successfully fetched and mapped novel: "${novelFromDb.title}" (${characters.length} characters, ${episodes.length} episodes)`);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
    return NextResponse.json({
      success: true,
      novel: responseData
    }, {
      headers: {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cache-Control ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        // s-maxage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CDN, stale-while-revalidate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ‡∏Ç‡∏ì‡∏∞ revalidate
        'Cache-Control': 'public, s-maxage=60, stale-while-revalidate=300',
      }
    });

  } catch (error: any) {
    console.error(`‚ùå [API /novels/[slug]] Error fetching novel for slug (slug in context likely: "${context?.params?.slug}"):`, error.message, error.stack);
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î error ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô development mode
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      },
      { status: 500 }
    );
  }
}