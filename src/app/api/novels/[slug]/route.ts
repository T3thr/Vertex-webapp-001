// src/app/api/novels/[slug]/route.ts
import { NextResponse } from 'next/server';
import dbConnect from '@/backend/lib/mongodb';
import NovelModel, { INovel } from '@/backend/models/Novel';
import UserModel, { IUser } from '@/backend/models/User'; // Import UserModel ‡πÅ‡∏•‡∏∞ IUser
import CategoryModel, { ICategory } from '@/backend/models/Category'; // Import CategoryModel ‡πÅ‡∏•‡∏∞ ICategory
import EpisodeModel, { IEpisode } from '@/backend/models/Episode'; // Import EpisodeModel ‡πÅ‡∏•‡∏∞ IEpisode
import mongoose from 'mongoose';

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Populate ‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Type Safe)
interface PopulatedNovel extends Omit<INovel, 'author' | 'categories'> {
  author: Pick<IUser, '_id' | 'username' | 'profile'> | null; // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  categories: Pick<ICategory, '_id' | 'name' | 'slug'>[]; // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô

}

export async function GET(
  request: Request,
  { params }: { params: { slug: string } }
) {
  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  await dbConnect();
  const { slug } = params;

  if (!slug) {
    return NextResponse.json({ error: 'Slug is required' }, { status: 400 });
  }

  console.log(`üì° API /api/novels/${slug} called`);

  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Instance ‡∏Ç‡∏≠‡∏á Models ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ Populate
    const User = UserModel();
    const Category = CategoryModel();
    const Episode = EpisodeModel();

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ slug ‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö, ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ö‡∏ö public)
    // Populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á: author, categories
    const novel: PopulatedNovel | null = await NovelModel()
      .findOne({ slug: slug, isDeleted: false, visibility: 'public' })
      .populate<{ author: PopulatedNovel['author'] }>({
        path: 'author',
        model: User, // ‡∏£‡∏∞‡∏ö‡∏∏ Model ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Populate
        select: '_id username profile.displayName profile.avatar profile.bio', // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å User
      })
      .populate<{ categories: PopulatedNovel['categories'] }>({
        path: 'categories',
        model: Category, // ‡∏£‡∏∞‡∏ö‡∏∏ Model ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Populate
        select: '_id name slug', // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å Category
      })
      // .populate('subCategories', 'name slug') // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ SubCategories ‡∏î‡πâ‡∏ß‡∏¢
      .lean() // ‡πÉ‡∏ä‡πâ lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ Plain JavaScript Object ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
      .exec(); // ‡πÉ‡∏ä‡πâ exec() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ query ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

    if (!novel) {
      console.log(`‚ùå Novel with slug "${slug}" not found.`);
      return NextResponse.json({ error: 'Novel not found' }, { status: 404 });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö) - ‡∏≠‡∏≤‡∏à‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const episodes = await Episode.find({
      novel: novel._id,
      status: 'published',
      isDeleted: false,
    })
      .sort({ episodeNumber: 1 }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≠‡∏ô
      .select('_id title slug episodeNumber isFree priceInCoins publishedAt') // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      .limit(100) // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏Ñ‡πà 100 ‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
      .lean()
      .exec();

    // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô novel object
    const novelWithEpisodes = { ...novel, episodes };

    console.log(`‚úÖ Fetched novel "${novel.title}" successfully.`);
    return NextResponse.json(novelWithEpisodes, { status: 200 });

  } catch (error: any) {
    console.error(`‚ùå Error fetching novel with slug "${slug}":`, error);
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö CastError ‡∏ñ‡πâ‡∏≤ ObjectId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (error instanceof mongoose.Error.CastError) {
        return NextResponse.json({ error: 'Invalid ID format' }, { status: 400 });
    }
    return NextResponse.json(
      { error: 'An error occurred while fetching the novel', details: error.message },
      { status: 500 }
    );
  }
}