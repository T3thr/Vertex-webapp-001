// src/app/api/novels/[slug]/route.ts
// API Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà, ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô, ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£, ‡∏ï‡∏≠‡∏ô

import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb";
import NovelModel, { INovel, IThemeAssignment, ISourceType, INarrativeFocus, IWorldBuildingDetails, INovelStats, IMonetizationSettings, IPsychologicalAnalysisConfig, ICollaborationSettings, NovelStatus as NovelStatusEnum } from "@/backend/models/Novel";
import UserModel, { IUser, IUserProfile } from "@/backend/models/User";
import CategoryModel, { ICategory } from "@/backend/models/Category";
import CharacterModel, { ICharacter, CharacterRoleInStory } from "@/backend/models/Character";
import EpisodeModel, { IEpisode, EpisodeStatus, EpisodeAccessType } from "@/backend/models/Episode";
// import { Types } from "mongoose"; // Types ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ? ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ

// ===================================================================
// SECTION: TypeScript Interfaces ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Response (‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢)
// ===================================================================

/**
 * @interface PopulatedAuthorForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)
 */
interface PopulatedAuthorForDetailPage {
  _id: string;
  username?: string;
  profile: { // ‡∏à‡∏≤‡∏Å IUserProfile
    displayName?: string;
    penName?: string;
    avatarUrl?: string;
    bio?: string;
  };
  writerStats?: { // ‡∏à‡∏≤‡∏Å IWriterStats (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å field ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    totalNovelsPublished: number;
    totalViewsAcrossAllNovels: number;
    totalLikesReceivedOnNovels: number;
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏à‡∏≤‡∏Å IWriterStats ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô totalFollowers (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ô writerStats)
  };
}

/**
 * @interface PopulatedCategoryInfo
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Category ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô (‡∏ä‡∏∑‡πà‡∏≠, slug, ‡∏™‡∏µ)
 */
interface PopulatedCategoryInfo {
  _id: string;
  name: string;
  slug: string;
  color?: string;
  // description?: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
}

/**
 * @interface PopulatedThemeAssignmentForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö themeAssignment ‡∏ó‡∏µ‡πà‡∏°‡∏µ CategoryId ‡∏ñ‡∏π‡∏Å populate ‡πÅ‡∏•‡πâ‡∏ß
 */
interface PopulatedThemeAssignmentForDetailPage {
  mainTheme: {
    categoryId: PopulatedCategoryInfo; // Populated
    customName?: string;
  };
  subThemes?: Array<{
    categoryId: PopulatedCategoryInfo; // Populated
    customName?: string;
  }>;
  moodAndTone?: PopulatedCategoryInfo[]; // Populated array
  contentWarnings?: PopulatedCategoryInfo[]; // Populated array
  customTags?: string[];
}

/**
 * @interface PopulatedCharacterForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
 */
interface PopulatedCharacterForDetailPage {
  _id: string;
  name: string;
  profileImageUrl?: string; // Virtual field ‡∏à‡∏≤‡∏Å Character model
  description?: string;
  roleInStory?: CharacterRoleInStory;
  colorTheme?: string;
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô characterCode
}

/**
 * @interface PopulatedEpisodeForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
 */
interface PopulatedEpisodeForDetailPage {
  _id: string;
  title: string;
  episodeOrder: number;
  status: EpisodeStatus;
  accessType: EpisodeAccessType;
  priceCoins?: number;
  publishedAt?: string; // ISOString (‡∏Ñ‡∏ß‡∏£‡πÅ‡∏õ‡∏•‡∏á Date ‡πÄ‡∏õ‡πá‡∏ô string ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á response)
  teaserText?: string;
  stats: { // ‡∏à‡∏≤‡∏Å IEpisodeStats (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å field ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    viewsCount: number;
    likesCount: number;
    commentsCount: number;
    totalWords: number;
    estimatedReadingTimeMinutes: number;
    // purchasesCount?: number; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
  };
  // episodeUrl?: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏° virtual field ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
}


/**
 * @interface PopulatedNovelForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
 * Interface ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Frontend (page.tsx) ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
 */
export interface PopulatedNovelForDetailPage {
  _id: string;
  title: string;
  slug: string;
  author: PopulatedAuthorForDetailPage; // Populated
  synopsis: string;
  longDescription?: string;
  coverImageUrl?: string;
  bannerImageUrl?: string;
  themeAssignment: PopulatedThemeAssignmentForDetailPage; // Populated ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
  narrativeFocus?: INarrativeFocus; // Schema ‡πÄ‡∏î‡∏¥‡∏°, ObjectId ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà populate
  worldBuildingDetails?: IWorldBuildingDetails; // Schema ‡πÄ‡∏î‡∏¥‡∏°
  ageRatingCategoryId?: PopulatedCategoryInfo; // Populated
  status: NovelStatusEnum; // ‡πÉ‡∏ä‡πâ Enum ‡∏à‡∏≤‡∏Å Novel model ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  accessLevel: INovel["accessLevel"];
  isCompleted: boolean;
  endingType: INovel["endingType"];
  sourceType: ISourceType; // Schema ‡πÄ‡∏î‡∏¥‡∏°
  language: PopulatedCategoryInfo; // Populated
  firstEpisodeId?: string; // ObjectId as string
  totalEpisodesCount: number;
  publishedEpisodesCount: number;
  stats: INovelStats; // Schema ‡πÄ‡∏î‡∏¥‡∏°
  monetizationSettings: IMonetizationSettings; // Schema ‡πÄ‡∏î‡∏¥‡∏°
  psychologicalAnalysisConfig: IPsychologicalAnalysisConfig; // Schema ‡πÄ‡∏î‡∏¥‡∏°
  collaborationSettings?: ICollaborationSettings; // Schema ‡πÄ‡∏î‡∏¥‡∏°
  isFeatured?: boolean;
  publishedAt?: string; // ISOString
  scheduledPublicationDate?: string; // ISOString
  lastContentUpdatedAt: string; // ISOString
  relatedNovels?: string[]; // Array of ObjectIds as strings
  seriesId?: string; // ObjectId as string
  seriesOrder?: number;
  createdAt: string; // ISOString
  updatedAt: string; // ISOString

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏´‡∏•‡∏±‡∏Å (‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà query ‡∏°‡∏≤, ‡πÄ‡∏ä‡πà‡∏ô 6 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å)
  characters?: PopulatedCharacterForDetailPage[];

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô (‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà query ‡∏°‡∏≤, ‡πÄ‡∏ä‡πà‡∏ô 10 ‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å)
  episodes?: PopulatedEpisodeForDetailPage[];

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI ‡πÄ‡∏ä‡πà‡∏ô novelUrl (virtual)
  novelUrl?: string;
}

// ===================================================================
// SECTION: API Route Handler
// ===================================================================

/**
 * GET Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug
 * @param request NextRequest object - ‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏≥‡∏Ç‡∏≠ HTTP ‡∏Ç‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤
 * @param context Context object ‡∏ó‡∏µ‡πà‡∏°‡∏µ params - ‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå context ‡∏ó‡∏µ‡πà Next.js ‡∏™‡πà‡∏á‡∏°‡∏≤ ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ property `params`
 * @param context.params ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á Route ‡πÅ‡∏ö‡∏ö ƒë·ªông (dynamic route parameters)
 * @param context.params.slug slug ‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @returns NextResponse ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠ error object
 */
export async function GET(
  request: NextRequest, // ‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ß‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÅ‡∏£‡∏Å‡∏Ñ‡∏∑‡∏≠ NextRequest ‡πÄ‡∏™‡∏°‡∏≠
  { params }: { params: { slug: string } } // ‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ß‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠ object ‡∏ó‡∏µ‡πà‡∏°‡∏µ property `params`
) {
  try {
    // 1. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    // ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å dbConnect() ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ request ‡πÄ‡∏õ‡πá‡∏ô pattern ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö serverless functions
    // Mongoose ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ connection pooling
    await dbConnect();

    // 2. ‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö slug ‡∏à‡∏≤‡∏Å params
    const slug = params.slug;
    if (!slug || typeof slug !== 'string' || !slug.trim()) {
      console.warn(`‚ö†Ô∏è [API GET /novels/${slug}] Slug ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: "${slug}"`);
      return NextResponse.json(
        {
          success: false,
          error: "Invalid slug parameter",
          message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ slug ‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô URL"
        },
        { status: 400 }
      );
    }
    const cleanedSlug = slug.trim().toLowerCase();
    console.log(`üìÑ [API GET /novels/${cleanedSlug}] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug: "${cleanedSlug}"`);

    // 3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ slug ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß
    //    ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô query ‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
    //    ‡πÉ‡∏ä‡πâ .lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ Plain Old JavaScript Object (POJO) ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ Mongoose Document ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    //    ‡πÅ‡∏•‡∏∞‡∏•‡∏î memory footprint ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ populate ‡πÄ‡∏¢‡∏≠‡∏∞
    const novelFromDb = await NovelModel.findOne({
      slug: cleanedSlug,
      isDeleted: { $ne: true }, // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å soft delete
      // status: NovelStatusEnum.PUBLISHED, // ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤: ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà PUBLISHED ‡∏´‡∏£‡∏∑‡∏≠ COMPLETED ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
                                         // ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ logic ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ DRAFT ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
    })
    .populate<{ author: IUser }>({
      path: 'author',
      select: 'username profile writerStats.totalNovelsPublished writerStats.totalViewsAcrossAllNovels writerStats.totalLikesReceivedOnNovels', // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å User ‡πÅ‡∏•‡∏∞ WriterStats
      model: UserModel // ‡∏£‡∏∞‡∏ö‡∏∏ Model ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏°‡πâ Mongoose ‡∏≠‡∏≤‡∏à infer ‡πÑ‡∏î‡πâ
    })
    .populate<{ themeAssignment_mainTheme_categoryId: ICategory }>({ // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö populated field
      path: 'themeAssignment.mainTheme.categoryId',
      select: 'name slug color description', // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å field ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å Category
      model: CategoryModel
    })
    .populate<{ themeAssignment_subThemes_categoryId: ICategory[] }>({
      path: 'themeAssignment.subThemes.categoryId',
      select: 'name slug color description',
      model: CategoryModel
    })
    .populate<{ themeAssignment_moodAndTone: ICategory[] }>({
      path: 'themeAssignment.moodAndTone',
      select: 'name slug color description',
      model: CategoryModel
    })
    .populate<{ themeAssignment_contentWarnings: ICategory[] }>({
      path: 'themeAssignment.contentWarnings',
      select: 'name slug color description',
      model: CategoryModel
    })
    .populate<{ ageRatingCategoryId: ICategory }>({
      path: 'ageRatingCategoryId',
      select: 'name slug color description',
      model: CategoryModel
    })
    .populate<{ language: ICategory }>({
      path: 'language',
      select: 'name slug', // ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏µ
      model: CategoryModel
    })
    // ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ populate ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö INarrativeFocus fields ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠ Category ‡πÅ‡∏ó‡∏ô ObjectId
    // .populate({ path: 'narrativeFocus.narrativePacingTags', select: 'name slug', model: CategoryModel })
    // .populate({ path: 'narrativeFocus.primaryConflictTypes', select: 'name slug', model: CategoryModel })
    // ... ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ô narrativeFocus ‡πÅ‡∏•‡∏∞ worldBuildingDetails ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ObjectId ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ populate
    .lean({ virtuals: true }); // ‡πÄ‡∏û‡∏¥‡πà‡∏° { virtuals: true } ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ virtual fields (‡πÄ‡∏ä‡πà‡∏ô novelUrl) ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á .lean()

    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!novelFromDb) {
      console.warn(`‚ö†Ô∏è [API GET /novels/${cleanedSlug}] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug: "${cleanedSlug}"`);
      return NextResponse.json(
        {
          success: false,
          error: "Novel not found",
          message: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (slug: ${cleanedSlug})`
        },
        { status: 404 }
      );
    }

    // 5. Helper functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Category ‡∏ó‡∏µ‡πà populate ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
    //    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ client ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
    const toPopulatedCategoryInfo = (cat: any): PopulatedCategoryInfo | undefined => {
      if (!cat || typeof cat !== 'object' || !cat._id) return undefined; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ cat ‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ _id
      return {
        _id: cat._id.toString(),
        name: cat.name,
        slug: cat.slug,
        color: cat.color,
        // description: cat.description, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      };
    };

    const toPopulatedCategoryInfoArray = (cats: any[]): PopulatedCategoryInfo[] => {
      if (!Array.isArray(cats)) return [];
      return cats.map(toPopulatedCategoryInfo).filter(Boolean) as PopulatedCategoryInfo[];
    };

    // 6. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠ performance)
    //    ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
    const charactersFromDb = await CharacterModel.find({
      novelId: novelFromDb._id, // ‡πÉ‡∏ä‡πâ _id ‡∏à‡∏≤‡∏Å novel ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ
      isArchived: false
    })
    .select('name description roleInStory colorTheme profileImageMediaId profileImageSourceType') // profileImageUrl ‡πÄ‡∏õ‡πá‡∏ô virtual
    .sort({ createdAt: 1 }) // ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° 'orderInNovel' ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ field ‡∏ô‡∏±‡πâ‡∏ô
    .limit(6) // ‡πÅ‡∏™‡∏î‡∏á 6 ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÅ‡∏£‡∏Å
    .lean({ virtuals: true }); // ‡πÉ‡∏´‡πâ virtual 'profileImageUrl' ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

    const characters: PopulatedCharacterForDetailPage[] = charactersFromDb.map(charDB => {
      const char = charDB as any; // Cast to any to access potential virtuals not in ICharacter initially
      return {
        _id: char._id.toString(),
        name: char.name,
        // ‡∏´‡∏≤‡∏Å .lean({ virtuals: true }) ‡∏ó‡∏≥‡πÉ‡∏´‡πâ profileImageUrl ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô char ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ char.profileImageUrl
        // ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡πÄ‡∏≠‡∏á‡∏ï‡∏≤‡∏° logic ‡πÄ‡∏î‡∏¥‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á CharacterModel virtual ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö lean ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
        profileImageUrl: char.profileImageUrl || (char.profileImageMediaId && char.profileImageSourceType ? `/api/media_placeholder/${char.profileImageSourceType}/${char.profileImageMediaId.toString()}` : '/images/default-avatar.png'),
        description: char.description,
        roleInStory: char.roleInStory as CharacterRoleInStory,
        colorTheme: char.colorTheme,
      };
    });

    // 7. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å)
    //    ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const episodesFromDb = await EpisodeModel.find({
      novelId: novelFromDb._id,
      status: { $in: [EpisodeStatus.PUBLISHED, EpisodeStatus.SCHEDULED] }
    })
    .select('title episodeOrder status accessType priceCoins publishedAt teaserText stats')
    .sort({ episodeOrder: -1 }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    .limit(10) // ‡πÅ‡∏™‡∏î‡∏á 10 ‡∏ï‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    .lean({ virtuals: true }); // ‡πÉ‡∏´‡πâ virtual 'episodeUrl', 'isTrulyFree' ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)

    const episodes: PopulatedEpisodeForDetailPage[] = episodesFromDb.map(epDB => {
      const ep = epDB as any;
      return {
      _id: ep._id.toString(),
      title: ep.title,
      episodeOrder: ep.episodeOrder,
      status: ep.status as EpisodeStatus,
      accessType: ep.accessType as EpisodeAccessType,
      priceCoins: ep.priceCoins,
      publishedAt: ep.publishedAt instanceof Date ? ep.publishedAt.toISOString() : ep.publishedAt,
      teaserText: ep.teaserText,
      stats: { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ep.stats ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô access
        viewsCount: ep.stats?.viewsCount || 0,
        likesCount: ep.stats?.likesCount || 0,
        commentsCount: ep.stats?.commentsCount || 0,
        totalWords: ep.stats?.totalWords || 0,
        estimatedReadingTimeMinutes: ep.stats?.estimatedReadingTimeMinutes || 0
      },
      // episodeUrl: ep.episodeUrl // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ virtual ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞ lean({ virtuals: true }) ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    }});

    // 8. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Response: ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å novelFromDb (‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô POJO) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á PopulatedNovelForDetailPage
    //    ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Interface ‡∏ó‡∏µ‡πà Frontend ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Author ‡∏ó‡∏µ‡πà populate ‡∏°‡∏≤
    const populatedAuthor = novelFromDb.author as unknown as IUser; // Cast to IUser after population
    if (!populatedAuthor || typeof populatedAuthor !== 'object' || !populatedAuthor._id) {
        console.error(`‚ùå [API GET /novels/${cleanedSlug}] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô (author) ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å populate ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢: "${novelFromDb.title}"`);
        return NextResponse.json(
            { success: false, error: "Internal server error", message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" },
            { status: 500 }
        );
    }
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° themeAssignment ‡∏ó‡∏µ‡πà populate ‡πÅ‡∏•‡πâ‡∏ß
    const themeAssignmentForDetail: PopulatedThemeAssignmentForDetailPage = {
        mainTheme: {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ mainTheme.categoryId ‡∏ñ‡∏π‡∏Å populate ‡∏°‡∏≤‡∏à‡∏£‡∏¥‡∏á ‡πÜ
            categoryId: toPopulatedCategoryInfo(novelFromDb.themeAssignment?.mainTheme?.categoryId as any)!, // ‡πÉ‡∏ä‡πâ ! ‡∏´‡∏≤‡∏Å‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ populated
            customName: novelFromDb.themeAssignment?.mainTheme?.customName,
        },
        subThemes: toPopulatedCategoryInfoArray(novelFromDb.themeAssignment?.subThemes?.map(st => st.categoryId as any) || [])
                     .map((catInfo, index) => ({
                         categoryId: catInfo,
                         customName: novelFromDb.themeAssignment?.subThemes?.[index]?.customName
                     })),
        moodAndTone: toPopulatedCategoryInfoArray(novelFromDb.themeAssignment?.moodAndTone as any[] || []),
        contentWarnings: toPopulatedCategoryInfoArray(novelFromDb.themeAssignment?.contentWarnings as any[] || []),
        customTags: novelFromDb.themeAssignment?.customTags || [],
    };


    const responseData: PopulatedNovelForDetailPage = {
      _id: novelFromDb._id.toString(),
      title: novelFromDb.title,
      slug: novelFromDb.slug, // slug ‡∏à‡∏≤‡∏Å DB (‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö cleanedSlug)
      author: {
        _id: populatedAuthor._id.toString(),
        username: populatedAuthor.username,
        profile: {
          displayName: populatedAuthor.profile?.displayName,
          penName: populatedAuthor.profile?.penName,
          avatarUrl: populatedAuthor.profile?.avatarUrl,
          bio: populatedAuthor.profile?.bio,
        },
        writerStats: populatedAuthor.writerStats ? { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ writerStats ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          totalNovelsPublished: populatedAuthor.writerStats.totalNovelsPublished,
          totalViewsAcrossAllNovels: populatedAuthor.writerStats.totalViewsAcrossAllNovels,
          totalLikesReceivedOnNovels: populatedAuthor.writerStats.totalLikesReceivedOnNovels,
        } : undefined,
      },
      synopsis: novelFromDb.synopsis,
      longDescription: novelFromDb.longDescription,
      coverImageUrl: novelFromDb.coverImageUrl,
      bannerImageUrl: novelFromDb.bannerImageUrl,
      themeAssignment: themeAssignmentForDetail,
      narrativeFocus: novelFromDb.narrativeFocus as INarrativeFocus, // Cast ‡∏ñ‡πâ‡∏≤‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
      worldBuildingDetails: novelFromDb.worldBuildingDetails as IWorldBuildingDetails,
      ageRatingCategoryId: toPopulatedCategoryInfo(novelFromDb.ageRatingCategoryId as any),
      status: novelFromDb.status as NovelStatusEnum,
      accessLevel: novelFromDb.accessLevel as INovel["accessLevel"],
      isCompleted: novelFromDb.isCompleted,
      endingType: novelFromDb.endingType as INovel["endingType"],
      sourceType: novelFromDb.sourceType as ISourceType,
      language: toPopulatedCategoryInfo(novelFromDb.language as any)!, // ‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πá‡∏ô required field
      firstEpisodeId: novelFromDb.firstEpisodeId?.toString(),
      totalEpisodesCount: novelFromDb.totalEpisodesCount,
      publishedEpisodesCount: novelFromDb.publishedEpisodesCount,
      stats: novelFromDb.stats as INovelStats,
      monetizationSettings: novelFromDb.monetizationSettings as IMonetizationSettings,
      psychologicalAnalysisConfig: novelFromDb.psychologicalAnalysisConfig as IPsychologicalAnalysisConfig,
      collaborationSettings: novelFromDb.collaborationSettings as ICollaborationSettings,
      isFeatured: novelFromDb.isFeatured,
      publishedAt: novelFromDb.publishedAt instanceof Date ? novelFromDb.publishedAt.toISOString() : novelFromDb.publishedAt,
      scheduledPublicationDate: novelFromDb.scheduledPublicationDate instanceof Date ? novelFromDb.scheduledPublicationDate.toISOString() : novelFromDb.scheduledPublicationDate,
      lastContentUpdatedAt: novelFromDb.lastContentUpdatedAt instanceof Date ? novelFromDb.lastContentUpdatedAt.toISOString() : novelFromDb.lastContentUpdatedAt,
      relatedNovels: novelFromDb.relatedNovels?.map((id: any) => id.toString()), // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö type ‡∏Ç‡∏≠‡∏á id
      seriesId: novelFromDb.seriesId?.toString(),
      seriesOrder: novelFromDb.seriesOrder,
      createdAt: novelFromDb.createdAt instanceof Date ? novelFromDb.createdAt.toISOString() : novelFromDb.createdAt,
      updatedAt: novelFromDb.updatedAt instanceof Date ? novelFromDb.updatedAt.toISOString() : novelFromDb.updatedAt,
      characters: characters,
      episodes: episodes,
      novelUrl: (novelFromDb as any).novelUrl, // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á virtual field ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å .lean({ virtuals: true }) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ
    };

    console.log(`‚úÖ [API GET /novels/${cleanedSlug}] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: "${novelFromDb.title}" (ID: ${novelFromDb._id.toString()})`);
    console.log(`   [API GET /novels/${cleanedSlug}] Characters fetched: ${characters.length}, Episodes fetched: ${episodes.length}`);
    console.log(`   [API GET /novels/${cleanedSlug}] Main theme: ${responseData.themeAssignment.mainTheme.categoryId.name}`);


    // 9. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Client
    //    ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Cache-Control header ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ CDN ‡πÅ‡∏•‡∏∞ Browser cache ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
    //    s-maxage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö shared caches (‡πÄ‡∏ä‡πà‡∏ô CDN), stale-while-revalidate ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏ì‡∏∞ revalidate ‡πÑ‡∏î‡πâ
    return NextResponse.json({
      success: true,
      novel: responseData
    }, {
      headers: {
        'Cache-Control': 'public, s-maxage=60, stale-while-revalidate=300', // Cache 1 ‡∏ô‡∏≤‡∏ó‡∏µ, revalidate ‡πÉ‡∏ô background ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      }
    });

  } catch (error: any) {
    // 10. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    //     ‡∏Ñ‡∏ß‡∏£ log error ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ù‡∏±‡πà‡∏á server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    //     ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á error details ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡πÉ‡∏´‡πâ client ‡πÉ‡∏ô production mode
    const slugParam = params ? params.slug : "undefined_slug";
    console.error(`‚ùå [API GET /novels/${slugParam}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á:`, error.message);
    if (error.stack) {
        console.error("Stacktrace:", error.stack.substring(0, 1000)); // Log ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á stacktrace
    }
    // console.error(error); // Log error object ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏¢‡∏≠‡∏∞)

    return NextResponse.json(
      {
        success: false,
        error: "Internal server error",
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á",
        // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î error ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô development mode ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢ debug
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      },
      { status: 500 }
    );
  }
}