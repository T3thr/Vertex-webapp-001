// src/app/api/novels/[slug]/route.ts
// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ novel/[slug]
// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏° populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• author, categories, ‡πÅ‡∏•‡∏∞ subCategories
// ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢

import { NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb";
import NovelModel, { INovel } from "@/backend/models/Novel"; // Import INovel
import UserModel, { IUser } from "@/backend/models/User"; // Import IUser
import CategoryModel, { ICategory } from "@/backend/models/Category"; // Import ICategory
import mongoose from "mongoose";

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Author ‡∏ó‡∏µ‡πà Populate ‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
interface PopulatedAuthor extends Pick<IUser, "_id" | "username"> {
  profile?: {
    displayName?: string;
    avatar?: string;
  };
}

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Category ‡∏ó‡∏µ‡πà Populate ‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
type PopulatedCategory = Pick<ICategory, "_id" | "name" | "slug">;

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Novel ‡∏ó‡∏µ‡πà Populate ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API response
// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ fields ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ novel/[slug]
export interface PopulatedNovelForDetailPage
  extends Omit<
    INovel,
    "author" | "categories" | "subCategories" | "embeddingVector" | "seo" | "stats" | "sentimentAnalysis" | "genreDistribution"
  > {
  author: PopulatedAuthor | null; // ‡πÉ‡∏ä‡πâ Type ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
  categories: PopulatedCategory[]; // ‡πÉ‡∏ä‡πâ Type ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
  subCategories?: PopulatedCategory[]; // ‡πÉ‡∏ä‡πâ Type ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©
  formattedViewsCount?: string;
  formattedLikesCount?: string;
  formattedFollowersCount?: string;
  relatedNovels?: Pick<INovel, "_id" | "title" | "slug" | "coverImage">[]; // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô GET ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug
export async function GET(
  request: Request, // Parameter ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏Ñ‡∏∑‡∏≠ Request object
  { params }: { params: { slug: string } } // ‡πÉ‡∏ä‡πâ destructuring ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á params ‡∏à‡∏≤‡∏Å context
): Promise<NextResponse<PopulatedNovelForDetailPage | { error: string }>> {
  const { slug } = params; // ‡∏î‡∏∂‡∏á slug ‡∏à‡∏≤‡∏Å params
  console.log(`\n--- üì° [API GET /api/novels/${slug}] ---`);

  if (!slug) {
    console.error("‚ùå Slug parameter is missing.");
    return NextResponse.json({ error: "Slug parameter is required" }, { status: 400 });
  }

  try {
    await dbConnect();
    console.log("‚úÖ Database connected.");

    const Novel = NovelModel(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Novel Model
    const User = UserModel(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ User Model
    const Category = CategoryModel(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Category Model

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ slug, ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö (isDeleted: false) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ (visibility: 'public')
    // Populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á: author, categories, subCategories
    // Select ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ fields ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    const novel = (await Novel.findOne({
      slug: slug,
      isDeleted: false,
      // visibility: 'public', // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ private/unlisted ‡∏ú‡πà‡∏≤‡∏ô slug ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    })
      .populate<{ author: PopulatedAuthor | null }>({
        path: "author",
        model: User, // ‡∏£‡∏∞‡∏ö‡∏∏ Model ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Populate
        select: "username profile.displayName profile.avatar", // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å fields ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      })
      .populate<{ categories: PopulatedCategory[] }>({
        path: "categories",
        model: Category, // ‡∏£‡∏∞‡∏ö‡∏∏ Model
        select: "name slug", // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å fields
      })
      .populate<{ subCategories?: PopulatedCategory[] }>({
        path: "subCategories",
        model: Category, // ‡∏£‡∏∞‡∏ö‡∏∏ Model
        select: "name slug", // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å fields
      })
      .select(
        "title slug description coverImage author categories subCategories tags status visibility language isExplicitContent ageRating averageRating ratingsCount viewsCount likesCount followersCount episodesCount publishedEpisodesCount wordsCount settings lastEpisodePublishedAt firstPublishedAt createdAt updatedAt isPremium isDiscounted discountDetails gameElementsSummary"
      )
      .lean() // ‡πÉ‡∏ä‡πâ lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ Plain Old JavaScript Object (POJO)
      .exec()) as PopulatedNovelForDetailPage | null; // Cast ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Type ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á

    if (!novel) {
      console.warn(`‚ö†Ô∏è Novel with slug "${slug}" not found.`);
      return NextResponse.json({ error: "Novel not found" }, { status: 404 });
    }

    console.log(`‚úÖ Novel "${novel.title}" fetched successfully.`);

    // --- (Optional) ‡πÄ‡∏û‡∏¥‡πà‡∏° Logic ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ---
    // ‡πÄ‡∏ä‡πà‡∏ô ‡∏î‡∏∂‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (‡∏≠‡∏≤‡∏à‡∏à‡∏∞ base on categories/tags)
    // novel.relatedNovels = await Novel.find({
    //   categories: { $in: novel.categories.map(c => c._id) },
    //   _id: { $ne: novel._id }, // ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    //   isDeleted: false,
    //   visibility: 'public',
    // })
    // .limit(5)
    // .select('title slug coverImage')
    // .lean();
    // console.log(`‚úÖ Fetched ${novel.relatedNovels?.length || 0} related novels.`);

    // --- (Optional) Format ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö ---
    // ‡πÄ‡∏ä‡πà‡∏ô format ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß/‡πÑ‡∏•‡∏Ñ‡πå
    // novel.formattedViewsCount = formatNumber(novel.viewsCount);
    // novel.formattedLikesCount = formatNumber(novel.likesCount);
    // novel.formattedFollowersCount = formatNumber(novel.followersCount);

    return NextResponse.json(novel, { status: 200 });

  } catch (error: any) {
    console.error(`‚ùå Error fetching novel with slug "${slug}":`, error);
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô CastError ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏ä‡πà‡∏ô ObjectId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
    if (error instanceof mongoose.Error.CastError) {
      return NextResponse.json({ error: "Invalid format for slug or ID." }, { status: 400 });
    }
    return NextResponse.json(
      { error: "An error occurred while fetching the novel." },
      { status: 500 }
    );
  } finally {
    console.log(`--- üì° [API GET /api/novels/${slug}] Finished --- \n`);
  }
}

// (Optional) Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö format ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô utils)
function formatNumber(num: number): string {
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1).replace(/\.0$/, "") + "M";
  }
  if (num >= 1000) {
    return (num / 1000).toFixed(1).replace(/\.0$/, "") + "K";
  }
  return num.toString();
}