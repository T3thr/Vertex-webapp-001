// src/app/api/novels/[slug]/route.ts
// API Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà, ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô, ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£, ‡∏ï‡∏≠‡∏ô

import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/backend/lib/mongodb";
import NovelModel, { INovel, IThemeAssignment, ISourceType, INarrativeFocus, IWorldBuildingDetails, INovelStats, IMonetizationSettings, IPsychologicalAnalysisConfig, ICollaborationSettings } from "@/backend/models/Novel";
import UserModel, { IUser, IUserProfile, IWriterStats } from "@/backend/models/User";
import CategoryModel, { ICategory } from "@/backend/models/Category";
import CharacterModel, { ICharacter, CharacterRoleInStory, ICharacterExpression } from "@/backend/models/Character"; // ICharacterExpression ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö detail page ‡πÅ‡∏ï‡πà import ‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠
import EpisodeModel, { IEpisode, IEpisodeStats, EpisodeStatus, EpisodeAccessType } from "@/backend/models/Episode";
import { Types } from "mongoose";

// ===================================================================
// SECTION: TypeScript Interfaces ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Response
// ===================================================================

/**
 * @interface PopulatedAuthorForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate
 */
interface PopulatedAuthorForDetailPage {
  _id: string;
  username?: string;
  profile: {
    displayName?: string;
    penName?: string;
    avatarUrl?: string;
    bio?: string;
  };
  writerStats?: { // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
    totalNovelsPublished: number;
    totalViewsAcrossAllNovels: number;
    totalLikesReceivedOnNovels: number;
  };
}

/**
 * @interface PopulatedCategoryInfo
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Category ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
 */
interface PopulatedCategoryInfo {
  _id: string;
  name: string;
  slug: string;
  color?: string;
}

/**
 * @interface PopulatedThemeAssignment
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö themeAssignment ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate
 */
interface PopulatedThemeAssignment {
  mainTheme: {
    categoryId: PopulatedCategoryInfo; // ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤ mainTheme category ‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏™‡∏°‡∏≠
    customName?: string;
  };
  subThemes?: Array<{
    categoryId: PopulatedCategoryInfo; // ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤ subTheme category ‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏™‡∏°‡∏≠
    customName?: string;
  }>;
  moodAndTone?: PopulatedCategoryInfo[];
  contentWarnings?: PopulatedCategoryInfo[];
  customTags?: string[];
}

/**
 * @interface PopulatedCharacterForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
 */
interface PopulatedCharacterForDetailPage {
  _id: string;
  name: string;
  profileImageUrl?: string; // Virtual field from Character model
  description?: string;
  roleInStory?: CharacterRoleInStory;
  colorTheme?: string;
}

/**
 * @interface PopulatedEpisodeForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
 */
interface PopulatedEpisodeForDetailPage {
  _id: string;
  title: string;
  episodeOrder: number;
  status: EpisodeStatus;
  accessType: EpisodeAccessType;
  priceCoins?: number;
  publishedAt?: string; // ISOString
  teaserText?: string;
  stats: {
    viewsCount: number;
    likesCount: number;
    commentsCount: number;
    totalWords: number;
    estimatedReadingTimeMinutes: number;
  };
}


/**
 * @interface PopulatedNovelForDetailPage
 * @description Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
 */
export interface PopulatedNovelForDetailPage {
  _id: string;
  title: string;
  slug: string;
  author: PopulatedAuthorForDetailPage;
  synopsis: string;
  longDescription?: string;
  coverImageUrl?: string;
  bannerImageUrl?: string;
  themeAssignment: PopulatedThemeAssignment;
  narrativeFocus?: INarrativeFocus; // ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏° schema ‡∏Ç‡∏≠‡∏á INovel, ObjectId ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å stringify
  worldBuildingDetails?: IWorldBuildingDetails; // ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏° schema ‡∏Ç‡∏≠‡∏á INovel
  ageRatingCategoryId?: PopulatedCategoryInfo;
  status: INovel["status"];
  accessLevel: INovel["accessLevel"];
  isCompleted: boolean;
  endingType: INovel["endingType"];
  sourceType: ISourceType; // ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏° schema ‡∏Ç‡∏≠‡∏á INovel
  language: PopulatedCategoryInfo; // ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤ language category ‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏™‡∏°‡∏≠
  firstEpisodeId?: string;
  totalEpisodesCount: number;
  publishedEpisodesCount: number;
  stats: INovelStats; // ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏° schema ‡∏Ç‡∏≠‡∏á INovel
  monetizationSettings: IMonetizationSettings; // ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏° schema ‡∏Ç‡∏≠‡∏á INovel
  psychologicalAnalysisConfig: IPsychologicalAnalysisConfig; // ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏° schema ‡∏Ç‡∏≠‡∏á INovel
  collaborationSettings?: ICollaborationSettings; // ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏° schema ‡∏Ç‡∏≠‡∏á INovel
  isFeatured?: boolean;
  publishedAt?: string; // ISOString
  scheduledPublicationDate?: string; // ISOString
  lastContentUpdatedAt: string; // ISOString
  relatedNovels?: string[]; // Array of ObjectIds as strings
  seriesId?: string;
  seriesOrder?: number;
  createdAt: string; // ISOString
  updatedAt: string; // ISOString

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏´‡∏•‡∏±‡∏Å (‡πÅ‡∏™‡∏î‡∏á 6 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å)
  characters?: PopulatedCharacterForDetailPage[];

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÅ‡∏™‡∏î‡∏á 10 ‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å)
  episodes?: PopulatedEpisodeForDetailPage[];
}

// ===================================================================
// SECTION: API Route Handler
// ===================================================================

/**
 * GET Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug
 * @param request NextRequest object - ‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏≥‡∏Ç‡∏≠ HTTP ‡∏Ç‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤
 * @param context Context object containing route parameters - ‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå context ‡∏ó‡∏µ‡πà‡∏°‡∏µ params ‡∏ã‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ slug
 * @returns NextResponse ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠ error
 */
export async function GET(
  request: NextRequest,
  context: { params: { slug: string } } // <--- FIX: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç type ‡∏Ç‡∏≠‡∏á argument ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
) {
  try {
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await dbConnect();

    const slug = context.params.slug; // <--- FIX: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á slug ‡∏à‡∏≤‡∏Å context.params

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö slug
    if (!slug || typeof slug !== 'string') {
      console.warn(`‚ö†Ô∏è [API /novels/[slug]] Invalid slug: "${slug}"`);
      return NextResponse.json(
        {
          error: "Invalid slug parameter",
          message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ slug ‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        },
        { status: 400 }
      );
    }

    console.log(`üìÑ [API /novels/[slug]] Fetching novel data for slug: "${slug.trim().toLowerCase()}"`);

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° slug ‡∏û‡∏£‡πâ‡∏≠‡∏° populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    // ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Mongoose generic type arguments ‡∏Å‡∏±‡∏ö populate ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ type safety ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    const novelFromDb = await NovelModel.findOne({
      slug: slug.trim().toLowerCase(),
      isDeleted: { $ne: true } // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á field isDeleted ‡∏à‡∏≤‡∏Å Novel.ts)
    })
    .populate<{ author: Pick<IUser, '_id' | 'username' | 'profile' | 'writerStats'> }>({ // ‡∏£‡∏∞‡∏ö‡∏∏ type ‡∏Ç‡∏≠‡∏á author ‡∏ó‡∏µ‡πà populate ‡∏°‡∏≤
      path: 'author',
      select: 'username profile.displayName profile.penName profile.avatarUrl profile.bio writerStats.totalNovelsPublished writerStats.totalViewsAcrossAllNovels writerStats.totalLikesReceivedOnNovels', // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å field ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å profile ‡πÅ‡∏•‡∏∞ writerStats
      model: UserModel
    })
    .populate<{ 'themeAssignment.mainTheme.categoryId': Pick<ICategory, '_id' | 'name' | 'slug' | 'color'> }>({
      path: 'themeAssignment.mainTheme.categoryId',
      select: '_id name slug color',
      model: CategoryModel
    })
    .populate<{ 'themeAssignment.subThemes.categoryId': Pick<ICategory, '_id' | 'name' | 'slug' | 'color'>[] }>({ // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö array ‡∏Ç‡∏≠‡∏á sub-objects
      path: 'themeAssignment.subThemes.categoryId',
      select: '_id name slug color',
      model: CategoryModel
    })
    .populate<{ 'themeAssignment.moodAndTone': Pick<ICategory, '_id' | 'name' | 'slug' | 'color'>[] }>({
      path: 'themeAssignment.moodAndTone',
      select: '_id name slug color',
      model: CategoryModel
    })
    .populate<{ 'themeAssignment.contentWarnings': Pick<ICategory, '_id' | 'name' | 'slug' | 'color'>[] }>({
      path: 'themeAssignment.contentWarnings',
      select: '_id name slug color',
      model: CategoryModel
    })
    .populate<{ ageRatingCategoryId: Pick<ICategory, '_id' | 'name' | 'slug' | 'color'> }>({
      path: 'ageRatingCategoryId',
      select: '_id name slug color',
      model: CategoryModel
    })
    .populate<{ language: Pick<ICategory, '_id' | 'name' | 'slug'> }>({
      path: 'language',
      select: '_id name slug', // ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ color
      model: CategoryModel
    })
    .lean({ virtuals: true }); // ‡πÉ‡∏ä‡πâ lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞ virtuals: true ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ virtual fields ‡∏à‡∏≤‡∏Å NovelModel (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!novelFromDb) {
      console.warn(`‚ö†Ô∏è [API /novels/[slug]] Novel not found for slug: "${slug}"`);
      return NextResponse.json(
        {
          error: "Novel not found",
          message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ slug "${slug}"`
        },
        { status: 404 }
      );
    }
    
    // --- Helper function to safely convert populated category to PopulatedCategoryInfo ---
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á category ‡∏ó‡∏µ‡πà populate ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô PopulatedCategoryInfo ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const toPopulatedCategoryInfo = (cat: any): PopulatedCategoryInfo | undefined => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ cat ‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ properties ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (_id, name, slug)
        if (!cat || typeof cat !== 'object' || !('_id' in cat) || !('name' in cat) || !('slug' in cat)) return undefined;
        return {
            _id: cat._id.toString(),
            name: cat.name,
            slug: cat.slug,
            color: cat.color, // color ‡πÄ‡∏õ‡πá‡∏ô optional
        };
    };
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á array ‡∏Ç‡∏≠‡∏á categories
    const toPopulatedCategoryInfoArray = (cats: any[]): PopulatedCategoryInfo[] => {
        if (!Array.isArray(cats)) return [];
        // map ‡πÅ‡∏•‡∏∞ filter(Boolean) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ undefined ‡∏≠‡∏≠‡∏Å ‡∏´‡∏≤‡∏Å‡∏ö‡∏≤‡∏á category populate ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        return cats.map(toPopulatedCategoryInfo).filter(Boolean) as PopulatedCategoryInfo[];
    };


    // --- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ (‡πÅ‡∏™‡∏î‡∏á 6 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å) ---
    // CharacterModel ‡∏°‡∏µ virtual "profileImageUrl" ‡∏ã‡∏∂‡πà‡∏á .lean({ virtuals: true }) ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ
    // ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏á‡∏ï‡∏≤‡∏° logic ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤ virtuals ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å populate ‡πÇ‡∏î‡∏¢ lean ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const charactersFromDb = await CharacterModel.find({
      novelId: novelFromDb._id, // novelFromDb._id ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏à‡∏≤‡∏Å .lean()
      isArchived: false // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á field isArchived ‡∏à‡∏≤‡∏Å Character.ts
    })
    .select('name description roleInStory colorTheme profileImageMediaId profileImageSourceType') // profileImageUrl ‡πÄ‡∏õ‡πá‡∏ô virtual
    .sort({ createdAt: 1 }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
    .limit(6)
    .lean({ virtuals: true }); // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ virtuals: true ‡∏Å‡∏±‡∏ö lean ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Character

    const characters: PopulatedCharacterForDetailPage[] = charactersFromDb.map(char => {
        // ‡∏´‡∏≤‡∏Å CharacterModel.profileImageUrl (virtual) ‡∏ñ‡∏π‡∏Å populate ‡πÇ‡∏î‡∏¢ lean({ virtuals: true })
        // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ char.profileImageUrl ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà, ‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á URL
        let imageUrl = (char as any).profileImageUrl; // ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á virtual field ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å populate
        if (!imageUrl) { // Fallback logic ‡∏ñ‡πâ‡∏≤ virtual field ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
            if (char.profileImageMediaId && char.profileImageSourceType) {
                imageUrl = `/api/media_placeholder/${char.profileImageSourceType}/${char.profileImageMediaId.toString()}`;
            } else {
                imageUrl = `/images/default-avatar.png`; // Default avatar
            }
        }

        return {
            _id: char._id.toString(),
            name: char.name,
            profileImageUrl: imageUrl,
            description: char.description,
            roleInStory: char.roleInStory as CharacterRoleInStory,
            colorTheme: char.colorTheme
        };
    });


    // --- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ (‡πÅ‡∏™‡∏î‡∏á 10 ‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å) ---
    const episodesFromDb = await EpisodeModel.find({
      novelId: novelFromDb._id,
      status: { $in: [EpisodeStatus.PUBLISHED, EpisodeStatus.SCHEDULED] } // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    })
    .select('title episodeOrder status accessType priceCoins publishedAt teaserText stats')
    .sort({ episodeOrder: 1 }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≠‡∏ô
    .limit(10)
    .lean(); // EpisodeModel ‡πÑ‡∏°‡πà‡∏°‡∏µ virtual ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÉ‡∏ô select list ‡∏ô‡∏µ‡πâ

    const episodes: PopulatedEpisodeForDetailPage[] = episodesFromDb.map(ep => ({
      _id: ep._id.toString(),
      title: ep.title,
      episodeOrder: ep.episodeOrder,
      status: ep.status as EpisodeStatus,
      accessType: ep.accessType as EpisodeAccessType,
      priceCoins: ep.priceCoins,
      publishedAt: ep.publishedAt?.toISOString(),
      teaserText: ep.teaserText,
      stats: { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ ep.stats ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null/undefined ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á property ‡∏¢‡πà‡∏≠‡∏¢
        viewsCount: ep.stats?.viewsCount || 0,
        likesCount: ep.stats?.likesCount || 0,
        commentsCount: ep.stats?.commentsCount || 0,
        totalWords: ep.stats?.totalWords || 0,
        estimatedReadingTimeMinutes: ep.stats?.estimatedReadingTimeMinutes || 0
      }
    }));

    // --- Explicitly map novel data to PopulatedNovelForDetailPage ---
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á responseData ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ author ‡∏ñ‡∏π‡∏Å populate ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ObjectId
    // Type `Pick<IUser, ...>` ‡∏à‡∏≤‡∏Å populate ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á field ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const populatedAuthor = novelFromDb.author as Pick<IUser, '_id' | 'username' | 'profile' | 'writerStats'>;

    if (!populatedAuthor || typeof populatedAuthor !== 'object' || !populatedAuthor._id || !populatedAuthor.profile) {
        console.error(`‚ùå [API /novels/[slug]] Author object is not correctly populated for novel: "${novelFromDb.title}"`);
        return NextResponse.json(
            { error: "Internal server error", message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" },
            { status: 500 }
        );
    }
    
    // ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á category ‡∏ó‡∏µ‡πà populate ‡∏°‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö themeAssignment
    const mainThemeCategoryPopulated = novelFromDb.themeAssignment?.mainTheme?.categoryId;
    const mainThemeCategoryInfo = toPopulatedCategoryInfo(mainThemeCategoryPopulated);
    if (!mainThemeCategoryInfo) { // Main theme category is required
        console.error(`‚ùå [API /novels/[slug]] Main theme category is not correctly populated or missing for novel: "${novelFromDb.title}"`);
        return NextResponse.json(
            { error: "Internal server error", message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" },
            { status: 500 }
        );
    }

    const languageCategoryPopulated = novelFromDb.language;
    const languageCategoryInfo = toPopulatedCategoryInfo(languageCategoryPopulated);
    if (!languageCategoryInfo) { // Language category is required
        console.error(`‚ùå [API /novels/[slug]] Language category is not correctly populated or missing for novel: "${novelFromDb.title}"`);
        return NextResponse.json(
            { error: "Internal server error", message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢" },
            { status: 500 }
        );
    }


    const responseData: PopulatedNovelForDetailPage = {
      _id: novelFromDb._id.toString(),
      title: novelFromDb.title,
      slug: novelFromDb.slug,
      author: {
        _id: populatedAuthor._id.toString(),
        username: populatedAuthor.username,
        profile: { // populatedAuthor.profile ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏°‡∏µ fields ‡∏ó‡∏µ‡πà select ‡πÑ‡∏ß‡πâ
          displayName: populatedAuthor.profile.displayName,
          penName: populatedAuthor.profile.penName,
          avatarUrl: populatedAuthor.profile.avatarUrl,
          bio: populatedAuthor.profile.bio,
        },
        writerStats: populatedAuthor.writerStats ? { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ writerStats ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô optional)
          totalNovelsPublished: populatedAuthor.writerStats.totalNovelsPublished,
          totalViewsAcrossAllNovels: populatedAuthor.writerStats.totalViewsAcrossAllNovels,
          totalLikesReceivedOnNovels: populatedAuthor.writerStats.totalLikesReceivedOnNovels,
        } : undefined,
      },
      synopsis: novelFromDb.synopsis,
      longDescription: novelFromDb.longDescription,
      coverImageUrl: novelFromDb.coverImageUrl,
      bannerImageUrl: novelFromDb.bannerImageUrl,
      themeAssignment: {
        mainTheme: {
          categoryId: mainThemeCategoryInfo, // ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
          customName: novelFromDb.themeAssignment?.mainTheme?.customName,
        },
        subThemes: novelFromDb.themeAssignment?.subThemes?.map(st => ({
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö st.categoryId ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å toPopulatedCategoryInfo
          categoryId: toPopulatedCategoryInfo(st.categoryId)!, // ‡πÉ‡∏ä‡πâ ! ‡∏ñ‡πâ‡∏≤‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ subtheme category ‡∏ó‡∏µ‡πà populate ‡∏°‡∏≤‡∏à‡∏∞ valid ‡πÄ‡∏™‡∏°‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ undefined
          customName: st.customName,
        })).filter(st => st.categoryId) || [], // ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà categoryId ‡πÄ‡∏õ‡πá‡∏ô undefined ‡∏≠‡∏≠‡∏Å
        moodAndTone: toPopulatedCategoryInfoArray(novelFromDb.themeAssignment?.moodAndTone || []),
        contentWarnings: toPopulatedCategoryInfoArray(novelFromDb.themeAssignment?.contentWarnings || []),
        customTags: novelFromDb.themeAssignment?.customTags || [],
      },
      narrativeFocus: novelFromDb.narrativeFocus as INarrativeFocus, // Cast ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å schema
      worldBuildingDetails: novelFromDb.worldBuildingDetails as IWorldBuildingDetails,
      ageRatingCategoryId: toPopulatedCategoryInfo(novelFromDb.ageRatingCategoryId), // ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô undefined ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
      status: novelFromDb.status as INovel["status"],
      accessLevel: novelFromDb.accessLevel as INovel["accessLevel"],
      isCompleted: novelFromDb.isCompleted,
      endingType: novelFromDb.endingType as INovel["endingType"],
      sourceType: novelFromDb.sourceType as ISourceType,
      language: languageCategoryInfo, // ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      firstEpisodeId: novelFromDb.firstEpisodeId?.toString(),
      totalEpisodesCount: novelFromDb.totalEpisodesCount,
      publishedEpisodesCount: novelFromDb.publishedEpisodesCount,
      stats: novelFromDb.stats as INovelStats,
      monetizationSettings: novelFromDb.monetizationSettings as IMonetizationSettings,
      psychologicalAnalysisConfig: novelFromDb.psychologicalAnalysisConfig as IPsychologicalAnalysisConfig,
      collaborationSettings: novelFromDb.collaborationSettings,
      isFeatured: novelFromDb.isFeatured,
      publishedAt: novelFromDb.publishedAt?.toISOString(),
      scheduledPublicationDate: novelFromDb.scheduledPublicationDate?.toISOString(),
      lastContentUpdatedAt: novelFromDb.lastContentUpdatedAt.toISOString(), // lastContentUpdatedAt ‡πÄ‡∏õ‡πá‡∏ô required ‡πÉ‡∏ô schema
      relatedNovels: novelFromDb.relatedNovels?.map(id => id.toString()), // relatedNovels ‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á ObjectId
      seriesId: novelFromDb.seriesId?.toString(),
      seriesOrder: novelFromDb.seriesOrder,
      createdAt: novelFromDb.createdAt.toISOString(), // createdAt ‡πÄ‡∏õ‡πá‡∏ô Mongoose timestamp
      updatedAt: novelFromDb.updatedAt.toISOString(), // updatedAt ‡πÄ‡∏õ‡πá‡∏ô Mongoose timestamp
      characters: characters,
      episodes: episodes,
    };

    console.log(`‚úÖ [API /novels/[slug]] Successfully fetched novel: "${novelFromDb.title}" (${characters.length} characters, ${episodes.length} episodes)`);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
    return NextResponse.json({
      success: true,
      novel: responseData
    }, {
      headers: {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cache-Control header ‡πÄ‡∏û‡∏∑‡πà‡∏≠ caching strategy
        // public: ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ caches (‡πÄ‡∏ä‡πà‡∏ô CDN, browser) ‡πÄ‡∏Å‡πá‡∏ö response
        // s-maxage=60: CDN cache response ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        // stale-while-revalidate=300: ‡∏´‡∏≤‡∏Å cache ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡πÄ‡∏Å‡∏¥‡∏ô 60 ‡∏ß‡∏¥) ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 300 ‡∏ß‡∏¥,
        // CDN ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á stale response ‡πÉ‡∏´‡πâ client ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß revalidate ‡πÉ‡∏ô background
        'Cache-Control': 'public, s-maxage=60, stale-while-revalidate=300',
      }
    });

  } catch (error: any) {
    console.error(`‚ùå [API /novels/[slug]] Error fetching novel for slug "${context?.params?.slug}":`, error);

    return NextResponse.json(
      {
        error: "Internal server error",
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        details: process.env.NODE_ENV === 'development' ? error.message : undefined // ‡πÅ‡∏™‡∏î‡∏á details ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô development mode
      },
      { status: 500 }
    );
  }
}