// src/app/api/novels/[slug]/route.ts
import { NextResponse } from 'next/server';
import mongoose, { Types } from 'mongoose';
import dbConnect from '@/backend/lib/mongodb'; // ‡∏õ‡∏£‡∏±‡∏ö path ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
import NovelModel, { INovel, NovelStatus, IThemeAssignment, INarrativeFocus, ISourceType, INovelStats } from '@/backend/models/Novel'; //
import UserModel, { IUser, IUserProfile } from '@/backend/models/User'; //
import CategoryModel, { ICategory, CategoryType, ICategoryLocalization } from '@/backend/models/Category'; //
import EpisodeModel, { IEpisode, EpisodeStatus } from '@/backend/models/Episode'; //
import CharacterModel, { ICharacter, ICharacterExpression, CharacterRoleInStory } from '@/backend/models/Character'; //

// ==================================================================================================
// SECTION: Populated Interfaces (Type Definitions for API Response)
// ==================================================================================================

/**
 * @interface PopulatedAuthorForDetailPage
 * @description ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
 */
export interface PopulatedAuthorForDetailPage extends Pick<IUser, '_id' | 'username'> {
  profile?: Pick<IUserProfile, 'displayName' | 'penName' | 'avatarUrl'>;
}

/**
 * @interface PopulatedCategoryForDetailPage
 * @description ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
 */
export interface PopulatedCategoryForDetailPage extends Pick<ICategory, '_id' | 'name' | 'slug' | 'iconUrl' | 'color' | 'description' | 'categoryType'> {
  localizations?: ICategoryLocalization[];
}

/**
 * @interface PopulatedEpisodeForDetailPage
 * @description ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö firstEpisodeId)
 */
export interface PopulatedEpisodeForDetailPage extends Pick<IEpisode, '_id' | 'title' | 'episodeOrder' | 'status' | 'accessType' | 'publishedAt'> {}

/**
 * @interface PopulatedCharacterForDetailPage
 * @description ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢
 */
export interface PopulatedCharacterForDetailPage extends Pick<ICharacter, '_id' | 'name' | 'characterCode' | 'roleInStory' | 'profileImageUrl' | 'description'> {
  // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà NovelCharactersSection ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  // expressions?: Pick<ICharacterExpression, 'expressionId' | 'name' | 'mediaId'>[]; // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
}

/**
 * @interface PopulatedThemeAssignmentForDetailPage
 * @description ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ThemeAssignment ‡∏ó‡∏µ‡πà‡∏°‡∏µ Category ‡∏ñ‡∏π‡∏Å populate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API response
 */
export interface PopulatedThemeAssignmentForDetailPage {
  mainTheme?: {
    categoryId: PopulatedCategoryForDetailPage | null; // Populated category object or null
    customName?: string;
  };
  subThemes?: Array<{
    categoryId: PopulatedCategoryForDetailPage | null;
    customName?: string;
  }>;
  moodAndTone?: PopulatedCategoryForDetailPage[];
  contentWarnings?: PopulatedCategoryForDetailPage[];
  customTags?: string[];
}

/**
 * @interface PopulatedNarrativeFocusForDetailPage
 * @description ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á NarrativeFocus ‡∏ó‡∏µ‡πà‡∏°‡∏µ Category ‡∏ñ‡∏π‡∏Å populate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API response
 */
export interface PopulatedNarrativeFocusForDetailPage {
  narrativePacingTags?: PopulatedCategoryForDetailPage[];
  primaryConflictTypes?: PopulatedCategoryForDetailPage[];
  narrativePerspective?: PopulatedCategoryForDetailPage | null;
  storyArcStructure?: PopulatedCategoryForDetailPage | null;
  artStyle?: PopulatedCategoryForDetailPage | null;
  gameplayMechanics?: PopulatedCategoryForDetailPage[];
  interactivityLevel?: PopulatedCategoryForDetailPage | null;
  playerAgencyLevel?: PopulatedCategoryForDetailPage | null;
  lengthTag?: PopulatedCategoryForDetailPage | null;
  commonTropes?: PopulatedCategoryForDetailPage[];
  targetAudienceProfileTags?: PopulatedCategoryForDetailPage[];
  avoidIfYouDislikeTags?: PopulatedCategoryForDetailPage[];
}

/**
 * @interface PopulatedSourceTypeForDetailPage
 * @description ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á SourceType ‡∏ó‡∏µ‡πà‡∏°‡∏µ Category ‡∏ñ‡∏π‡∏Å populate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API response
 */
export interface PopulatedSourceTypeForDetailPage extends Pick<ISourceType, 'type' | 'originalWorkTitle' | 'originalWorkAuthor' | 'permissionDetails'> {
  fandomCategoryId?: PopulatedCategoryForDetailPage | null;
  originalWorkLanguage?: PopulatedCategoryForDetailPage | null;
}

/**
 * @interface PopulatedNovelForDetailPage
 * @description ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà API ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
 * ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞ field ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å populate ‡πÄ‡∏ä‡πà‡∏ô author, categories, characters
 */
export interface PopulatedNovelForDetailPage extends Omit<INovel,
  // Fields ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ version ‡∏ó‡∏µ‡πà populate ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô response ‡∏ô‡∏µ‡πâ
  'author' | 'coAuthors' | 'themeAssignment' | 'narrativeFocus' |
  'ageRatingCategoryId' | 'sourceType' | 'language' | 'firstEpisodeId' |
  'relatedNovels' | 'seriesId' | 'deletedByUserId' | 'adminNotes'
> {
  // Fields ‡∏ó‡∏µ‡πà populate ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
  author: PopulatedAuthorForDetailPage | null;
  coAuthors?: PopulatedAuthorForDetailPage[];
  themeAssignment: PopulatedThemeAssignmentForDetailPage;
  narrativeFocus?: PopulatedNarrativeFocusForDetailPage;
  ageRatingCategoryId?: PopulatedCategoryForDetailPage | null;
  sourceType: PopulatedSourceTypeForDetailPage;
  language: PopulatedCategoryForDetailPage | null; // language field ‡∏à‡∏≤‡∏Å INovel ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å populate ‡πÄ‡∏õ‡πá‡∏ô object ‡∏ô‡∏µ‡πâ
  firstEpisodeId?: PopulatedEpisodeForDetailPage | Pick<IEpisode, '_id'> | null; // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô object ‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà ID

  // Fields ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏Ç‡∏≠‡∏á Frontend (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö generateMetadata)
  firstPublishedAt?: string | null; // ‡∏°‡∏≤‡∏à‡∏≤‡∏Å novel.publishedAt
  mainThemeCategory?: PopulatedCategoryForDetailPage | null; // Convenience access
  subThemeCategories?: PopulatedCategoryForDetailPage[]; // Convenience access
  moodAndToneCategories?: PopulatedCategoryForDetailPage[]; // Convenience access
  languageCategory?: PopulatedCategoryForDetailPage | null; // Convenience access (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô language ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô)

  // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
  charactersList?: PopulatedCharacterForDetailPage[];
}

// ==================================================================================================
// SECTION: Helper Strings for Population
// ==================================================================================================
const populateAuthorFields = '_id username profile.displayName profile.penName profile.avatarUrl'; //
const populateCategoryFields = '_id name slug iconUrl color description categoryType localizations'; //
const populateEpisodeFields = '_id title episodeOrder status accessType publishedAt'; //
const populateCharacterFields = '_id name characterCode roleInStory profileImageUrl description'; //

// ==================================================================================================
// SECTION: API GET Handler
// ==================================================================================================
export async function GET(
  request: Request, // Request object (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô logic ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏ï‡∏≤‡∏° convention)
  { params }: { params: { slug: string } } // params ‡∏ó‡∏µ‡πà Next.js ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏à‡∏≤‡∏Å dynamic route
) {
  const { slug } = params;

  if (!slug || typeof slug !== 'string') {
    console.warn('‚ö†Ô∏è [API /novels/[slug]] Invalid slug provided.');
    return NextResponse.json({ message: 'Slug ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }, { status: 400 });
  }

  try {
    await dbConnect(); // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log(`üìÑ [API /novels/${slug}] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ slug: ${slug}`);

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ slug, ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô published ‡∏´‡∏£‡∏∑‡∏≠ completed
    const novelDoc = await NovelModel.findOne({
      slug: slug,
      isDeleted: { $ne: true }, //
      status: { $in: [NovelStatus.PUBLISHED, NovelStatus.COMPLETED] } //
    })
    // Population chain
    .populate<{ author: PopulatedAuthorForDetailPage }>({
      path: 'author',
      select: populateAuthorFields,
      // match: { isActive: true } // (Optional) ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà active ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    })
    .populate<{ coAuthors: PopulatedAuthorForDetailPage[] }>({
      path: 'coAuthors',
      select: populateAuthorFields,
    })
    .populate<{ ageRatingCategoryId: PopulatedCategoryForDetailPage }>({
      path: 'ageRatingCategoryId',
      select: populateCategoryFields,
    })
    .populate<{ language: PopulatedCategoryForDetailPage }>({ // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ field 'language' ‡πÉ‡∏ô NovelModel
      path: 'language',
      select: populateCategoryFields, // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ 'slug' ‡∏ñ‡∏π‡∏Å‡∏£‡∏ß‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logic 'th' ‡πÉ‡∏ô metadata
    })
    // Populate firstEpisodeId (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
    .populate<{ firstEpisodeId: PopulatedEpisodeForDetailPage }>({
      path: 'firstEpisodeId',
      select: populateEpisodeFields,
      match: { status: EpisodeStatus.PUBLISHED } // (Optional) ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß
    })
    // Populate fields within themeAssignment
    .populate({ path: 'themeAssignment.mainTheme.categoryId', select: populateCategoryFields })
    .populate({ path: 'themeAssignment.subThemes.categoryId', select: populateCategoryFields })
    .populate({ path: 'themeAssignment.moodAndTone', select: populateCategoryFields })
    .populate({ path: 'themeAssignment.contentWarnings', select: populateCategoryFields })
    // Populate fields within sourceType
    .populate({ path: 'sourceType.fandomCategoryId', select: populateCategoryFields })
    .populate({ path: 'sourceType.originalWorkLanguage', select: populateCategoryFields })
    // Populate fields within narrativeFocus
    .populate({ path: 'narrativeFocus.narrativePacingTags', select: populateCategoryFields })
    .populate({ path: 'narrativeFocus.primaryConflictTypes', select: populateCategoryFields })
    .populate({ path: 'narrativeFocus.narrativePerspective', select: populateCategoryFields })
    .populate({ path: 'narrativeFocus.storyArcStructure', select: populateCategoryFields })
    .populate({ path: 'narrativeFocus.artStyle', select: populateCategoryFields })
    .populate({ path: 'narrativeFocus.gameplayMechanics', select: populateCategoryFields })
    .populate({ path: 'narrativeFocus.interactivityLevel', select: populateCategoryFields })
    .populate({ path: 'narrativeFocus.playerAgencyLevel', select: populateCategoryFields })
    .populate({ path: 'narrativeFocus.lengthTag', select: populateCategoryFields })
    .populate({ path: 'narrativeFocus.commonTropes', select: populateCategoryFields })
    .populate({ path: 'narrativeFocus.targetAudienceProfileTags', select: populateCategoryFields })
    .populate({ path: 'narrativeFocus.avoidIfYouDislikeTags', select: populateCategoryFields });
    // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ .exec() ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ findOne ‡∏Ñ‡∏∑‡∏ô Promise ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ .lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ virtuals ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

    if (!novelDoc) {
      console.warn(`‚ö†Ô∏è [API /novels/${slug}] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slug: ${slug}`);
      return NextResponse.json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤' }, { status: 404 });
    }

    console.log(`‚úÖ [API /novels/${slug}] ‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢: "${novelDoc.title}"`);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏ô‡∏µ‡πâ (‡πÅ‡∏¢‡∏Å query)
    // Frontend ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ charactersList ‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    let charactersListFromDB: ICharacter[] = [];
    // if (CharacterModel) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ model ‡∏ñ‡∏π‡∏Å import ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    //   charactersListFromDB = await CharacterModel.find({ novelId: novelDoc._id, isArchived: false })
    //     .select(populateCharacterFields)
    //     .limit(15); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠ performance
    // }

    // ‡πÅ‡∏õ‡∏•‡∏á Mongoose document ‡πÄ‡∏õ‡πá‡∏ô plain object ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö response
    // ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ toObject() ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ virtual fields (‡πÄ‡∏ä‡πà‡∏ô currentEpisodePriceCoins) ‡∏ñ‡∏π‡∏Å‡∏£‡∏ß‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
    const novelData: PopulatedNovelForDetailPage = {
      ...(novelDoc.toObject() as Omit<INovel, 'author' | 'coAuthors' | 'themeAssignment' | 'narrativeFocus' | 'ageRatingCategoryId' | 'sourceType' | 'language' | 'firstEpisodeId'>), // ‡πÉ‡∏ä‡πâ Omit ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á type
      _id: novelDoc._id, // Ensure _id is preserved

      // Populate Mongoose Document fields correctly to avoid runtime errors
      author: novelDoc.author ? (novelDoc.author as unknown as PopulatedAuthorForDetailPage) : null,
      coAuthors: novelDoc.coAuthors ? (novelDoc.coAuthors as unknown as PopulatedAuthorForDetailPage[]) : undefined,

      themeAssignment: {
        mainTheme: novelDoc.themeAssignment?.mainTheme?.categoryId
          ? {
              categoryId: novelDoc.themeAssignment.mainTheme.categoryId as unknown as PopulatedCategoryForDetailPage,
              customName: novelDoc.themeAssignment.mainTheme.customName,
            }
          : undefined,
        subThemes: novelDoc.themeAssignment?.subThemes?.map(st => ({
          categoryId: st.categoryId as unknown as PopulatedCategoryForDetailPage,
          customName: st.customName,
        })).filter(st => st.categoryId) ?? [], // Filter out entries where categoryId might be null after population attempt
        moodAndTone: (novelDoc.themeAssignment?.moodAndTone as PopulatedCategoryForDetailPage[] | undefined)?.filter(Boolean) ?? [],
        contentWarnings: (novelDoc.themeAssignment?.contentWarnings as PopulatedCategoryForDetailPage[] | undefined)?.filter(Boolean) ?? [],
        customTags: novelDoc.themeAssignment?.customTags,
      },

      narrativeFocus: novelDoc.narrativeFocus ? {
        narrativePacingTags: (novelDoc.narrativeFocus.narrativePacingTags as PopulatedCategoryForDetailPage[] | undefined)?.filter(Boolean) ?? [],
        primaryConflictTypes: (novelDoc.narrativeFocus.primaryConflictTypes as PopulatedCategoryForDetailPage[] | undefined)?.filter(Boolean) ?? [],
        narrativePerspective: novelDoc.narrativeFocus.narrativePerspective as unknown as PopulatedCategoryForDetailPage | null,
        storyArcStructure: novelDoc.narrativeFocus.storyArcStructure as unknown as PopulatedCategoryForDetailPage | null,
        artStyle: novelDoc.narrativeFocus.artStyle as unknown as PopulatedCategoryForDetailPage | null,
        gameplayMechanics: (novelDoc.narrativeFocus.gameplayMechanics as PopulatedCategoryForDetailPage[] | undefined)?.filter(Boolean) ?? [],
        interactivityLevel: novelDoc.narrativeFocus.interactivityLevel as unknown as PopulatedCategoryForDetailPage | null,
        playerAgencyLevel: novelDoc.narrativeFocus.playerAgencyLevel as unknown as PopulatedCategoryForDetailPage | null,
        lengthTag: novelDoc.narrativeFocus.lengthTag as unknown as PopulatedCategoryForDetailPage | null,
        commonTropes: (novelDoc.narrativeFocus.commonTropes as PopulatedCategoryForDetailPage[] | undefined)?.filter(Boolean) ?? [],
        targetAudienceProfileTags: (novelDoc.narrativeFocus.targetAudienceProfileTags as PopulatedCategoryForDetailPage[] | undefined)?.filter(Boolean) ?? [],
        avoidIfYouDislikeTags: (novelDoc.narrativeFocus.avoidIfYouDislikeTags as PopulatedCategoryForDetailPage[] | undefined)?.filter(Boolean) ?? [],
      } : undefined,

      ageRatingCategoryId: novelDoc.ageRatingCategoryId ? (novelDoc.ageRatingCategoryId as unknown as PopulatedCategoryForDetailPage) : null,

      sourceType: {
        type: novelDoc.sourceType.type,
        originalWorkTitle: novelDoc.sourceType.originalWorkTitle,
        originalWorkAuthor: novelDoc.sourceType.originalWorkAuthor,
        permissionDetails: novelDoc.sourceType.permissionDetails,
        fandomCategoryId: novelDoc.sourceType.fandomCategoryId as unknown as PopulatedCategoryForDetailPage | null,
        originalWorkLanguage: novelDoc.sourceType.originalWorkLanguage as unknown as PopulatedCategoryForDetailPage | null,
      },

      language: novelDoc.language ? (novelDoc.language as unknown as PopulatedCategoryForDetailPage) : null,
      firstEpisodeId: novelDoc.firstEpisodeId ? (novelDoc.firstEpisodeId as unknown as PopulatedEpisodeForDetailPage) : null,

      // Fields ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö metadata ‡πÉ‡∏ô page.tsx
      firstPublishedAt: novelDoc.publishedAt ? new Date(novelDoc.publishedAt).toISOString() : null, //
      mainThemeCategory: novelDoc.themeAssignment?.mainTheme?.categoryId as unknown as PopulatedCategoryForDetailPage || null,
      subThemeCategories: novelDoc.themeAssignment?.subThemes?.map(st => st.categoryId as unknown as PopulatedCategoryForDetailPage).filter(Boolean) || [],
      moodAndToneCategories: novelDoc.themeAssignment?.moodAndTone as unknown as PopulatedCategoryForDetailPage[] || [],
      languageCategory: novelDoc.language as PopulatedCategoryForDetailPage || null, // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page.tsx metadata

      charactersList: charactersListFromDB.map(char => char.toObject() as PopulatedCharacterForDetailPage),
    };
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ field ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö frontend ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà undefined ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô author ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà object ŸÅÿßÿ∂Ÿä
    if (!novelData.author?._id) novelData.author = null;
    if (novelData.themeAssignment.mainTheme && !novelData.themeAssignment.mainTheme.categoryId?._id) {
        novelData.themeAssignment.mainTheme.categoryId = null;
    }
    // ... (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fields ‡∏ó‡∏µ‡πà populate ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) ...


    console.log(`üì¨ [API /novels/${slug}] ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢: "${novelData.title}"`);
    return NextResponse.json({ novel: novelData });

  } catch (error: any) {
    console.error(`‚ùå [API /novels/${slug}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Server:`, error.message, error.stack);
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Mongoose CastError ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏ä‡πà‡∏ô ObjectId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
    if (error instanceof mongoose.Error.CastError) {
      return NextResponse.json({ message: 'Slug ‡∏´‡∏£‡∏∑‡∏≠ ID ‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }, { status: 400 });
    }
    return NextResponse.json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', error: error.message }, { status: 500 });
  }
}