// src/app/api/verify-recaptcha/route.ts
// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô reCAPTCHA v2 Invisible
// ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google reCAPTCHA API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Client

import { NextResponse } from "next/server";

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Body ‡∏Ç‡∏≠‡∏á Request ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Client
interface VerifyRecaptchaRequestBody {
  token: string; // ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å client-side reCAPTCHA
}

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Response ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Google reCAPTCHA API
interface RecaptchaResponseFromGoogle {
  success: boolean; // ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (true = ‡∏ú‡πà‡∏≤‡∏ô)
  challenge_ts?: string; // Timestamp ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ challenge (ISO format YYYY-MM-DD'T'HH:mm:ssZZ)
  hostname?: string; // Hostname ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà reCAPTCHA ‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ
  "error-codes"?: string[]; // ‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  score?: number; // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reCAPTCHA v3)
  action?: string; // action (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reCAPTCHA v3)
}

export async function POST(request: Request): Promise<NextResponse> {
  console.log("üîµ [reCAPTCHA Verify API] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠..."); // Log: ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Content-Type ‡∏Ç‡∏≠‡∏á Request
    const contentType = request.headers.get("content-type");
    if (!contentType || !contentType.includes("application/json")) {
      console.error("‚ùå [reCAPTCHA Verify API] Content-Type ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", contentType); // Log: Content-Type ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      return NextResponse.json(
        { success: false, error: "‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON (Invalid Content-Type)" },
        { status: 415 } // Unsupported Media Type
      );
    }

    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° Parse JSON ‡∏à‡∏≤‡∏Å Body ‡∏Ç‡∏≠‡∏á Request
    let body: VerifyRecaptchaRequestBody;
    try {
      body = await request.json();
    } catch (jsonError: any) {
      console.error("‚ùå [reCAPTCHA Verify API] JSON ‡πÉ‡∏ô body ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", jsonError.message); // Log: JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      return NextResponse.json(
        { success: false, error: `‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${jsonError.message}` },
        { status: 400 } // Bad Request
      );
    }

    // ‡∏î‡∏∂‡∏á Token ‡∏à‡∏≤‡∏Å Body
    const { token } = body;
    if (!token || typeof token !== "string" || token.trim() === "") {
      console.error("‚ùå [reCAPTCHA Verify API] ‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡∏´‡∏£‡∏∑‡∏≠ token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô body ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠"); // Log: Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      return NextResponse.json(
        { success: false, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô reCAPTCHA ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
        { status: 400 } // Bad Request
      );
    }
    // console.log("‚ÑπÔ∏è [reCAPTCHA Verify API] Token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å client:", token.substring(0, 30) + "..."); // ‡πÅ‡∏™‡∏î‡∏á Token ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠ Debug

    // ‡∏î‡∏∂‡∏á Secret Key ‡∏à‡∏≤‡∏Å Environment Variables
    const secretKey = process.env.RECAPTCHA_SECRET_KEY;
    if (!secretKey) {
      console.error("‚ùå [reCAPTCHA Verify API] RECAPTCHA_SECRET_KEY ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô environment variables!"); // Log: Secret Key ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
      return NextResponse.json(
        { success: false, error: "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ reCAPTCHA ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (SK)" },
        { status: 500 } // Internal Server Error
      );
    }

    // URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Verify Token ‡∏Å‡∏±‡∏ö Google
    const verificationUrl = "https://www.google.com/recaptcha/api/siteverify";
    const params = new URLSearchParams({
      secret: secretKey,
      response: token,
      // remoteip: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') // (Optional but recommended) User's IP address
    });

    console.log("üîÑ [reCAPTCHA Verify API] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reCAPTCHA token ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google..."); // Log: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ Google
    const googleResponse = await fetch(verificationUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body: params.toString(),
    });

    // Parse Response ‡∏à‡∏≤‡∏Å Google
    let googleRecaptchaData: RecaptchaResponseFromGoogle;
    let rawGoogleResponseText: string | null = null;

    try {
      const googleContentType = googleResponse.headers.get("content-type");
      if (googleContentType && googleContentType.includes("application/json")) {
        googleRecaptchaData = await googleResponse.json();
      } else {
        rawGoogleResponseText = await googleResponse.text();
        console.error(`‚ùå [reCAPTCHA Verify API] ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Google ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON Content-Type: ${googleContentType}, Body: ${rawGoogleResponseText}`); // Log: Google ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON
        googleRecaptchaData = { success: false, "error-codes": ["google-non-json-response", `status-${googleResponse.status}`] };
      }
    } catch (parseError: any) {
      console.error("‚ùå [reCAPTCHA Verify API] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Google (‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á JSON):", parseError.message); // Log: Parse JSON ‡∏à‡∏≤‡∏Å Google ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
      if (!rawGoogleResponseText) {
        try { rawGoogleResponseText = await googleResponse.text(); }
        catch (textReadError: any) {
            console.error("‚ùå [reCAPTCHA Verify API] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô body ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Google ‡πÄ‡∏õ‡πá‡∏ô text ‡∏´‡∏•‡∏±‡∏á JSON parse error:", textReadError.message); // Log: ‡∏≠‡πà‡∏≤‡∏ô Body ‡∏à‡∏≤‡∏Å Google ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
            rawGoogleResponseText = "[‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô body ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Google ‡πÑ‡∏î‡πâ]";
        }
      }
      return NextResponse.json(
        { success: false, error: `‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Google reCAPTCHA API ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON: ${rawGoogleResponseText}` },
        { status: 502 } // Bad Gateway
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Google
    if (!googleRecaptchaData.success) {
      console.warn(
        `‚ùå [reCAPTCHA Verify API] ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡πÇ‡∏î‡∏¢ Google ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: Success=${googleRecaptchaData.success}, Error Codes=${googleRecaptchaData["error-codes"]?.join(", ") || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}, Hostname: ${googleRecaptchaData.hostname}`
      ); // Log: Google ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß

      let userFriendlyError = "‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡πÇ‡∏î‡∏¢ Google ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß";
      if (googleRecaptchaData["error-codes"]?.includes("timeout-or-duplicate")) {
          userFriendlyError = "‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà";
      } else if (googleRecaptchaData["error-codes"]?.includes("invalid-input-response")) {
          userFriendlyError = "‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô reCAPTCHA ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå";
      } else if (googleRecaptchaData["error-codes"]?.includes("bad-request")) {
           userFriendlyError = "‡∏Ñ‡∏≥‡∏Ç‡∏≠ reCAPTCHA ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
      }

      return NextResponse.json(
        {
          success: false,
          error: userFriendlyError,
          "error-codes": googleRecaptchaData["error-codes"] || [],
        },
        { status: 400 } // Bad Request ‡∏à‡∏≤‡∏Å client ‡∏ñ‡πâ‡∏≤ token ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
      );
    }

    // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    console.log(`‚úÖ [reCAPTCHA Verify API] ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô reCAPTCHA ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÇ‡∏î‡∏¢ Google Hostname: ${googleRecaptchaData.hostname}, Timestamp: ${googleRecaptchaData.challenge_ts}`); // Log: Google ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    return NextResponse.json(
      { success: true, message: "‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" },
      { status: 200 }
    );

  } catch (error: unknown) {
    console.error("‚ùå [reCAPTCHA Verify API] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡πÉ‡∏ô POST handler:", error); // Log: ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î
    let errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏ì‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reCAPTCHA";
    if (error instanceof Error) {
        errorMessage = error.message;
    }
    return NextResponse.json(
      {
        success: false,
        error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reCAPTCHA: " + errorMessage,
      },
      { status: 500 } // Internal Server Error
    );
  }
}