// src/app/api/verify-recaptcha/route.ts
// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô reCAPTCHA v2 Invisible
// ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google reCAPTCHA API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ‡πÄ‡∏û‡∏¥‡πà‡∏° console log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ debug ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°

import { NextResponse } from "next/server";

interface VerifyRecaptchaRequestBody {
  token: string;
}

interface RecaptchaResponseFromGoogle {
  success: boolean;
  challenge_ts?: string;
  hostname?: string;
  "error-codes"?: string[];
  score?: number;
  action?: string;
}

export async function POST(request: Request): Promise<NextResponse> {
  console.log("üîµ [reCAPTCHA Verify API] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reCAPTCHA...");
  try {
    const contentType = request.headers.get("content-type");
    console.log(`‚ÑπÔ∏è [reCAPTCHA Verify API] Content-Type: ${contentType}`);
    if (!contentType || !contentType.includes("application/json")) {
      console.error("‚ùå [reCAPTCHA Verify API] Content-Type ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", contentType);
      return NextResponse.json(
        { success: false, error: "‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON (Invalid Content-Type)" },
        { status: 415 }
      );
    }

    let body: VerifyRecaptchaRequestBody;
    try {
      body = await request.json();
      console.log(`‚ÑπÔ∏è [reCAPTCHA Verify API] Body ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:`, { token: body.token ? `${body.token.substring(0, 15)}...` : '‡πÑ‡∏°‡πà‡∏°‡∏µ token' });
    } catch (jsonError: any) {
      console.error("‚ùå [reCAPTCHA Verify API] JSON parse error:", jsonError.message);
      return NextResponse.json(
        { success: false, error: `‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${jsonError.message}` },
        { status: 400 }
      );
    }

    const { token } = body;
    if (!token || typeof token !== "string" || token.trim() === "") {
      console.error("‚ùå [reCAPTCHA Verify API] token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢");
      return NextResponse.json(
        { success: false, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô reCAPTCHA ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
        { status: 400 }
      );
    }

    const secretKey = process.env.RECAPTCHA_SECRET_KEY;
    console.log(`‚ÑπÔ∏è [reCAPTCHA Verify API] RECAPTCHA_SECRET_KEY: ${secretKey ? '‡∏°‡∏µ' : '‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    if (!secretKey) {
      console.error("‚ùå [reCAPTCHA Verify API] RECAPTCHA_SECRET_KEY ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤");
      return NextResponse.json(
        { success: false, error: "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ reCAPTCHA ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (SK)" },
        { status: 500 }
      );
    }

    const verificationUrl = "https://www.google.com/recaptcha/api/siteverify";
    const params = new URLSearchParams({
      secret: secretKey,
      response: token,
    });
    console.log("üîÑ [reCAPTCHA Verify API] ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google reCAPTCHA API...");

    const googleResponse = await fetch(verificationUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body: params.toString(),
    });

    let googleRecaptchaData: RecaptchaResponseFromGoogle;
    let rawGoogleResponseText: string | null = null;

    try {
      const googleContentType = googleResponse.headers.get("content-type");
      console.log(`‚ÑπÔ∏è [reCAPTCHA Verify API] Google Response Content-Type: ${googleContentType}`);
      if (googleContentType && googleContentType.includes("application/json")) {
        googleRecaptchaData = await googleResponse.json();
        console.log(`‚ÑπÔ∏è [reCAPTCHA Verify API] ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Google:`, googleRecaptchaData);
      } else {
        rawGoogleResponseText = await googleResponse.text();
        console.error(`‚ùå [reCAPTCHA Verify API] ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON: ${rawGoogleResponseText}`);
        googleRecaptchaData = { success: false, "error-codes": ["google-non-json-response", `status-${googleResponse.status}`] };
      }
    } catch (parseError: any) {
      console.error("‚ùå [reCAPTCHA Verify API] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Google:", parseError.message);
      if (!rawGoogleResponseText) {
        try {
          rawGoogleResponseText = await googleResponse.text();
        } catch (textReadError: any) {
          console.error("‚ùå [reCAPTCHA Verify API] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô body:", textReadError.message);
          rawGoogleResponseText = "[‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô body ‡πÑ‡∏î‡πâ]";
        }
      }
      return NextResponse.json(
        { success: false, error: `‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Google ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${rawGoogleResponseText}` },
        { status: 502 }
      );
    }

    if (!googleRecaptchaData.success) {
      console.warn(`‚ùå [reCAPTCHA Verify API] ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:`, {
        success: googleRecaptchaData.success,
        errorCodes: googleRecaptchaData["error-codes"]?.join(", ") || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        hostname: googleRecaptchaData.hostname
      });
      let userFriendlyError = "‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß";
      if (googleRecaptchaData["error-codes"]?.includes("timeout-or-duplicate")) {
        userFriendlyError = "‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà";
      } else if (googleRecaptchaData["error-codes"]?.includes("invalid-input-response")) {
        userFriendlyError = "‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô reCAPTCHA ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
      } else if (googleRecaptchaData["error-codes"]?.includes("bad-request")) {
        userFriendlyError = "‡∏Ñ‡∏≥‡∏Ç‡∏≠ reCAPTCHA ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
      }

      return NextResponse.json(
        {
          success: false,
          error: userFriendlyError,
          "error-codes": googleRecaptchaData["error-codes"] || [],
        },
        { status: 400 }
      );
    }

    console.log(`‚úÖ [reCAPTCHA Verify API] ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, {
      hostname: googleRecaptchaData.hostname,
      timestamp: googleRecaptchaData.challenge_ts
    });
    return NextResponse.json(
      {
        success: true,
        message: "‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        hostname: googleRecaptchaData.hostname,
        timestamp: googleRecaptchaData.challenge_ts
      },
      { status: 200 }
    );

  } catch (error: unknown) {
    console.error("‚ùå [reCAPTCHA Verify API] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î:", error);
    let errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏ì‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reCAPTCHA";
    if (error instanceof Error) {
      errorMessage = error.message;
    }
    return NextResponse.json(
      { success: false, error: `‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reCAPTCHA: ${errorMessage}` },
      { status: 500 }
    );
  }
}