// src/context/AuthContext.tsx
// ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡πá‡∏Å‡∏ã‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á signUp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î reCAPTCHA ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loading
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loading ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ã‡πâ‡∏≥
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ‡∏õ‡∏£‡∏±‡∏ö error messages ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ nextAuthSignIn ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ identifier ‡πÉ‡∏ô nextauth options

import { createContext, useContext, useCallback, ReactNode, useState, useEffect } from "react";
import { useSession, signIn as nextAuthSignIn, signOut as nextAuthSignOut } from "next-auth/react";
import { SessionUser } from "@/app/api/auth/[...nextauth]/options"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
import { useQueryClient } from "@tanstack/react-query";

// ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AuthContext
interface AuthContextType {
  user: SessionUser | null;
  status: "authenticated" | "loading" | "unauthenticated";
  signInWithCredentials: (
    identifier: string,
    password: string
  ) => Promise<{ error?: string; success?: boolean; verificationRequired?: boolean; ok?: boolean }>;
  signInWithSocial: (provider: string) => Promise<void>;
  signUp: (
    email: string,
    username: string,
    password: string,
    recaptchaToken: string // Token ‡∏à‡∏≤‡∏Å client-side reCAPTCHA
  ) => Promise<{ error?: string; success?: boolean; message?: string }>;
  signOut: () => Promise<void>;
  loading: boolean; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loading ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á AuthContext operations
  authError: string | null; // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  setAuthError: (error: string | null) => void; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå error ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider = ({ children }: AuthProviderProps) => {
  const { data: session, status: nextAuthStatus } = useSession();
  const user = session?.user as SessionUser | null;
  const [loading, setLoading] = useState<boolean>(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loading ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CUD operations ‡∏Ç‡∏≠‡∏á AuthContext
  const [authError, setAuthError] = useState<string | null>(null);
  const queryClient = useQueryClient();

  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå authError ‡πÄ‡∏°‡∏∑‡πà‡∏≠ user ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ session status ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà loading
  useEffect(() => {
    if (user || nextAuthStatus !== 'loading') {
      // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå error ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà user ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
      // ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ sign-in/sign-up ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡πá‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå
      // setAuthError(null); // ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà
    }
  }, [user, nextAuthStatus]);

  const signInWithCredentials = useCallback(
    async (
      identifier: string,
      password: string
    ): Promise<{ error?: string; success?: boolean; verificationRequired?: boolean; ok?: boolean }> => {
      if (loading) {
        console.warn("‚ö†Ô∏è [AuthContext] ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î");
        return { error: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà", success: false, ok: false };
      }
      setLoading(true);
      setAuthError(null); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå error ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
      console.log(`üîµ [AuthContext] ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢ identifier: ${identifier}`);

      try {
        // 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API Backend ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô (/api/auth/signin)
        // API ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö credentials, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (verified, active, banned)
        // ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏´‡∏£‡∏∑‡∏≠ error message ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        console.log(`üîÑ [AuthContext] ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á /api/auth/signin (custom backend)`);
        const backendResponse = await fetch("/api/auth/signin", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ identifier, password }),
        });

        const backendData = await backendResponse.json();
        console.log(`‚ÑπÔ∏è [AuthContext] ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å /api/auth/signin:`, backendData);

        if (!backendResponse.ok || backendData.error) {
          let errorMessage = backendData.error || "‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå";
          let verificationRequired = false;

          // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error message ‡∏à‡∏≤‡∏Å backendData
          if (typeof backendData.error === 'string') {
            if (backendData.error.includes("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•")) {
              errorMessage = "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢";
              verificationRequired = true;
            } else if (backendData.error.includes("‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á") || backendData.error.includes("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")) {
              errorMessage = "‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
            } else if (backendData.error.includes("‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")) {
              errorMessage = "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•";
            } else if (backendData.error.includes("‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö")) {
              errorMessage = backendData.error; // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å backend ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            }
          }

          console.warn(`‚ö†Ô∏è [AuthContext] ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (Backend API): ${errorMessage}`);
          setAuthError(errorMessage);
          return { error: errorMessage, success: false, verificationRequired, ok: false };
        }

        // ‡∏ñ‡πâ‡∏≤ backend API ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (backendData.success ‡πÅ‡∏•‡∏∞ backendData.user ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
        // ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å nextAuthSignIn ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á session
        
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á identifier ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö nextAuthSignIn ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á email
        // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç CredentialsProvider ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö identifier ‡πÅ‡∏ó‡∏ô email ‡πÅ‡∏•‡∏∞ username
        console.log(`üîµ [AuthContext] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å nextAuthSignIn ‡∏î‡πâ‡∏ß‡∏¢ identifier: ${identifier} (‡∏´‡∏•‡∏±‡∏á Backend API ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô)`);

        const signInResult = await nextAuthSignIn("credentials", {
          redirect: false, // ‡πÑ‡∏°‡πà redirect ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥, ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á
          identifier: identifier, // ‡∏™‡πà‡∏á identifier ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å user input ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
          password, // NextAuth's authorize ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ password ‡πÄ‡∏û‡∏∑‡πà‡∏≠ re-validate ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠ flow ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        });

        if (signInResult?.error) {
          console.warn(`‚ö†Ô∏è [AuthContext] ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (NextAuth): ${signInResult.error}`);
          // ‡πÅ‡∏õ‡∏• error ‡∏Ç‡∏≠‡∏á NextAuth ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          let nextAuthErrorMessage = "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß";
          if (signInResult.error.includes("CredentialsSignin")) {
            // Error ‡∏ô‡∏µ‡πâ‡∏°‡∏±‡∏Å‡∏à‡∏∞ generic, error ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡∏°‡∏≤‡∏à‡∏≤‡∏Å authorize function
            // ‡∏ñ‡πâ‡∏≤ authorize ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Ñ‡∏∑‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠ error object, ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô CredentialsSignin
            // ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô error message ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏°‡∏≤‡∏à‡∏≤‡∏Å backend API ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
            nextAuthErrorMessage = backendData.error || "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (NextAuth)";
          } else if (signInResult.error.includes("User not found") || signInResult.error.includes("Incorrect password")) {
            nextAuthErrorMessage = "‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (NextAuth)";
          } else if (signInResult.error.includes("Email not verified")) {
            // ‡∏ñ‡πâ‡∏≤ authorize ‡∏Ç‡∏≠‡∏á NextAuth ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ email verified ‡πÄ‡∏≠‡∏á
             nextAuthErrorMessage = "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢ (NextAuth)";
          }
          setAuthError(nextAuthErrorMessage);
          return { error: nextAuthErrorMessage, success: false, ok: false };
        }

        if (signInResult?.ok) {
            console.log(`‚úÖ [AuthContext] ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞ Session ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ NextAuth: ${identifier}`);
            await queryClient.invalidateQueries({ queryKey: ["session"] }); // Invalidate session query (e.g., for useSession)
            // onClose(); // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á onClose callback ‡∏°‡∏≤ ‡∏Å‡πá‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            return { success: true, ok: true };
        } else {
            // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà signInResult ‡πÑ‡∏°‡πà ok ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ error (‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡πà‡∏≠‡∏¢)
            console.warn(`‚ö†Ô∏è [AuthContext] NextAuth signInResult ‡πÑ‡∏°‡πà ok ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ error object`);
            setAuthError("‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô (NextAuth)");
            return { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô (NextAuth)", success: false, ok: false};
        }

      } catch (error: any) {
        console.error("‚ùå [AuthContext] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á signInWithCredentials:", error);
        const message = error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ";
        setAuthError(message);
        return { error: message, success: false, ok: false };
      } finally {
        setLoading(false);
      }
    },
    [queryClient, loading, setLoading, setAuthError] // Removed signIn (NextAuth) from deps if not used directly
  );

  const signInWithSocial = useCallback(async (provider: string): Promise<void> => {
    if (loading) {
      console.warn("‚ö†Ô∏è [AuthContext] ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢ social ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î");
      // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ return Promise.reject ‡∏´‡∏£‡∏∑‡∏≠ throw error ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢
      throw new Error("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà");
    }
    setLoading(true);
    setAuthError(null);
    console.log(`üîµ [AuthContext] ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢ social provider - provider: ${provider}`);
    try {
      // callbackUrl ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ô NextAuth config
      // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡∏à‡∏∞ override ‡∏Ñ‡πà‡∏≤ default
      const result = await nextAuthSignIn(provider, {
        redirect: true, // ‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥ social sign-in ‡∏à‡∏∞ redirect
        callbackUrl: "/", // ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏õ‡∏´‡∏•‡∏±‡∏á sign-in ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      });

      // ‡∏ñ‡πâ‡∏≤ redirect: true, ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å execute ‡∏ñ‡πâ‡∏≤ redirect ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      if (result?.error) {
        console.warn(`‚ö†Ô∏è [AuthContext] Social sign-in (${provider}) ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${result.error}`);
        let errorMessage = result.error;
        // ‡πÅ‡∏õ‡∏• error ‡∏Ç‡∏≠‡∏á NextAuth Oauth
        if (errorMessage.includes("OAuthAccountNotLinked")) {
          // Error ‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ authenticate ‡∏Å‡∏±‡∏ö provider ‡πÑ‡∏î‡πâ
          // ‡πÅ‡∏ï‡πà email ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å provider ‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ link ‡∏Å‡∏±‡∏ö provider ‡∏ô‡∏µ‡πâ
          // ‡∏´‡∏£‡∏∑‡∏≠ email ‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ local (credentials)
          errorMessage = "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏∑‡πà‡∏ô";
        } else if (errorMessage.includes("Callback") || errorMessage.toLowerCase().includes("oauth_callback_error")) {
          errorMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ${provider} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤`;
        } else if (errorMessage.toLowerCase().includes("access_denied")) {
            errorMessage = `‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≤‡∏Å ${provider}`;
        }
        setAuthError(errorMessage);
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ result.url ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ NextAuth ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ error page ‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ result.url ‡∏´‡∏£‡∏∑‡∏≠ redirect ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á setLoading(false) ‡πÄ‡∏≠‡∏á
        if (!result.url) setLoading(false);
      } else {
        // ‡∏ñ‡πâ‡∏≤ redirect: true ‡πÅ‡∏•‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        console.log(`‚úÖ [AuthContext] Social sign-in (${provider}) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏Å‡∏≥‡∏•‡∏±‡∏á redirect...`);
        // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á setLoading(false) ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏ñ‡πâ‡∏≤ redirect ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      }
    } catch (error: any) {
      console.error(`‚ùå [AuthContext] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á signInWithSocial (${provider}):`, error);
      setAuthError(error.message || `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢ ${provider}`);
      setLoading(false); // ‡∏ï‡πâ‡∏≠‡∏á setLoading(false) ‡πÉ‡∏ô catch block
    }
    // setLoading(false) ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô finally block ‡∏ñ‡πâ‡∏≤ signInWithSocial ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ redirect ‡πÄ‡∏™‡∏°‡∏≠‡πÑ‡∏õ
    // ‡πÅ‡∏ï‡πà‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤‡∏ï‡∏±‡πâ‡∏á redirect: true, ‡∏Å‡∏≤‡∏£ setLoading(false) ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ñ‡πâ‡∏≤ redirect
  }, [loading, setLoading, setAuthError]); // nextAuthSignIn ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÉ‡∏ô deps

  const signUp = useCallback(
    async (
      email: string,
      username: string,
      password: string,
      recaptchaToken: string // Token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å AuthModal
    ): Promise<{ error?: string; success?: boolean; message?: string }> => {
      if (loading) {
        console.warn("‚ö†Ô∏è [AuthContext] ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î");
        return { error: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà", success: false };
      }
      setLoading(true);
      setAuthError(null);
      console.log(`üîµ [AuthContext] ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${username} (${email}) ‡∏û‡∏£‡πâ‡∏≠‡∏° reCAPTCHA token`);

      try {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API endpoint /api/auth/signup ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
        const response = await fetch("/api/auth/signup", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email, username, password, recaptchaToken }),
        });

        const data = await response.json();
        console.log(`‚ÑπÔ∏è [AuthContext] ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å /api/auth/signup:`, data);

        if (!response.ok || !data.success) {
          // data.error ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å backend (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á reCAPTCHA error ‡∏à‡∏≤‡∏Å /api/auth/signup)
          let errorMessage = data.error || "‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß";

          // ‡πÅ‡∏õ‡∏• error message ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
          // Error ‡∏à‡∏≤‡∏Å reCAPTCHA ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å /api/auth/signup ‡πÅ‡∏•‡πâ‡∏ß
          // ‡πÄ‡∏ä‡πà‡∏ô "‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"
          if (typeof data.error === 'string') {
            if (data.error.includes("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")) {
              errorMessage = "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß";
            } else if (data.error.includes("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")) {
              errorMessage = "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß";
            } else if (data.error.includes("reCAPTCHA")) {
               // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏à‡∏≤‡∏Å reCAPTCHA ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å backend ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
               // ‡πÄ‡∏ä‡πà‡∏ô "‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô reCAPTCHA ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô reCAPTCHA ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
               errorMessage = data.error;
            }
          }
          console.warn(`‚ö†Ô∏è [AuthContext] ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${errorMessage}`);
          setAuthError(errorMessage);
          return { error: errorMessage, success: false };
        }

        // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        console.log(`‚úÖ [AuthContext] ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏à‡∏≤‡∏Å Backend API): ${username} (${email}), Message: ${data.message}`);
        // data.message ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡πà‡∏ô "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"
        return { success: true, message: data.message || "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" };

      } catch (error: any) {
        console.error("‚ùå [AuthContext] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á signUp:", error);
        const errorMessage = error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å";
        setAuthError(errorMessage);
        return { error: errorMessage, success: false };
      } finally {
        setLoading(false);
      }
    },
    [loading, setLoading, setAuthError]
  );

  const signOut = useCallback(async () => {
    if (loading && nextAuthStatus !== 'authenticated') { // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ loading ‡∏ñ‡πâ‡∏≤ authenticated
      console.warn("‚ö†Ô∏è [AuthContext] ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ authenticated");
      return;
    }
    // setLoading(true); // ‡∏Å‡∏≤‡∏£ signOut ‡∏Ç‡∏≠‡∏á NextAuth ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÄ‡∏£‡πá‡∏ß ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ loading UI ‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô‡πÄ‡∏≠‡∏á
    setAuthError(null);
    console.log(`üîµ [AuthContext] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö... Session status: ${nextAuthStatus}`);
    try {
      // callbackUrl: ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏õ‡∏´‡∏•‡∏±‡∏á sign out ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      await nextAuthSignOut({ redirect: true, callbackUrl: "/" });
      // ‡∏ñ‡πâ‡∏≤ redirect: true, ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å execute
      console.log(`‚úÖ [AuthContext] ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏Å‡∏≥‡∏•‡∏±‡∏á redirect...`);
      // queryClient.clear(); // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á react-query
      // queryClient.removeQueries(); // ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö query ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
    } catch (error: any) {
      console.error("‚ùå [AuthContext] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á signOut:", error);
      setAuthError(error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö");
      // setLoading(false); // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ loading ‡∏ñ‡πâ‡∏≤ signOut ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà redirect
    }
    // ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£ setLoading(false) ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏ñ‡πâ‡∏≤ redirect ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  }, [loading, nextAuthStatus, setAuthError /* queryClient, setLoading */]); // nextAuthSignOut ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£

  const contextValue: AuthContextType = {
    user,
    status: nextAuthStatus,
    signInWithCredentials,
    signInWithSocial,
    signUp,
    signOut,
    loading, // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loading ‡∏à‡∏≤‡∏Å AuthContext ‡πÄ‡∏≠‡∏á
    authError,
    setAuthError,
  };

  return <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>;
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô AuthProvider");
  }
  return context;
};