// src/context/AuthContext.tsx
// ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡πá‡∏Å‡∏ã‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ‡∏õ‡∏£‡∏±‡∏ö signInWithCredentials ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö /api/auth/signin, signInWithSocial ‡∏Å‡∏±‡∏ö OAuth providers, ‡πÅ‡∏•‡∏∞ signUp ‡∏Å‡∏±‡∏ö /api/auth/signup (‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞ verify reCAPTCHA ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)

import { createContext, useContext, useCallback, ReactNode, useState, useEffect } from "react";
import { useSession, signIn as nextAuthSignIn, signOut as nextAuthSignOut } from "next-auth/react";
import { SessionUser } from "@/app/api/auth/[...nextauth]/options"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path
import { useQueryClient } from "@tanstack/react-query";

// ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AuthContext
interface AuthContextType {
  user: SessionUser | null;
  status: "authenticated" | "loading" | "unauthenticated";
  signInWithCredentials: (
    identifier: string,
    password: string
  ) => Promise<{ error?: string; success?: boolean; verificationRequired?: boolean; ok?: boolean }>;
  signInWithSocial: (provider: string) => Promise<void>;
  signUp: ( // Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    email: string,
    username: string,
    password: string,
    recaptchaToken: string // ‡∏£‡∏±‡∏ö recaptchaToken ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å client-side reCAPTCHA
  ) => Promise<{ error?: string; success?: boolean; message?: string }>;
  signOut: () => Promise<void>;
  loading: boolean; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á AuthContext
  authError: string | null; // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  setAuthError: (error: string | null) => void; // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider = ({ children }: AuthProviderProps) => {
  const { data: session, status: nextAuthStatus } = useSession();
  const user = session?.user as SessionUser | null;
  const [loading, setLoading] = useState<boolean>(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö context ‡∏ô‡∏µ‡πâ
  const [authError, setAuthError] = useState<string | null>(null);
  const queryClient = useQueryClient();

  useEffect(() => {
    if (user || nextAuthStatus !== 'loading') {
      setAuthError(null); // ‡∏•‡πâ‡∏≤‡∏á error ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    }
  }, [user, nextAuthStatus]);

  const signInWithCredentials = useCallback(
    async (
      identifier: string,
      password: string
    ): Promise<{ error?: string; success?: boolean; verificationRequired?: boolean; ok?: boolean }> => {
      setLoading(true);
      setAuthError(null);
      console.log(`üîµ [AuthContext] ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢ identifier: ${identifier}`);

      try {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API /api/auth/signin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö User model
        // API ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ logic ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö credentials ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const response = await fetch("/api/auth/signin", { // Endpoint ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ identifier, password }),
        });

        const data = await response.json();

        if (!response.ok || data.error) {
          let errorMessage = data.error || "‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß";
          let verificationRequired = false;

          if (errorMessage.includes("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•")) {
            errorMessage = "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢";
            verificationRequired = true;
          } else if (errorMessage.includes("‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")) {
            errorMessage = "‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
          } else if (errorMessage.includes("‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")) {
            errorMessage = "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•";
          } else if (errorMessage.includes("‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö")) {
            errorMessage = data.error; // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å API ‡πÄ‡∏ä‡πà‡∏ô "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏à‡∏ô‡∏ñ‡∏∂‡∏á..."
          }

          console.warn(`‚ö†Ô∏è [AuthContext] ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${errorMessage}`);
          setAuthError(errorMessage);
          return { error: errorMessage, success: false, verificationRequired, ok: false };
        }

        // ‡∏ñ‡πâ‡∏≤ API /api/auth/signin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
        // ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ signIn ‡∏ú‡πà‡∏≤‡∏ô NextAuth ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á session
        const signInResult = await nextAuthSignIn("credentials", {
          redirect: false,
          // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà API /api/auth/signin ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡πÉ‡∏´‡πâ NextAuth
          // ‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥ `authorize` ‡πÉ‡∏ô NextAuth options ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
          // ‡∏ã‡∏∂‡πà‡∏á authorize ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å /api/auth/signin ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
          // ‡∏ô‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏î‡∏π‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô flow ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤ authorize ‡∏Ç‡∏≠‡∏á NextAuth provider credentials
          // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ database logic ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
          // ‡∏´‡∏≤‡∏Å /api/auth/signin ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏ô user object ‡∏ó‡∏µ‡πà NextAuth ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
          // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö authorize ‡πÉ‡∏ô NextAuth options ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ user object ‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
          // ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ NextAuth ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å authorize ‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô‡πÄ‡∏≠‡∏á
          identifier: data.user.username, // ‡∏´‡∏£‡∏∑‡∏≠ email, ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ß‡πà‡∏≤ authorize ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏≠‡∏∞‡πÑ‡∏£
          password, // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏° (NextAuth ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)
          // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á user object ‡∏à‡∏≤‡∏Å data.user ‡πÑ‡∏õ‡πÉ‡∏´‡πâ authorize ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ñ‡πâ‡∏≤ NextAuth ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
        });


        if (signInResult?.error) {
          console.warn(`‚ö†Ô∏è [AuthContext] ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (NextAuth): ${signInResult.error}`);
          // ‡πÅ‡∏õ‡∏• error message ‡∏à‡∏≤‡∏Å NextAuth
          let nextAuthErrorMessage = "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß";
          if (signInResult.error.includes("CredentialsSignin")) {
            nextAuthErrorMessage = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (NextAuth)";
          }
          setAuthError(nextAuthErrorMessage);
          return { error: nextAuthErrorMessage, success: false, ok: false };
        }

        console.log(`‚úÖ [AuthContext] ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏™‡∏£‡πâ‡∏≤‡∏á session): ${identifier}`);
        await queryClient.invalidateQueries({ queryKey: ["session"] }); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session cache
        return { success: true, ok: true };

      } catch (error: any) {
        console.error("‚ùå [AuthContext] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á signInWithCredentials:", error);
        const message = error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ";
        setAuthError(message);
        return { error: message, success: false, ok: false };
      } finally {
        setLoading(false);
      }
    },
    [queryClient] // ‡πÄ‡∏û‡∏¥‡πà‡∏° queryClient ‡πÉ‡∏ô dependency array
  );

  const signInWithSocial = useCallback(async (provider: string): Promise<void> => {
    setLoading(true);
    setAuthError(null);
    console.log(`üîµ [AuthContext] ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢ social provider: ${provider}`);
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å NextAuth social provider ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      // NextAuth ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£ redirect ‡πÅ‡∏•‡∏∞ callback
      const result = await nextAuthSignIn(provider, {
        redirect: true, // ‡πÉ‡∏´‡πâ NextAuth ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ redirect
        callbackUrl: "/", // URL ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏õ‡∏´‡∏•‡∏±‡∏á login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      });

      // ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ñ‡πâ‡∏≤ redirect ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (result?.error) {
        console.warn(`‚ö†Ô∏è [AuthContext] Social sign-in (${provider}) ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${result.error}`);
        let errorMessage = result.error;
        // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢
        if (errorMessage.includes("OAuthAccountNotLinked")) {
          errorMessage = "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß";
        } else if (errorMessage.includes("Callback")) {
          errorMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ${provider} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`;
        }
        setAuthError(errorMessage);
        // ‡πÑ‡∏°‡πà setLoading(false) ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏∞ redirect ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà redirect, ‡∏Ñ‡∏ß‡∏£ setLoading(false)
        if (!result.url) setLoading(false);
      } else {
        console.log(`‚úÖ [AuthContext] Social sign-in (${provider}) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏Å‡∏≥‡∏•‡∏±‡∏á redirect...`);
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤‡∏Å NextAuth ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ redirect
        // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á queryClient.invalidateQueries ‡∏´‡∏•‡∏±‡∏á redirect ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ (‡πÉ‡∏ô useEffect ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà callbackUrl ‡πÑ‡∏õ)
      }
    } catch (error: any) {
      console.error(`‚ùå [AuthContext] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á signInWithSocial (${provider}):`, error);
      setAuthError(error.message || `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢ ${provider}`);
      setLoading(false); // ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error
    }
    // ‡πÑ‡∏°‡πà setLoading(false) ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞ redirect
  }, []);


  // signUp method ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö recaptchaToken
  const signUp = useCallback(
    async (
      email: string,
      username: string,
      password: string,
      recaptchaToken: string // ‡πÄ‡∏û‡∏¥‡πà‡∏° recaptchaToken ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    ): Promise<{ error?: string; success?: boolean; message?: string }> => {
      setLoading(true);
      setAuthError(null);
      console.log(`üîµ [AuthContext] ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${username} (${email}) ‡∏û‡∏£‡πâ‡∏≠‡∏° reCAPTCHA token`);
      try {
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á API /api/auth/signup
        const response = await fetch("/api/auth/signup", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email, username, password, recaptchaToken }), // ‡∏™‡πà‡∏á recaptchaToken ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
        });

        const data = await response.json();

        if (!response.ok || !data.success) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö data.success ‡∏î‡πâ‡∏ß‡∏¢
          const errorMessage = data.error || `‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${response.status})`;
          console.warn(`‚ö†Ô∏è [AuthContext] ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${errorMessage}`);
          setAuthError(errorMessage);
          return { error: errorMessage, success: false };
        }

        console.log(`‚úÖ [AuthContext] ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${username} (${email})`);
        return { success: true, message: data.message || "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" };
      } catch (error: any) {
        console.error("‚ùå [AuthContext] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á signUp:", error);
        const errorMessage = error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å";
        setAuthError(errorMessage);
        return { error: errorMessage, success: false };
      } finally {
        setLoading(false);
      }
    },
    [] // Dependencies (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  );


  const signOut = useCallback(async () => {
    setLoading(true);
    setAuthError(null);
    console.log(`üîµ [AuthContext] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö...`);
    try {
      await nextAuthSignOut({ redirect: true, callbackUrl: "/" }); // ‡πÉ‡∏´‡πâ NextAuth ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ redirect
      console.log(`‚úÖ [AuthContext] ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏Å‡∏≥‡∏•‡∏±‡∏á redirect...`);
      // queryClient.removeQueries(["session"]); // ‡∏•‡∏ö session cache
      // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á setLoading(false) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞ redirect
    } catch (error: any) {
      console.error("‚ùå [AuthContext] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á signOut:", error);
      setAuthError(error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö");
      setLoading(false); // ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ñ‡πâ‡∏≤ error ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà redirect
    }
  }, []);

  const contextValue: AuthContextType = {
    user,
    status: nextAuthStatus,
    signInWithCredentials,
    signInWithSocial,
    signUp, // ‡πÄ‡∏û‡∏¥‡πà‡∏° signUp ‡πÉ‡∏ô context
    signOut,
    loading,
    authError,
    setAuthError,
  };

  return <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>;
};

// Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô AuthContext
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô AuthProvider");
  }
  return context;
};