// scripts/validate-whisper-999.js
// Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• The Whisper of 999 ‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

const mongoose = require('mongoose');
const dbConnect = require('../src/backend/lib/mongodb-script');

// Import Models
const NovelModel = require('../src/backend/models/Novel').default;
const EpisodeModel = require('../src/backend/models/Episode').default;
const SceneModel = require('../src/backend/models/Scene').default;
const CharacterModel = require('../src/backend/models/Character').default;
const ChoiceModel = require('../src/backend/models/Choice').default;
const UserModel = require('../src/backend/models/User').default;
const CategoryModel = require('../src/backend/models/Category').default;
const StoryMapModel = require('../src/backend/models/StoryMap').default;

require('dotenv').config();

const NOVEL_SLUG = 'whisper-from-apartment-999';
const AUTHOR_USERNAME = process.env.AUTHOR_USERNAME || 'whisper_author';

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
const validateWhisper999Data = async () => {
  try {
    console.log('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏£‡∏∞‡∏ã‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ï‡πÄ‡∏°‡∏ô‡∏ó‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç999"...\n');
    
    await dbConnect();

    let isValid = true;
    const errors = [];
    const warnings = [];

    // === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á ===
    console.log('üë§ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á...');
    const author = await UserModel.findOne({ username: AUTHOR_USERNAME });
    
    if (!author) {
      errors.push(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á: ${AUTHOR_USERNAME}`);
      isValid = false;
    } else {
      console.log(`‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á: ${author.username} (${author._id})`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• profile
      if (!author.profile?.displayName) {
        warnings.push(`‚ö†Ô∏è  ‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ displayName`);
      }
      if (!author.profile?.penName) {
        warnings.push(`‚ö†Ô∏è  ‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ penName`);
      }
      if (author.role !== 'WRITER') {
        warnings.push(`‚ö†Ô∏è  Role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà WRITER: ${author.role}`);
      }
    }

    // === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ===
    console.log('\nüìÇ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà...');
    const requiredCategories = [
      { name: '‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢', type: 'LANGUAGE', slug: 'th' },
      { name: '‡∏™‡∏¢‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç', type: 'GENRE', slug: 'horror' },
      { name: '‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤', type: 'SUB_GENRE', slug: 'psychological' },
      { name: '18+', type: 'AGE_RATING', slug: '18-plus' }
    ];

    for (const reqCat of requiredCategories) {
      const category = await CategoryModel.findOne({ 
        slug: reqCat.slug, 
        categoryType: reqCat.type 
      });
      
      if (!category) {
        errors.push(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${reqCat.name} (${reqCat.type})`);
        isValid = false;
      } else {
        console.log(`‚úÖ ‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${category.name} (${category.categoryType})`);
      }
    }

    // === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ===
    console.log('\nüìñ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢...');
    const novel = await NovelModel.findOne({ slug: NOVEL_SLUG })
      .populate('author')
      .populate('themeAssignment.mainTheme.categoryId')
      .populate('language')
      .populate('ageRatingCategoryId');

    if (!novel) {
      errors.push(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢: ${NOVEL_SLUG}`);
      isValid = false;
    } else {
      console.log(`‚úÖ ‡∏û‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢: ${novel.title} (${novel._id})`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
      const novelChecks = [
        { field: 'title', expected: '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏£‡∏∞‡∏ã‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ï‡πÄ‡∏°‡∏ô‡∏ó‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç999' },
        { field: 'status', expected: 'PUBLISHED' },
        { field: 'accessLevel', expected: 'PUBLIC' },
        { field: 'endingType', expected: 'MULTIPLE_ENDINGS' }
      ];

      for (const check of novelChecks) {
        if (novel[check.field] !== check.expected) {
          warnings.push(`‚ö†Ô∏è  Novel.${check.field}: ‡πÑ‡∏î‡πâ "${novel[check.field]}" ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á "${check.expected}"`);
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
      if (!novel.stats || novel.stats.viewsCount === 0) {
        warnings.push(`‚ö†Ô∏è  Novel stats ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á
      if (novel.author._id.toString() !== author._id.toString()) {
        errors.push(`‚ùå Novel ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
        isValid = false;
      }
    }

    // === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Episodes ===
    console.log('\nüìö ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Episodes...');
    const episodes = await EpisodeModel.find({ novelId: novel._id }).sort({ episodeOrder: 1 });
    
    if (episodes.length === 0) {
      errors.push(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Episodes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢`);
      isValid = false;
    } else {
      console.log(`‚úÖ ‡∏û‡∏ö Episodes: ${episodes.length} ‡∏ï‡∏≠‡∏ô`);
      
      const episode1 = episodes[0];
      if (episode1.title !== '‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1: ‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤') {
        warnings.push(`‚ö†Ô∏è  Episode 1 title ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: "${episode1.title}"`);
      }
      
      if (episode1.status !== 'PUBLISHED') {
        warnings.push(`‚ö†Ô∏è  Episode 1 status ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà PUBLISHED: ${episode1.status}`);
      }
    }

    // === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ===
    console.log('\nüë• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£...');
    const characters = await CharacterModel.find({ novelId: novel._id });
    
    if (characters.length === 0) {
      errors.push(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢`);
      isValid = false;
    } else {
      console.log(`‚úÖ ‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: ${characters.length} ‡∏ï‡∏±‡∏ß`);
      
      const expectedCharacters = ['nira', 'agent'];
      const foundCharacters = characters.map(c => c.characterCode);
      
      for (const expected of expectedCharacters) {
        if (!foundCharacters.includes(expected)) {
          warnings.push(`‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: ${expected}`);
        }
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏Å
      const protagonist = characters.find(c => c.roleInStory === 'main_protagonist');
      if (!protagonist) {
        warnings.push(`‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏Å (main_protagonist)`);
      }
    }

    // === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ===
    console.log('\nüéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å...');
    const choices = await ChoiceModel.find({ novelId: novel._id });
    
    if (choices.length === 0) {
      errors.push(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢`);
      isValid = false;
    } else {
      console.log(`‚úÖ ‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${choices.length} ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å`);
      
      const expectedChoices = [
        'CHOICE_EXPLORE', 'CHOICE_CLEAN', 'CHOICE_CALL',
        'CHOICE_LISTEN_NOW', 'CHOICE_LISTEN_LATER', 'CHOICE_BURN_TAPE'
      ];
      
      const foundChoices = choices.map(c => c.choiceCode);
      
      for (const expected of expectedChoices) {
        if (!foundChoices.includes(expected)) {
          warnings.push(`‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${expected}`);
        }
      }
    }

    // === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏â‡∏≤‡∏Å ===
    console.log('\nüé¨ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏â‡∏≤‡∏Å...');
    const scenes = await SceneModel.find({ novelId: novel._id }).sort({ sceneOrder: 1 });
    
    if (scenes.length === 0) {
      errors.push(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏â‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢`);
      isValid = false;
    } else {
      console.log(`‚úÖ ‡∏û‡∏ö‡∏â‡∏≤‡∏Å: ${scenes.length} ‡∏â‡∏≤‡∏á`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏â‡∏≤‡∏Å‡πÅ‡∏£‡∏Å
      const firstScene = scenes[0];
      if (firstScene.title !== '‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏ñ‡∏∂‡∏á') {
        warnings.push(`‚ö†Ô∏è  ‡∏â‡∏≤‡∏Å‡πÅ‡∏£‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏ñ‡∏∂‡∏á": "${firstScene.title}"`);
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏â‡∏≤‡∏á
      let connectedScenes = 0;
      for (const scene of scenes) {
        if (scene.defaultNextSceneId) {
          connectedScenes++;
        }
      }
      
      if (connectedScenes < scenes.length / 2) {
        warnings.push(`‚ö†Ô∏è  ‡∏â‡∏≤‡∏Å‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô (${connectedScenes}/${scenes.length})`);
      }
    }

    // === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Story Map (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ===
    console.log('\nüìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Story Map...');
    const storyMap = await StoryMapModel.findOne({ novelId: novel._id });
    
    if (!storyMap) {
      warnings.push(`‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö Story Map (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)`);
    } else {
      console.log(`‚úÖ ‡∏û‡∏ö Story Map: ${storyMap.title} (${storyMap.nodes.length} nodes, ${storyMap.edges.length} edges)`);
      
      if (storyMap.nodes.length < 3) {
        warnings.push(`‚ö†Ô∏è  Story Map ‡∏°‡∏µ nodes ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: ${storyMap.nodes.length}`);
      }
      
      if (storyMap.edges.length < 2) {
        warnings.push(`‚ö†Ô∏è  Story Map ‡∏°‡∏µ edges ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: ${storyMap.edges.length}`);
      }
    }

    // === ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ===
    console.log('\n' + '='.repeat(50));
    console.log('üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
    console.log('='.repeat(50));

    if (isValid) {
      console.log('üéâ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!');
    } else {
      console.log('üí• ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç!');
    }

    if (errors.length > 0) {
      console.log('\n‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:');
      errors.forEach(error => console.log(`  ${error}`));
    }

    if (warnings.length > 0) {
      console.log('\n‚ö†Ô∏è  ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:');
      warnings.forEach(warning => console.log(`  ${warning}`));
    }

    console.log('\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:');
    console.log(`  ‚Ä¢ ‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á: ${author ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ ‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢: ${novel ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ Episodes: ${episodes?.length || 0} ‡∏ï‡∏≠‡∏ô`);
    console.log(`  ‚Ä¢ ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: ${characters?.length || 0} ‡∏ï‡∏±‡∏ß`);
    console.log(`  ‚Ä¢ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${choices?.length || 0} ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å`);
    console.log(`  ‚Ä¢ ‡∏â‡∏≤‡∏Å: ${scenes?.length || 0} ‡∏â‡∏≤‡∏á`);
    console.log(`  ‚Ä¢ Story Map: ${storyMap ? '‚úÖ' : '‚ùå'}`);

    console.log('\n' + '='.repeat(50));

    return {
      isValid,
      errors,
      warnings,
      stats: {
        author: !!author,
        novel: !!novel,
        episodesCount: episodes?.length || 0,
        charactersCount: characters?.length || 0,
        choicesCount: choices?.length || 0,
        scenesCount: scenes?.length || 0,
        hasStoryMap: !!storyMap
      }
    };

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    throw error;
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.connection.close();
      console.log('\nüîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß');
    }
  }
};

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  validateWhisper999Data();
}

module.exports = { validateWhisper999Data };
